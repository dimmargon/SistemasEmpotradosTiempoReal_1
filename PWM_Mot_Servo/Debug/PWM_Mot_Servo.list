
PWM_Mot_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dec  08003dec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df4  08003df4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08003e08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003e08  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001991  00000000  00000000  0002ca23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  0002f168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025b00  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000099ea  00000000  00000000  00055940  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed16c  00000000  00000000  0005f32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a8  00000000  00000000  0014c514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d8c 	.word	0x08003d8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d8c 	.word	0x08003d8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <setMotorSpeed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setMotorSpeed (int16_t speed){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if(speed <0){
 80004d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	da0d      	bge.n	80004f6 <setMotorSpeed+0x2e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, -speed);
 80004da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004de:	425a      	negs	r2, r3
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <setMotorSpeed+0x50>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <setMotorSpeed+0x50>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2200      	movs	r2, #0
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 80004ee:	20c8      	movs	r0, #200	; 0xc8
 80004f0:	f000 fb96 	bl	8000c20 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
		HAL_Delay(200);
	}

}
 80004f4:	e00b      	b.n	800050e <setMotorSpeed+0x46>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <setMotorSpeed+0x50>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <setMotorSpeed+0x50>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(200);
 8000508:	20c8      	movs	r0, #200	; 0xc8
 800050a:	f000 fb89 	bl	8000c20 <HAL_Delay>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000a8 	.word	0x200000a8

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fb0c 	bl	8000b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f861 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f96b 	bl	8000804 <MX_GPIO_Init>
  MX_TIM2_Init();
 800052e:	f000 f8d5 	bl	80006dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f937 	bl	80007a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000536:	2108      	movs	r1, #8
 8000538:	482b      	ldr	r0, [pc, #172]	; (80005e8 <main+0xcc>)
 800053a:	f002 f94b 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800053e:	2100      	movs	r1, #0
 8000540:	4829      	ldr	r0, [pc, #164]	; (80005e8 <main+0xcc>)
 8000542:	f002 f947 	bl	80027d4 <HAL_TIM_PWM_Start>
		  HAL_Delay(200);
	  }
	  */
	  //setMotorSpeed(-1000);

	  for (th=0; th < 4000; th+=100){
 8000546:	2300      	movs	r3, #0
 8000548:	80fb      	strh	r3, [r7, #6]
 800054a:	e00b      	b.n	8000564 <main+0x48>
		  setMotorSpeed(th);
 800054c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ffb9 	bl	80004c8 <setMotorSpeed>
		  HAL_Delay(200);
 8000556:	20c8      	movs	r0, #200	; 0xc8
 8000558:	f000 fb62 	bl	8000c20 <HAL_Delay>
	  for (th=0; th < 4000; th+=100){
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	3364      	adds	r3, #100	; 0x64
 8000560:	b29b      	uxth	r3, r3
 8000562:	80fb      	strh	r3, [r7, #6]
 8000564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000568:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800056c:	dbee      	blt.n	800054c <main+0x30>
	  }
	  for (th=4000; th > 0; th-=100){
 800056e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000572:	80fb      	strh	r3, [r7, #6]
 8000574:	e00b      	b.n	800058e <main+0x72>
		  setMotorSpeed(th);
 8000576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffa4 	bl	80004c8 <setMotorSpeed>
		  HAL_Delay(200);
 8000580:	20c8      	movs	r0, #200	; 0xc8
 8000582:	f000 fb4d 	bl	8000c20 <HAL_Delay>
	  for (th=4000; th > 0; th-=100){
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	3b64      	subs	r3, #100	; 0x64
 800058a:	b29b      	uxth	r3, r3
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000592:	2b00      	cmp	r3, #0
 8000594:	dcef      	bgt.n	8000576 <main+0x5a>
	  }
	  for (th=0; th > -4000; th-=100){
 8000596:	2300      	movs	r3, #0
 8000598:	80fb      	strh	r3, [r7, #6]
 800059a:	e00b      	b.n	80005b4 <main+0x98>
		  setMotorSpeed(th);
 800059c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff91 	bl	80004c8 <setMotorSpeed>
		  HAL_Delay(200);
 80005a6:	20c8      	movs	r0, #200	; 0xc8
 80005a8:	f000 fb3a 	bl	8000c20 <HAL_Delay>
	  for (th=0; th > -4000; th-=100){
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	3b64      	subs	r3, #100	; 0x64
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	80fb      	strh	r3, [r7, #6]
 80005b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b8:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 80005bc:	dcee      	bgt.n	800059c <main+0x80>
	  }
	  for (th=-4000; th < 0; th+=100){
 80005be:	f24f 0360 	movw	r3, #61536	; 0xf060
 80005c2:	80fb      	strh	r3, [r7, #6]
 80005c4:	e00b      	b.n	80005de <main+0xc2>
		  setMotorSpeed(th);
 80005c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff7c 	bl	80004c8 <setMotorSpeed>
		  HAL_Delay(200);
 80005d0:	20c8      	movs	r0, #200	; 0xc8
 80005d2:	f000 fb25 	bl	8000c20 <HAL_Delay>
	  for (th=-4000; th < 0; th+=100){
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	3364      	adds	r3, #100	; 0x64
 80005da:	b29b      	uxth	r3, r3
 80005dc:	80fb      	strh	r3, [r7, #6]
 80005de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dbef      	blt.n	80005c6 <main+0xaa>
  {
 80005e6:	e7ae      	b.n	8000546 <main+0x2a>
 80005e8:	200000a8 	.word	0x200000a8

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0b8      	sub	sp, #224	; 0xe0
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fbbe 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2288      	movs	r2, #136	; 0x88
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fbb0 	bl	8003d7c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061c:	2310      	movs	r3, #16
 800061e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800062e:	2360      	movs	r3, #96	; 0x60
 8000630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063a:	2301      	movs	r3, #1
 800063c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000640:	2301      	movs	r3, #1
 8000642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000646:	2328      	movs	r3, #40	; 0x28
 8000648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064c:	2307      	movs	r3, #7
 800064e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fdf0 	bl	8001248 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800066e:	f000 f915 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2303      	movs	r3, #3
 800067a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f9bc 	bl	8001a14 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006a2:	f000 f8fb 	bl	800089c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006aa:	2300      	movs	r3, #0
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fbb3 	bl	8001e1c <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006bc:	f000 f8ee 	bl	800089c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c4:	f000 fd6a 	bl	800119c <HAL_PWREx_ControlVoltageScaling>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006ce:	f000 f8e5 	bl	800089c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	37e0      	adds	r7, #224	; 0xe0
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
 80006fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <MX_TIM2_Init+0xc4>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <MX_TIM2_Init+0xc4>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_TIM2_Init+0xc4>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_TIM2_Init+0xc4>)
 8000716:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800071a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_TIM2_Init+0xc4>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_TIM2_Init+0xc4>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000728:	481d      	ldr	r0, [pc, #116]	; (80007a0 <MX_TIM2_Init+0xc4>)
 800072a:	f002 f827 	bl	800277c <HAL_TIM_PWM_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000734:	f000 f8b2 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4816      	ldr	r0, [pc, #88]	; (80007a0 <MX_TIM2_Init+0xc4>)
 8000748:	f002 fd4a 	bl	80031e0 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000752:	f000 f8a3 	bl	800089c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000756:	2360      	movs	r3, #96	; 0x60
 8000758:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_TIM2_Init+0xc4>)
 800076e:	f002 f889 	bl	8002884 <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000778:	f000 f890 	bl	800089c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	2208      	movs	r2, #8
 8000780:	4619      	mov	r1, r3
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <MX_TIM2_Init+0xc4>)
 8000784:	f002 f87e 	bl	8002884 <HAL_TIM_PWM_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 f885 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <MX_TIM2_Init+0xc4>)
 8000794:	f000 f8cc 	bl	8000930 <HAL_TIM_MspPostInit>

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000a8 	.word	0x200000a8

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART1_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e8:	f002 fd82 	bl	80032f0 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f853 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_GPIO_Init+0x90>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <MX_GPIO_Init+0x90>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_GPIO_Init+0x90>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_GPIO_Init+0x90>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MX_GPIO_Init+0x90>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_GPIO_Init+0x90>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_GPIO_Init+0x94>)
 8000866:	f000 fae3 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800086a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000870:	2312      	movs	r3, #18
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0x94>)
 8000888:	f000 fad2 	bl	8000e30 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	; 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000904:	d10b      	bne.n	800091e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_TIM_PWM_MspInit+0x38>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_TIM_PWM_MspInit+0x38>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6593      	str	r3, [r2, #88]	; 0x58
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_TIM_PWM_MspInit+0x38>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000950:	d11d      	bne.n	800098e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_TIM_MspPostInit+0x68>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_TIM_MspPostInit+0x68>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_TIM_MspPostInit+0x68>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800096a:	f248 0304 	movw	r3, #32772	; 0x8004
 800096e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800097c:	2301      	movs	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f000 fa51 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0x7c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d127      	bne.n	8000a0e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	23c0      	movs	r3, #192	; 0xc0
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fe:	2307      	movs	r3, #7
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0x84>)
 8000a0a:	f000 fa11 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40013800 	.word	0x40013800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000400 	.word	0x48000400

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f8b4 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <SystemInit+0x64>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <SystemInit+0x64>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <SystemInit+0x68>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <SystemInit+0x68>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <SystemInit+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <SystemInit+0x68>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <SystemInit+0x68>)
 8000aac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ab0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ab4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <SystemInit+0x68>)
 8000ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000abc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <SystemInit+0x68>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <SystemInit+0x68>)
 8000ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <SystemInit+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SystemInit+0x64>)
 8000ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	40021000 	.word	0x40021000

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000af0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000af2:	e003      	b.n	8000afc <LoopCopyDataInit>

08000af4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000af6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000af8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000afa:	3104      	adds	r1, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b04:	d3f6      	bcc.n	8000af4 <CopyDataInit>
	ldr	r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b08:	e002      	b.n	8000b10 <LoopFillZerobss>

08000b0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b0c:	f842 3b04 	str.w	r3, [r2], #4

08000b10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <LoopForever+0x16>)
	cmp	r2, r3
 8000b12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b14:	d3f9      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffb3 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f003 f90b 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fcfd 	bl	800051c <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b28:	08003dfc 	.word	0x08003dfc
	ldr	r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b30:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b38:	200000ec 	.word	0x200000ec

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>

08000b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f93d 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 f80e 	bl	8000b70 <HAL_InitTick>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	e001      	b.n	8000b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b60:	f7ff fea4 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d022      	beq.n	8000bca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f93c 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10f      	bne.n	8000bc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d809      	bhi.n	8000bbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	2200      	movs	r2, #0
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	f000 f914 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x70>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e004      	b.n	8000bce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e001      	b.n	8000bce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	200000e8 	.word	0x200000e8
 8000c04:	20000008 	.word	0x20000008

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200000e8 	.word	0x200000e8

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d004      	beq.n	8000c44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_Delay+0x40>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c44:	bf00      	nop
 8000c46:	f7ff ffdf 	bl	8000c08 <HAL_GetTick>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d8f7      	bhi.n	8000c46 <HAL_Delay+0x26>
  {
  }
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5c 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3e:	e17f      	b.n	8001140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 8171 	beq.w	800113a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d00b      	beq.n	8000e78 <HAL_GPIO_Init+0x48>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d007      	beq.n	8000e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6c:	2b11      	cmp	r3, #17
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b12      	cmp	r3, #18
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d118      	bne.n	8000f18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x128>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b12      	cmp	r3, #18
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	6939      	ldr	r1, [r7, #16]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80ac 	beq.w	800113a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <HAL_GPIO_Init+0x32c>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	4a5d      	ldr	r2, [pc, #372]	; (800115c <HAL_GPIO_Init+0x32c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6613      	str	r3, [r2, #96]	; 0x60
 8000fee:	4b5b      	ldr	r3, [pc, #364]	; (800115c <HAL_GPIO_Init+0x32c>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ffa:	4a59      	ldr	r2, [pc, #356]	; (8001160 <HAL_GPIO_Init+0x330>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x242>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x334>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x23e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x23a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x236>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x232>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x22e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x22a>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001072:	2300      	movs	r3, #0
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001084:	4936      	ldr	r1, [pc, #216]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_GPIO_Init+0x34c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b6:	4a31      	ldr	r2, [pc, #196]	; (800117c <HAL_GPIO_Init+0x34c>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x34c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_GPIO_Init+0x34c>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_GPIO_Init+0x34c>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_GPIO_Init+0x34c>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_GPIO_Init+0x34c>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_GPIO_Init+0x34c>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f ae78 	bne.w	8000e40 <HAL_GPIO_Init+0x10>
  }
}
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	48000c00 	.word	0x48000c00
 8001170:	48001000 	.word	0x48001000
 8001174:	48001400 	.word	0x48001400
 8001178:	48001800 	.word	0x48001800
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_PWREx_GetVoltageRange+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40007000 	.word	0x40007000

0800119c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011aa:	d130      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b8:	d038      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2232      	movs	r2, #50	; 0x32
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9b      	lsrs	r3, r3, #18
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e0:	e002      	b.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f4:	d102      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f2      	bne.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001208:	d110      	bne.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e00f      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d007      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e3d4      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4ba1      	ldr	r3, [pc, #644]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001264:	4b9e      	ldr	r3, [pc, #632]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80e4 	beq.w	8001444 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_RCC_OscConfig+0x4a>
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	f040 808b 	bne.w	80013a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b01      	cmp	r3, #1
 800128e:	f040 8087 	bne.w	80013a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001292:	4b93      	ldr	r3, [pc, #588]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x62>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e3ac      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1a      	ldr	r2, [r3, #32]
 80012ae:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <HAL_RCC_OscConfig+0x7c>
 80012ba:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012c2:	e005      	b.n	80012d0 <HAL_RCC_OscConfig+0x88>
 80012c4:	4b86      	ldr	r3, [pc, #536]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80012c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d223      	bcs.n	800131c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fd3f 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e38d      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e8:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a7c      	ldr	r2, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4977      	ldr	r1, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001306:	4b76      	ldr	r3, [pc, #472]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4972      	ldr	r1, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e025      	b.n	8001368 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131c:	4b70      	ldr	r3, [pc, #448]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a6f      	ldr	r2, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	496a      	ldr	r1, [pc, #424]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133a:	4b69      	ldr	r3, [pc, #420]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	4965      	ldr	r1, [pc, #404]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fcff 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e34d      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001368:	f000 fc36 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 800136c:	4601      	mov	r1, r0
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4a5a      	ldr	r2, [pc, #360]	; (80014e4 <HAL_RCC_OscConfig+0x29c>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa21 f303 	lsr.w	r3, r1, r3
 8001384:	4a58      	ldr	r2, [pc, #352]	; (80014e8 <HAL_RCC_OscConfig+0x2a0>)
 8001386:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_RCC_OscConfig+0x2a4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fbef 	bl	8000b70 <HAL_InitTick>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d052      	beq.n	8001442 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	e331      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d032      	beq.n	800140e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc28 	bl	8000c08 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013bc:	f7ff fc24 	bl	8000c08 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e31a      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	493b      	ldr	r1, [pc, #236]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	4936      	ldr	r1, [pc, #216]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e01a      	b.n	8001444 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800141a:	f7ff fbf5 	bl	8000c08 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001422:	f7ff fbf1 	bl	8000c08 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e2e7      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x1da>
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001442:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d074      	beq.n	800153a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x21a>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d10b      	bne.n	800147a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d064      	beq.n	8001538 <HAL_RCC_OscConfig+0x2f0>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d160      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e2c4      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x24a>
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 800148a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e01d      	b.n	80014ce <HAL_RCC_OscConfig+0x286>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x26e>
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x286>
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_RCC_OscConfig+0x298>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d01c      	beq.n	8001510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fb97 	bl	8000c08 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014dc:	e011      	b.n	8001502 <HAL_RCC_OscConfig+0x2ba>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	08003da4 	.word	0x08003da4
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb8a 	bl	8000c08 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e280      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001502:	4baf      	ldr	r3, [pc, #700]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2a8>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fb7a 	bl	8000c08 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fb76 	bl	8000c08 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e26c      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152a:	4ba5      	ldr	r3, [pc, #660]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d0>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d060      	beq.n	8001608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x310>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d119      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d116      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001558:	4b99      	ldr	r3, [pc, #612]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x328>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e249      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b93      	ldr	r3, [pc, #588]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	4990      	ldr	r1, [pc, #576]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001584:	e040      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d023      	beq.n	80015d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158e:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a8b      	ldr	r2, [pc, #556]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fb35 	bl	8000c08 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb31 	bl	8000c08 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e227      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b4:	4b82      	ldr	r3, [pc, #520]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b7f      	ldr	r3, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	497c      	ldr	r1, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b7a      	ldr	r3, [pc, #488]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a79      	ldr	r2, [pc, #484]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80015dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb11 	bl	8000c08 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb0d 	bl	8000c08 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e203      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fc:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d03c      	beq.n	800168e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01c      	beq.n	8001656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001622:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff faec 	bl	8000c08 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fae8 	bl	8000c08 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1de      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001646:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ef      	beq.n	8001634 <HAL_RCC_OscConfig+0x3ec>
 8001654:	e01b      	b.n	800168e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001656:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff facf 	bl	8000c08 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff facb 	bl	8000c08 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1c1      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001680:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ef      	bne.n	800166e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a6 	beq.w	80017e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016a0:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	4b44      	ldr	r3, [pc, #272]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	4a43      	ldr	r2, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b6:	6593      	str	r3, [r2, #88]	; 0x58
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	4b3e      	ldr	r3, [pc, #248]	; (80017c4 <HAL_RCC_OscConfig+0x57c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d118      	bne.n	8001706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d4:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x57c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a3a      	ldr	r2, [pc, #232]	; (80017c4 <HAL_RCC_OscConfig+0x57c>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fa92 	bl	8000c08 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff fa8e 	bl	8000c08 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e184      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_RCC_OscConfig+0x57c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x4d8>
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800171e:	e024      	b.n	800176a <HAL_RCC_OscConfig+0x522>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d110      	bne.n	800174a <HAL_RCC_OscConfig+0x502>
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001748:	e00f      	b.n	800176a <HAL_RCC_OscConfig+0x522>
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001750:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fa49 	bl	8000c08 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fa45 	bl	8000c08 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e139      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x578>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0ed      	beq.n	800177a <HAL_RCC_OscConfig+0x532>
 800179e:	e01a      	b.n	80017d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa32 	bl	8000c08 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a6:	e00f      	b.n	80017c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fa2e 	bl	8000c08 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d906      	bls.n	80017c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e122      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	4b90      	ldr	r3, [pc, #576]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1e8      	bne.n	80017a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b8b      	ldr	r3, [pc, #556]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	4a8a      	ldr	r2, [pc, #552]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8108 	beq.w	8001a02 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	f040 80d0 	bne.w	800199c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017fc:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	429a      	cmp	r2, r3
 800180e:	d130      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	3b01      	subs	r3, #1
 800181c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d127      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d11f      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800183c:	2a07      	cmp	r2, #7
 800183e:	bf14      	ite	ne
 8001840:	2201      	movne	r2, #1
 8001842:	2200      	moveq	r2, #0
 8001844:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	4293      	cmp	r3, r2
 8001848:	d113      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d06e      	beq.n	8001950 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d069      	beq.n	800194c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001884:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b7      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001894:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800189a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800189e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a0:	f7ff f9b2 	bl	8000c08 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f9ae 	bl	8000c08 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0a4      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ba:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c6:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_RCC_OscConfig+0x7c8>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018d6:	3a01      	subs	r2, #1
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018e0:	0212      	lsls	r2, r2, #8
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018e8:	0852      	lsrs	r2, r2, #1
 80018ea:	3a01      	subs	r2, #1
 80018ec:	0552      	lsls	r2, r2, #21
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018f4:	0852      	lsrs	r2, r2, #1
 80018f6:	3a01      	subs	r2, #1
 80018f8:	0652      	lsls	r2, r2, #25
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001900:	0912      	lsrs	r2, r2, #4
 8001902:	0452      	lsls	r2, r2, #17
 8001904:	430a      	orrs	r2, r1
 8001906:	4941      	ldr	r1, [pc, #260]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800190c:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3e      	ldr	r2, [pc, #248]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001918:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a3b      	ldr	r2, [pc, #236]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001924:	f7ff f970 	bl	8000c08 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f96c 	bl	8000c08 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e062      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194a:	e05a      	b.n	8001a02 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e059      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d152      	bne.n	8001a02 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a2a      	ldr	r2, [pc, #168]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001974:	f7ff f948 	bl	8000c08 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f944 	bl	8000c08 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e03a      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x734>
 800199a:	e032      	b.n	8001a02 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d02d      	beq.n	80019fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019c0:	f023 0303 	bic.w	r3, r3, #3
 80019c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f917 	bl	8000c08 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff f913 	bl	8000c08 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e009      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x7c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x796>
 80019fc:	e001      	b.n	8001a02 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	f99d808c 	.word	0xf99d808c

08001a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0c8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d910      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 0207 	bic.w	r2, r3, #7
 8001a3e:	4961      	ldr	r1, [pc, #388]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0b0      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d04c      	beq.n	8001afe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6c:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d121      	bne.n	8001abc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e09e      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d115      	bne.n	8001abc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e092      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e086      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e07e      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001abc:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 0203 	bic.w	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	493f      	ldr	r1, [pc, #252]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ace:	f7ff f89b 	bl	8000c08 <HAL_GetTick>
 8001ad2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad6:	f7ff f897 	bl	8000c08 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e066      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 020c 	and.w	r2, r3, #12
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d1eb      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	492c      	ldr	r1, [pc, #176]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d210      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 0207 	bic.w	r2, r3, #7
 8001b32:	4924      	ldr	r1, [pc, #144]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e036      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4918      	ldr	r1, [pc, #96]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4910      	ldr	r1, [pc, #64]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8a:	f000 f825 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ffde 	bl	8000b70 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08003da4 	.word	0x08003da4
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x34>
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d121      	bne.n	8001c4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d11e      	bne.n	8001c4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c0c:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e005      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c28:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c34:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	e004      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d133      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0xa4>
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d003      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0xaa>
 8001c7a:	e005      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7e:	617b      	str	r3, [r7, #20]
      break;
 8001c80:	e005      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c84:	617b      	str	r3, [r7, #20]
      break;
 8001c86:	e002      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	617b      	str	r3, [r7, #20]
      break;
 8001c8c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	3301      	adds	r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	fb02 f203 	mul.w	r2, r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0e5b      	lsrs	r3, r3, #25
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cce:	69bb      	ldr	r3, [r7, #24]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3724      	adds	r7, #36	; 0x24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08003dbc 	.word	0x08003dbc
 8001ce4:	00f42400 	.word	0x00f42400
 8001ce8:	007a1200 	.word	0x007a1200

08001cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000000 	.word	0x20000000

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d08:	f7ff fff0 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003db4 	.word	0x08003db4

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d34:	f7ff ffda 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0adb      	lsrs	r3, r3, #11
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08003db4 	.word	0x08003db4

08001d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d74:	f7ff fa04 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001d78:	6178      	str	r0, [r7, #20]
 8001d7a:	e014      	b.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d94:	f7ff f9f4 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dac:	d10b      	bne.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d919      	bls.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2ba0      	cmp	r3, #160	; 0xa0
 8001db8:	d902      	bls.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dba:	2302      	movs	r3, #2
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e013      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e010      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d902      	bls.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dcc:	2303      	movs	r3, #3
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e00a      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d102      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd8:	2302      	movs	r3, #2
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e004      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b70      	cmp	r3, #112	; 0x70
 8001de2:	d101      	bne.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 0207 	bic.w	r2, r3, #7
 8001df0:	4909      	ldr	r1, [pc, #36]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e24:	2300      	movs	r3, #0
 8001e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e28:	2300      	movs	r3, #0
 8001e2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03f      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e40:	d01c      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e46:	d802      	bhi.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001e4c:	e01f      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e52:	d003      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e58:	d01c      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e5c:	4b85      	ldr	r3, [pc, #532]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a84      	ldr	r2, [pc, #528]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e68:	e015      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fab9 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 8001e76:	4603      	mov	r3, r0
 8001e78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e7a:	e00c      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3320      	adds	r3, #32
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fba0 	bl	80025c8 <RCCEx_PLLSAI2_Config>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e8c:	e003      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	74fb      	strb	r3, [r7, #19]
      break;
 8001e92:	e000      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e96:	7cfb      	ldrb	r3, [r7, #19]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e9c:	4b75      	ldr	r3, [pc, #468]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eaa:	4972      	ldr	r1, [pc, #456]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eb2:	e001      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03f      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed2:	d802      	bhi.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00e      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001ed8:	e01f      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ede:	d003      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001ee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ee4:	d01c      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001ee6:	e018      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ee8:	4b62      	ldr	r3, [pc, #392]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a61      	ldr	r2, [pc, #388]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef4:	e015      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fa73 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 8001f02:	4603      	mov	r3, r0
 8001f04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f06:	e00c      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3320      	adds	r3, #32
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fb5a 	bl	80025c8 <RCCEx_PLLSAI2_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f18:	e003      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f1e:	e000      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f22:	7cfb      	ldrb	r3, [r7, #19]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f28:	4b52      	ldr	r3, [pc, #328]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f36:	494f      	ldr	r1, [pc, #316]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f3e:	e001      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a0 	beq.w	8002092 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	4a40      	ldr	r2, [pc, #256]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f76:	6593      	str	r3, [r2, #88]	; 0x58
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fe38 	bl	8000c08 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f9a:	e009      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9c:	f7fe fe34 	bl	8000c08 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d902      	bls.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	74fb      	strb	r3, [r7, #19]
        break;
 8001fae:	e005      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ef      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d15c      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01f      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d019      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	4a20      	ldr	r2, [pc, #128]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe fdf3 	bl	8000c08 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002024:	e00b      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fdef 	bl	8000c08 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d902      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	74fb      	strb	r3, [r7, #19]
            break;
 800203c:	e006      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ec      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002062:	4904      	ldr	r1, [pc, #16]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800206a:	e009      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
 8002070:	e006      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002080:	7c7b      	ldrb	r3, [r7, #17]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b9e      	ldr	r3, [pc, #632]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a9d      	ldr	r2, [pc, #628]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209e:	4b98      	ldr	r3, [pc, #608]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f023 0203 	bic.w	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	4994      	ldr	r1, [pc, #592]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c0:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 020c 	bic.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	498c      	ldr	r1, [pc, #560]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020e2:	4b87      	ldr	r3, [pc, #540]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4983      	ldr	r1, [pc, #524]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002104:	4b7e      	ldr	r3, [pc, #504]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	497b      	ldr	r1, [pc, #492]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002126:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	4972      	ldr	r1, [pc, #456]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002148:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	496a      	ldr	r1, [pc, #424]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	4961      	ldr	r1, [pc, #388]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800218c:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	4959      	ldr	r1, [pc, #356]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021bc:	4950      	ldr	r1, [pc, #320]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021d0:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	4948      	ldr	r1, [pc, #288]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f2:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	493f      	ldr	r1, [pc, #252]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d028      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002214:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002222:	4937      	ldr	r1, [pc, #220]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002232:	d106      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
 8002240:	e011      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800224a:	d10c      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	2101      	movs	r1, #1
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f8c8 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d028      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	491f      	ldr	r1, [pc, #124]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002290:	d106      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229c:	60d3      	str	r3, [r2, #12]
 800229e:	e011      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f899 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02b      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ee:	d109      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a02      	ldr	r2, [pc, #8]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
 80022fc:	e014      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800230c:	d10c      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f867 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 800231a:	4603      	mov	r3, r0
 800231c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d02f      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002342:	4928      	ldr	r1, [pc, #160]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800234e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002352:	d10d      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f844 	bl	80023e8 <RCCEx_PLLSAI1_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d014      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	74bb      	strb	r3, [r7, #18]
 800236e:	e011      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002378:	d10c      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3320      	adds	r3, #32
 800237e:	2102      	movs	r1, #2
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f921 	bl	80025c8 <RCCEx_PLLSAI2_Config>
 8002386:	4603      	mov	r3, r0
 8002388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023a0:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ae:	490d      	ldr	r1, [pc, #52]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d2:	4904      	ldr	r1, [pc, #16]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023da:	7cbb      	ldrb	r3, [r7, #18]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000

080023e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d018      	beq.n	8002434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002402:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0203 	and.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d10d      	bne.n	800242e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
       ||
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800241a:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
       ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d044      	beq.n	80024b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e041      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d00c      	beq.n	8002456 <RCCEx_PLLSAI1_Config+0x6e>
 800243c:	2b03      	cmp	r3, #3
 800243e:	d013      	beq.n	8002468 <RCCEx_PLLSAI1_Config+0x80>
 8002440:	2b01      	cmp	r3, #1
 8002442:	d120      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d11d      	bne.n	800248c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002454:	e01a      	b.n	800248c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002456:	4b5b      	ldr	r3, [pc, #364]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002466:	e013      	b.n	8002490 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002468:	4b56      	ldr	r3, [pc, #344]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10f      	bne.n	8002494 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002484:	e006      	b.n	8002494 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      break;
 800248a:	e004      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800248c:	bf00      	nop
 800248e:	e002      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002490:	bf00      	nop
 8002492:	e000      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002494:	bf00      	nop
    }

    if(status == HAL_OK)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800249c:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	430b      	orrs	r3, r1
 80024b2:	4944      	ldr	r1, [pc, #272]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d17d      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a40      	ldr	r2, [pc, #256]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ca:	f7fe fb9d 	bl	8000c08 <HAL_GetTick>
 80024ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d0:	e009      	b.n	80024e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d2:	f7fe fb99 	bl	8000c08 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d902      	bls.n	80024e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	73fb      	strb	r3, [r7, #15]
        break;
 80024e4:	e005      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1ef      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d160      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d111      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	0211      	lsls	r1, r2, #8
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68d2      	ldr	r2, [r2, #12]
 8002514:	0912      	lsrs	r2, r2, #4
 8002516:	0452      	lsls	r2, r2, #17
 8002518:	430a      	orrs	r2, r1
 800251a:	492a      	ldr	r1, [pc, #168]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800251c:	4313      	orrs	r3, r2
 800251e:	610b      	str	r3, [r1, #16]
 8002520:	e027      	b.n	8002572 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d112      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002528:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002530:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6892      	ldr	r2, [r2, #8]
 8002538:	0211      	lsls	r1, r2, #8
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6912      	ldr	r2, [r2, #16]
 800253e:	0852      	lsrs	r2, r2, #1
 8002540:	3a01      	subs	r2, #1
 8002542:	0552      	lsls	r2, r2, #21
 8002544:	430a      	orrs	r2, r1
 8002546:	491f      	ldr	r1, [pc, #124]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
 800254c:	e011      	b.n	8002572 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002556:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	0211      	lsls	r1, r2, #8
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6952      	ldr	r2, [r2, #20]
 8002564:	0852      	lsrs	r2, r2, #1
 8002566:	3a01      	subs	r2, #1
 8002568:	0652      	lsls	r2, r2, #25
 800256a:	430a      	orrs	r2, r1
 800256c:	4915      	ldr	r1, [pc, #84]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800257c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fb43 	bl	8000c08 <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002584:	e009      	b.n	800259a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002586:	f7fe fb3f 	bl	8000c08 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d902      	bls.n	800259a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	73fb      	strb	r3, [r7, #15]
          break;
 8002598:	e005      	b.n	80025a6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ef      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000

080025c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10d      	bne.n	800260e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
       ||
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
       ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d044      	beq.n	8002698 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e041      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d00c      	beq.n	8002636 <RCCEx_PLLSAI2_Config+0x6e>
 800261c:	2b03      	cmp	r3, #3
 800261e:	d013      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x80>
 8002620:	2b01      	cmp	r3, #1
 8002622:	d120      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002624:	4b54      	ldr	r3, [pc, #336]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11d      	bne.n	800266c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e01a      	b.n	800266c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002636:	4b50      	ldr	r3, [pc, #320]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002646:	e013      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10f      	bne.n	8002674 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002654:	4b48      	ldr	r3, [pc, #288]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002664:	e006      	b.n	8002674 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      break;
 800266a:	e004      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800266c:	bf00      	nop
 800266e:	e002      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002670:	bf00      	nop
 8002672:	e000      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002674:	bf00      	nop
    }

    if(status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800267c:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	3b01      	subs	r3, #1
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	430b      	orrs	r3, r1
 8002692:	4939      	ldr	r1, [pc, #228]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d167      	bne.n	800276e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a35      	ldr	r2, [pc, #212]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026aa:	f7fe faad 	bl	8000c08 <HAL_GetTick>
 80026ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026b0:	e009      	b.n	80026c6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026b2:	f7fe faa9 	bl	8000c08 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d902      	bls.n	80026c6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	73fb      	strb	r3, [r7, #15]
        break;
 80026c4:	e005      	b.n	80026d2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ef      	bne.n	80026b2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d14a      	bne.n	800276e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d111      	bne.n	8002702 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6892      	ldr	r2, [r2, #8]
 80026ee:	0211      	lsls	r1, r2, #8
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68d2      	ldr	r2, [r2, #12]
 80026f4:	0912      	lsrs	r2, r2, #4
 80026f6:	0452      	lsls	r2, r2, #17
 80026f8:	430a      	orrs	r2, r1
 80026fa:	491f      	ldr	r1, [pc, #124]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	614b      	str	r3, [r1, #20]
 8002700:	e011      	b.n	8002726 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800270a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6892      	ldr	r2, [r2, #8]
 8002712:	0211      	lsls	r1, r2, #8
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6912      	ldr	r2, [r2, #16]
 8002718:	0852      	lsrs	r2, r2, #1
 800271a:	3a01      	subs	r2, #1
 800271c:	0652      	lsls	r2, r2, #25
 800271e:	430a      	orrs	r2, r1
 8002720:	4915      	ldr	r1, [pc, #84]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe fa69 	bl	8000c08 <HAL_GetTick>
 8002736:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002738:	e009      	b.n	800274e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800273a:	f7fe fa65 	bl	8000c08 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d902      	bls.n	800274e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	73fb      	strb	r3, [r7, #15]
          break;
 800274c:	e005      	b.n	800275a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ef      	beq.n	800273a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <RCCEx_PLLSAI2_Config+0x1b0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000

0800277c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e01d      	b.n	80027ca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe f8a6 	bl	80008f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f000 f97a 	bl	8002ab4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fcd4 	bl	8003194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_TIM_PWM_Start+0x98>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_TIM_PWM_Start+0x4a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_TIM_PWM_Start+0x9c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_TIM_PWM_Start+0x4a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <HAL_TIM_PWM_Start+0xa0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_TIM_PWM_Start+0x4a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_TIM_PWM_Start+0xa4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_TIM_PWM_Start+0x4a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a18      	ldr	r2, [pc, #96]	; (800287c <HAL_TIM_PWM_Start+0xa8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_TIM_PWM_Start+0x4e>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_TIM_PWM_Start+0x50>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_TIM_PWM_Start+0xac>)
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b06      	cmp	r3, #6
 8002848:	d00b      	beq.n	8002862 <HAL_TIM_PWM_Start+0x8e>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d007      	beq.n	8002862 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40013400 	.word	0x40013400
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800
 8002880:	00010007 	.word	0x00010007

08002884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800289a:	2302      	movs	r3, #2
 800289c:	e105      	b.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x226>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b14      	cmp	r3, #20
 80028b2:	f200 80f0 	bhi.w	8002a96 <HAL_TIM_PWM_ConfigChannel+0x212>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	08002911 	.word	0x08002911
 80028c0:	08002a97 	.word	0x08002a97
 80028c4:	08002a97 	.word	0x08002a97
 80028c8:	08002a97 	.word	0x08002a97
 80028cc:	08002951 	.word	0x08002951
 80028d0:	08002a97 	.word	0x08002a97
 80028d4:	08002a97 	.word	0x08002a97
 80028d8:	08002a97 	.word	0x08002a97
 80028dc:	08002993 	.word	0x08002993
 80028e0:	08002a97 	.word	0x08002a97
 80028e4:	08002a97 	.word	0x08002a97
 80028e8:	08002a97 	.word	0x08002a97
 80028ec:	080029d3 	.word	0x080029d3
 80028f0:	08002a97 	.word	0x08002a97
 80028f4:	08002a97 	.word	0x08002a97
 80028f8:	08002a97 	.word	0x08002a97
 80028fc:	08002a15 	.word	0x08002a15
 8002900:	08002a97 	.word	0x08002a97
 8002904:	08002a97 	.word	0x08002a97
 8002908:	08002a97 	.word	0x08002a97
 800290c:	08002a55 	.word	0x08002a55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f966 	bl	8002be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0208 	orr.w	r2, r2, #8
 800292a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0204 	bic.w	r2, r2, #4
 800293a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	619a      	str	r2, [r3, #24]
      break;
 800294e:	e0a3      	b.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f9d6 	bl	8002d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6999      	ldr	r1, [r3, #24]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	021a      	lsls	r2, r3, #8
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	619a      	str	r2, [r3, #24]
      break;
 8002990:	e082      	b.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fa3f 	bl	8002e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0208 	orr.w	r2, r2, #8
 80029ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0204 	bic.w	r2, r2, #4
 80029bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69d9      	ldr	r1, [r3, #28]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	61da      	str	r2, [r3, #28]
      break;
 80029d0:	e062      	b.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 faa7 	bl	8002f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69d9      	ldr	r1, [r3, #28]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	021a      	lsls	r2, r3, #8
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	61da      	str	r2, [r3, #28]
      break;
 8002a12:	e041      	b.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 faf0 	bl	8003000 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a52:	e021      	b.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fb34 	bl	80030c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a94:	e000      	b.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002a96:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a40      	ldr	r2, [pc, #256]	; (8002bc8 <TIM_Base_SetConfig+0x114>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad2:	d00f      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3d      	ldr	r2, [pc, #244]	; (8002bcc <TIM_Base_SetConfig+0x118>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00b      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <TIM_Base_SetConfig+0x11c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	; (8002bd4 <TIM_Base_SetConfig+0x120>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <TIM_Base_SetConfig+0x124>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d108      	bne.n	8002b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <TIM_Base_SetConfig+0x114>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01f      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d01b      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <TIM_Base_SetConfig+0x118>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d017      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <TIM_Base_SetConfig+0x11c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <TIM_Base_SetConfig+0x120>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00f      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <TIM_Base_SetConfig+0x124>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <TIM_Base_SetConfig+0x128>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <TIM_Base_SetConfig+0x12c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a26      	ldr	r2, [pc, #152]	; (8002be4 <TIM_Base_SetConfig+0x130>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <TIM_Base_SetConfig+0x114>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00f      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <TIM_Base_SetConfig+0x124>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00b      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <TIM_Base_SetConfig+0x128>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <TIM_Base_SetConfig+0x12c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <TIM_Base_SetConfig+0x130>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	615a      	str	r2, [r3, #20]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40013400 	.word	0x40013400
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40014400 	.word	0x40014400
 8002be4:	40014800 	.word	0x40014800

08002be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0201 	bic.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0302 	bic.w	r3, r3, #2
 8002c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <TIM_OC1_SetConfig+0x10c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00f      	beq.n	8002c68 <TIM_OC1_SetConfig+0x80>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a2b      	ldr	r2, [pc, #172]	; (8002cf8 <TIM_OC1_SetConfig+0x110>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <TIM_OC1_SetConfig+0x80>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <TIM_OC1_SetConfig+0x114>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_OC1_SetConfig+0x80>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <TIM_OC1_SetConfig+0x118>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_OC1_SetConfig+0x80>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <TIM_OC1_SetConfig+0x11c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10c      	bne.n	8002c82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f023 0308 	bic.w	r3, r3, #8
 8002c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <TIM_OC1_SetConfig+0x10c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00f      	beq.n	8002caa <TIM_OC1_SetConfig+0xc2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <TIM_OC1_SetConfig+0x110>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00b      	beq.n	8002caa <TIM_OC1_SetConfig+0xc2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <TIM_OC1_SetConfig+0x114>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <TIM_OC1_SetConfig+0xc2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <TIM_OC1_SetConfig+0x118>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_OC1_SetConfig+0xc2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <TIM_OC1_SetConfig+0x11c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40013400 	.word	0x40013400
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40014400 	.word	0x40014400
 8002d04:	40014800 	.word	0x40014800

08002d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0210 	bic.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0320 	bic.w	r3, r3, #32
 8002d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <TIM_OC2_SetConfig+0x100>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_OC2_SetConfig+0x6c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <TIM_OC2_SetConfig+0x104>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10d      	bne.n	8002d90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <TIM_OC2_SetConfig+0x100>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00f      	beq.n	8002db8 <TIM_OC2_SetConfig+0xb0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <TIM_OC2_SetConfig+0x104>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <TIM_OC2_SetConfig+0xb0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <TIM_OC2_SetConfig+0x108>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_OC2_SetConfig+0xb0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <TIM_OC2_SetConfig+0x10c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_OC2_SetConfig+0xb0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <TIM_OC2_SetConfig+0x110>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d113      	bne.n	8002de0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40013400 	.word	0x40013400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800

08002e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0303 	bic.w	r3, r3, #3
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <TIM_OC3_SetConfig+0xfc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_OC3_SetConfig+0x6a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <TIM_OC3_SetConfig+0x100>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10d      	bne.n	8002ea2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <TIM_OC3_SetConfig+0xfc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00f      	beq.n	8002eca <TIM_OC3_SetConfig+0xae>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <TIM_OC3_SetConfig+0x100>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <TIM_OC3_SetConfig+0xae>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <TIM_OC3_SetConfig+0x104>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <TIM_OC3_SetConfig+0xae>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <TIM_OC3_SetConfig+0x108>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_OC3_SetConfig+0xae>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <TIM_OC3_SetConfig+0x10c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d113      	bne.n	8002ef2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40013400 	.word	0x40013400
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800

08002f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	031b      	lsls	r3, r3, #12
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <TIM_OC4_SetConfig+0xc0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00f      	beq.n	8002fb0 <TIM_OC4_SetConfig+0x84>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <TIM_OC4_SetConfig+0xc4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <TIM_OC4_SetConfig+0x84>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <TIM_OC4_SetConfig+0xc8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <TIM_OC4_SetConfig+0x84>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <TIM_OC4_SetConfig+0xcc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_OC4_SetConfig+0x84>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <TIM_OC4_SetConfig+0xd0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d109      	bne.n	8002fc4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40013400 	.word	0x40013400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800

08003000 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003044:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <TIM_OC5_SetConfig+0xb4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <TIM_OC5_SetConfig+0x7a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <TIM_OC5_SetConfig+0xb8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <TIM_OC5_SetConfig+0x7a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a15      	ldr	r2, [pc, #84]	; (80030bc <TIM_OC5_SetConfig+0xbc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_OC5_SetConfig+0x7a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <TIM_OC5_SetConfig+0xc0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_OC5_SetConfig+0x7a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <TIM_OC5_SetConfig+0xc4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d109      	bne.n	800308e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40013400 	.word	0x40013400
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014400 	.word	0x40014400
 80030c4:	40014800 	.word	0x40014800

080030c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800310e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	051b      	lsls	r3, r3, #20
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <TIM_OC6_SetConfig+0xb8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00f      	beq.n	8003144 <TIM_OC6_SetConfig+0x7c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a17      	ldr	r2, [pc, #92]	; (8003184 <TIM_OC6_SetConfig+0xbc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_OC6_SetConfig+0x7c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <TIM_OC6_SetConfig+0xc0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d007      	beq.n	8003144 <TIM_OC6_SetConfig+0x7c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <TIM_OC6_SetConfig+0xc4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_OC6_SetConfig+0x7c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a14      	ldr	r2, [pc, #80]	; (8003190 <TIM_OC6_SetConfig+0xc8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d109      	bne.n	8003158 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40013400 	.word	0x40013400
 8003188:	40014000 	.word	0x40014000
 800318c:	40014400 	.word	0x40014400
 8003190:	40014800 	.word	0x40014800

08003194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2201      	movs	r2, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e068      	b.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2e      	ldr	r2, [pc, #184]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2d      	ldr	r2, [pc, #180]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d018      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10c      	bne.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40013400 	.word	0x40013400
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40014000 	.word	0x40014000

080032f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e040      	b.n	8003384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fb42 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f82c 	bl	800338c <UART_SetConfig>
 8003334:	4603      	mov	r3, r0
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e022      	b.n	8003384 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fb92 	bl	8003a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800335a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800336a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fc19 	bl	8003bb4 <UART_CheckIdleState>
 8003382:	4603      	mov	r3, r0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003390:	b08a      	sub	sp, #40	; 0x28
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4bb8      	ldr	r3, [pc, #736]	; (80036a4 <UART_SetConfig+0x318>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4aae      	ldr	r2, [pc, #696]	; (80036a8 <UART_SetConfig+0x31c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	4313      	orrs	r3, r2
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4aa5      	ldr	r2, [pc, #660]	; (80036ac <UART_SetConfig+0x320>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d126      	bne.n	800346a <UART_SetConfig+0xde>
 800341c:	4ba4      	ldr	r3, [pc, #656]	; (80036b0 <UART_SetConfig+0x324>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b03      	cmp	r3, #3
 8003428:	d81a      	bhi.n	8003460 <UART_SetConfig+0xd4>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0xa4>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003441 	.word	0x08003441
 8003434:	08003451 	.word	0x08003451
 8003438:	08003449 	.word	0x08003449
 800343c:	08003459 	.word	0x08003459
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003446:	e105      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003448:	2302      	movs	r3, #2
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344e:	e101      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003450:	2304      	movs	r3, #4
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003456:	e0fd      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003458:	2308      	movs	r3, #8
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345e:	e0f9      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003460:	2310      	movs	r3, #16
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003466:	bf00      	nop
 8003468:	e0f4      	b.n	8003654 <UART_SetConfig+0x2c8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a91      	ldr	r2, [pc, #580]	; (80036b4 <UART_SetConfig+0x328>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d138      	bne.n	80034e6 <UART_SetConfig+0x15a>
 8003474:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <UART_SetConfig+0x324>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d82c      	bhi.n	80034dc <UART_SetConfig+0x150>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0xfc>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034dd 	.word	0x080034dd
 8003494:	080034dd 	.word	0x080034dd
 8003498:	080034cd 	.word	0x080034cd
 800349c:	080034dd 	.word	0x080034dd
 80034a0:	080034dd 	.word	0x080034dd
 80034a4:	080034dd 	.word	0x080034dd
 80034a8:	080034c5 	.word	0x080034c5
 80034ac:	080034dd 	.word	0x080034dd
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034d5 	.word	0x080034d5
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e0c7      	b.n	8003654 <UART_SetConfig+0x2c8>
 80034c4:	2302      	movs	r3, #2
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e0c3      	b.n	8003654 <UART_SetConfig+0x2c8>
 80034cc:	2304      	movs	r3, #4
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e0bf      	b.n	8003654 <UART_SetConfig+0x2c8>
 80034d4:	2308      	movs	r3, #8
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034da:	e0bb      	b.n	8003654 <UART_SetConfig+0x2c8>
 80034dc:	2310      	movs	r3, #16
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e2:	bf00      	nop
 80034e4:	e0b6      	b.n	8003654 <UART_SetConfig+0x2c8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a73      	ldr	r2, [pc, #460]	; (80036b8 <UART_SetConfig+0x32c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d125      	bne.n	800353c <UART_SetConfig+0x1b0>
 80034f0:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <UART_SetConfig+0x324>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d011      	beq.n	8003522 <UART_SetConfig+0x196>
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d802      	bhi.n	8003508 <UART_SetConfig+0x17c>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <UART_SetConfig+0x186>
 8003506:	e014      	b.n	8003532 <UART_SetConfig+0x1a6>
 8003508:	2b20      	cmp	r3, #32
 800350a:	d006      	beq.n	800351a <UART_SetConfig+0x18e>
 800350c:	2b30      	cmp	r3, #48	; 0x30
 800350e:	d00c      	beq.n	800352a <UART_SetConfig+0x19e>
 8003510:	e00f      	b.n	8003532 <UART_SetConfig+0x1a6>
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003518:	e09c      	b.n	8003654 <UART_SetConfig+0x2c8>
 800351a:	2302      	movs	r3, #2
 800351c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003520:	e098      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003522:	2304      	movs	r3, #4
 8003524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003528:	e094      	b.n	8003654 <UART_SetConfig+0x2c8>
 800352a:	2308      	movs	r3, #8
 800352c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003530:	e090      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003532:	2310      	movs	r3, #16
 8003534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003538:	bf00      	nop
 800353a:	e08b      	b.n	8003654 <UART_SetConfig+0x2c8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <UART_SetConfig+0x330>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d125      	bne.n	8003592 <UART_SetConfig+0x206>
 8003546:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <UART_SetConfig+0x324>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d011      	beq.n	8003578 <UART_SetConfig+0x1ec>
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d802      	bhi.n	800355e <UART_SetConfig+0x1d2>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <UART_SetConfig+0x1dc>
 800355c:	e014      	b.n	8003588 <UART_SetConfig+0x1fc>
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d006      	beq.n	8003570 <UART_SetConfig+0x1e4>
 8003562:	2bc0      	cmp	r3, #192	; 0xc0
 8003564:	d00c      	beq.n	8003580 <UART_SetConfig+0x1f4>
 8003566:	e00f      	b.n	8003588 <UART_SetConfig+0x1fc>
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e071      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e06d      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e069      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e065      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	bf00      	nop
 8003590:	e060      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <UART_SetConfig+0x334>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d129      	bne.n	80035f0 <UART_SetConfig+0x264>
 800359c:	4b44      	ldr	r3, [pc, #272]	; (80036b0 <UART_SetConfig+0x324>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035aa:	d014      	beq.n	80035d6 <UART_SetConfig+0x24a>
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b0:	d802      	bhi.n	80035b8 <UART_SetConfig+0x22c>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <UART_SetConfig+0x23a>
 80035b6:	e016      	b.n	80035e6 <UART_SetConfig+0x25a>
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d007      	beq.n	80035ce <UART_SetConfig+0x242>
 80035be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c2:	d00c      	beq.n	80035de <UART_SetConfig+0x252>
 80035c4:	e00f      	b.n	80035e6 <UART_SetConfig+0x25a>
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035cc:	e042      	b.n	8003654 <UART_SetConfig+0x2c8>
 80035ce:	2302      	movs	r3, #2
 80035d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d4:	e03e      	b.n	8003654 <UART_SetConfig+0x2c8>
 80035d6:	2304      	movs	r3, #4
 80035d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035dc:	e03a      	b.n	8003654 <UART_SetConfig+0x2c8>
 80035de:	2308      	movs	r3, #8
 80035e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e4:	e036      	b.n	8003654 <UART_SetConfig+0x2c8>
 80035e6:	2310      	movs	r3, #16
 80035e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ec:	bf00      	nop
 80035ee:	e031      	b.n	8003654 <UART_SetConfig+0x2c8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <UART_SetConfig+0x31c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d129      	bne.n	800364e <UART_SetConfig+0x2c2>
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <UART_SetConfig+0x324>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d014      	beq.n	8003634 <UART_SetConfig+0x2a8>
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d802      	bhi.n	8003616 <UART_SetConfig+0x28a>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <UART_SetConfig+0x298>
 8003614:	e016      	b.n	8003644 <UART_SetConfig+0x2b8>
 8003616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361a:	d007      	beq.n	800362c <UART_SetConfig+0x2a0>
 800361c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003620:	d00c      	beq.n	800363c <UART_SetConfig+0x2b0>
 8003622:	e00f      	b.n	8003644 <UART_SetConfig+0x2b8>
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e013      	b.n	8003654 <UART_SetConfig+0x2c8>
 800362c:	2302      	movs	r3, #2
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e00f      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003634:	2304      	movs	r3, #4
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e00b      	b.n	8003654 <UART_SetConfig+0x2c8>
 800363c:	2308      	movs	r3, #8
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e007      	b.n	8003654 <UART_SetConfig+0x2c8>
 8003644:	2310      	movs	r3, #16
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364a:	bf00      	nop
 800364c:	e002      	b.n	8003654 <UART_SetConfig+0x2c8>
 800364e:	2310      	movs	r3, #16
 8003650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <UART_SetConfig+0x31c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	f040 80fe 	bne.w	800385c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003664:	2b08      	cmp	r3, #8
 8003666:	d837      	bhi.n	80036d8 <UART_SetConfig+0x34c>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x2e4>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003695 	.word	0x08003695
 8003674:	080036d9 	.word	0x080036d9
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036d9 	.word	0x080036d9
 8003680:	080036c9 	.word	0x080036c9
 8003684:	080036d9 	.word	0x080036d9
 8003688:	080036d9 	.word	0x080036d9
 800368c:	080036d9 	.word	0x080036d9
 8003690:	080036d1 	.word	0x080036d1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003694:	f7fe fb36 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8003698:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800369a:	e020      	b.n	80036de <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <UART_SetConfig+0x338>)
 800369e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036a0:	e01d      	b.n	80036de <UART_SetConfig+0x352>
 80036a2:	bf00      	nop
 80036a4:	efff69f3 	.word	0xefff69f3
 80036a8:	40008000 	.word	0x40008000
 80036ac:	40013800 	.word	0x40013800
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40004400 	.word	0x40004400
 80036b8:	40004800 	.word	0x40004800
 80036bc:	40004c00 	.word	0x40004c00
 80036c0:	40005000 	.word	0x40005000
 80036c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80036c8:	f7fe fa86 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80036cc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036ce:	e006      	b.n	80036de <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80036d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036d6:	e002      	b.n	80036de <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	76fb      	strb	r3, [r7, #27]
        break;
 80036dc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 81b9 	beq.w	8003a58 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d305      	bcc.n	8003702 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d902      	bls.n	8003708 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	76fb      	strb	r3, [r7, #27]
 8003706:	e1a7      	b.n	8003a58 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8003708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800370c:	2b08      	cmp	r3, #8
 800370e:	f200 8092 	bhi.w	8003836 <UART_SetConfig+0x4aa>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <UART_SetConfig+0x38c>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	0800373d 	.word	0x0800373d
 800371c:	08003837 	.word	0x08003837
 8003720:	0800378b 	.word	0x0800378b
 8003724:	08003837 	.word	0x08003837
 8003728:	080037bf 	.word	0x080037bf
 800372c:	08003837 	.word	0x08003837
 8003730:	08003837 	.word	0x08003837
 8003734:	08003837 	.word	0x08003837
 8003738:	0800380d 	.word	0x0800380d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800373c:	f7fe fae2 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8003740:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4619      	mov	r1, r3
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	f04f 0400 	mov.w	r4, #0
 8003752:	0214      	lsls	r4, r2, #8
 8003754:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003758:	020b      	lsls	r3, r1, #8
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6852      	ldr	r2, [r2, #4]
 800375e:	0852      	lsrs	r2, r2, #1
 8003760:	4611      	mov	r1, r2
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	eb13 0b01 	adds.w	fp, r3, r1
 800376a:	eb44 0c02 	adc.w	ip, r4, r2
 800376e:	4658      	mov	r0, fp
 8003770:	4661      	mov	r1, ip
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f04f 0400 	mov.w	r4, #0
 800377a:	461a      	mov	r2, r3
 800377c:	4623      	mov	r3, r4
 800377e:	f7fc fd23 	bl	80001c8 <__aeabi_uldivmod>
 8003782:	4603      	mov	r3, r0
 8003784:	460c      	mov	r4, r1
 8003786:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003788:	e058      	b.n	800383c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	49ae      	ldr	r1, [pc, #696]	; (8003a50 <UART_SetConfig+0x6c4>)
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	eb13 0b01 	adds.w	fp, r3, r1
 800379e:	eb44 0c02 	adc.w	ip, r4, r2
 80037a2:	4658      	mov	r0, fp
 80037a4:	4661      	mov	r1, ip
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f04f 0400 	mov.w	r4, #0
 80037ae:	461a      	mov	r2, r3
 80037b0:	4623      	mov	r3, r4
 80037b2:	f7fc fd09 	bl	80001c8 <__aeabi_uldivmod>
 80037b6:	4603      	mov	r3, r0
 80037b8:	460c      	mov	r4, r1
 80037ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80037bc:	e03e      	b.n	800383c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80037be:	f7fe fa0b 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80037c2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4619      	mov	r1, r3
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	f04f 0400 	mov.w	r4, #0
 80037d4:	0214      	lsls	r4, r2, #8
 80037d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80037da:	020b      	lsls	r3, r1, #8
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6852      	ldr	r2, [r2, #4]
 80037e0:	0852      	lsrs	r2, r2, #1
 80037e2:	4611      	mov	r1, r2
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	eb13 0b01 	adds.w	fp, r3, r1
 80037ec:	eb44 0c02 	adc.w	ip, r4, r2
 80037f0:	4658      	mov	r0, fp
 80037f2:	4661      	mov	r1, ip
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	461a      	mov	r2, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	f7fc fce2 	bl	80001c8 <__aeabi_uldivmod>
 8003804:	4603      	mov	r3, r0
 8003806:	460c      	mov	r4, r1
 8003808:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800380a:	e017      	b.n	800383c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	f04f 0400 	mov.w	r4, #0
 8003816:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800381a:	f144 0100 	adc.w	r1, r4, #0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f04f 0400 	mov.w	r4, #0
 8003826:	461a      	mov	r2, r3
 8003828:	4623      	mov	r3, r4
 800382a:	f7fc fccd 	bl	80001c8 <__aeabi_uldivmod>
 800382e:	4603      	mov	r3, r0
 8003830:	460c      	mov	r4, r1
 8003832:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003834:	e002      	b.n	800383c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	76fb      	strb	r3, [r7, #27]
            break;
 800383a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003842:	d308      	bcc.n	8003856 <UART_SetConfig+0x4ca>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384a:	d204      	bcs.n	8003856 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e100      	b.n	8003a58 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	76fb      	strb	r3, [r7, #27]
 800385a:	e0fd      	b.n	8003a58 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	f040 8084 	bne.w	8003970 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800386c:	2b08      	cmp	r3, #8
 800386e:	d85f      	bhi.n	8003930 <UART_SetConfig+0x5a4>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x4ec>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038bd 	.word	0x080038bd
 8003880:	080038dd 	.word	0x080038dd
 8003884:	08003931 	.word	0x08003931
 8003888:	080038f9 	.word	0x080038f9
 800388c:	08003931 	.word	0x08003931
 8003890:	08003931 	.word	0x08003931
 8003894:	08003931 	.word	0x08003931
 8003898:	08003919 	.word	0x08003919
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fa32 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 80038a0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	005a      	lsls	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038ba:	e03c      	b.n	8003936 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038bc:	f7fe fa38 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 80038c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	005a      	lsls	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038da:	e02c      	b.n	8003936 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80038e6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6852      	ldr	r2, [r2, #4]
 80038ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038f6:	e01e      	b.n	8003936 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f8:	f7fe f96e 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80038fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	005a      	lsls	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	b29b      	uxth	r3, r3
 8003914:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003916:	e00e      	b.n	8003936 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	b29b      	uxth	r3, r3
 800392c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800392e:	e002      	b.n	8003936 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	76fb      	strb	r3, [r7, #27]
        break;
 8003934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b0f      	cmp	r3, #15
 800393a:	d916      	bls.n	800396a <UART_SetConfig+0x5de>
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	d212      	bcs.n	800396a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f023 030f 	bic.w	r3, r3, #15
 800394c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	b29b      	uxth	r3, r3
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	b29a      	uxth	r2, r3
 800395a:	89fb      	ldrh	r3, [r7, #14]
 800395c:	4313      	orrs	r3, r2
 800395e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	89fa      	ldrh	r2, [r7, #14]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e076      	b.n	8003a58 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	76fb      	strb	r3, [r7, #27]
 800396e:	e073      	b.n	8003a58 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003974:	2b08      	cmp	r3, #8
 8003976:	d85c      	bhi.n	8003a32 <UART_SetConfig+0x6a6>
 8003978:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <UART_SetConfig+0x5f4>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039c3 	.word	0x080039c3
 8003988:	080039e1 	.word	0x080039e1
 800398c:	08003a33 	.word	0x08003a33
 8003990:	080039fd 	.word	0x080039fd
 8003994:	08003a33 	.word	0x08003a33
 8003998:	08003a33 	.word	0x08003a33
 800399c:	08003a33 	.word	0x08003a33
 80039a0:	08003a1b 	.word	0x08003a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a4:	f7fe f9ae 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 80039a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	085a      	lsrs	r2, r3, #1
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	b29b      	uxth	r3, r3
 80039be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039c0:	e03a      	b.n	8003a38 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c2:	f7fe f9b5 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 80039c6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	085a      	lsrs	r2, r3, #1
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	441a      	add	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039de:	e02b      	b.n	8003a38 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80039ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6852      	ldr	r2, [r2, #4]
 80039f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039fa:	e01d      	b.n	8003a38 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fc:	f7fe f8ec 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8003a00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	085a      	lsrs	r2, r3, #1
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a18:	e00e      	b.n	8003a38 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a30:	e002      	b.n	8003a38 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	76fb      	strb	r3, [r7, #27]
        break;
 8003a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d90a      	bls.n	8003a54 <UART_SetConfig+0x6c8>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d206      	bcs.n	8003a54 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	e003      	b.n	8003a58 <UART_SetConfig+0x6cc>
 8003a50:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a64:	7efb      	ldrb	r3, [r7, #27]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3728      	adds	r7, #40	; 0x28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01a      	beq.n	8003b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6e:	d10a      	bne.n	8003b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003bc2:	f7fd f821 	bl	8000c08 <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d10e      	bne.n	8003bf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f82a 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e020      	b.n	8003c36 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d10e      	bne.n	8003c20 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f814 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e00a      	b.n	8003c36 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4e:	e05d      	b.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d059      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fc ffd6 	bl	8000c08 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d11b      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e042      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d02b      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc2:	d123      	bne.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ccc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cdc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e00f      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d092      	beq.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4e0d      	ldr	r6, [pc, #52]	; (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1ba4      	subs	r4, r4, r6
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2500      	movs	r5, #0
 8003d40:	42a5      	cmp	r5, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4e0b      	ldr	r6, [pc, #44]	; (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 f820 	bl	8003d8c <_init>
 8003d4c:	1ba4      	subs	r4, r4, r6
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2500      	movs	r5, #0
 8003d52:	42a5      	cmp	r5, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d5c:	4798      	blx	r3
 8003d5e:	3501      	adds	r5, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d66:	4798      	blx	r3
 8003d68:	3501      	adds	r5, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08003df4 	.word	0x08003df4
 8003d70:	08003df4 	.word	0x08003df4
 8003d74:	08003df4 	.word	0x08003df4
 8003d78:	08003df8 	.word	0x08003df8

08003d7c <memset>:
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <_init>:
 8003d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8e:	bf00      	nop
 8003d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d92:	bc08      	pop	{r3}
 8003d94:	469e      	mov	lr, r3
 8003d96:	4770      	bx	lr

08003d98 <_fini>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	bf00      	nop
 8003d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9e:	bc08      	pop	{r3}
 8003da0:	469e      	mov	lr, r3
 8003da2:	4770      	bx	lr
