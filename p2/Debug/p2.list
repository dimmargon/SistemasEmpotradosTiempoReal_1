
p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b98  08005b98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  2000000c  08005bac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  08005bac  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189e1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000316d  00000000  00000000  00038a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  0003bb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c0  00000000  00000000  0003d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029595  00000000  00000000  0003ea98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012669  00000000  00000000  0006802d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9678  00000000  00000000  0007a696  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a8  00000000  00000000  00173d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b24 	.word	0x08005b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b24 	.word	0x08005b24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	619a      	str	r2, [r3, #24]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    // Pulse clock
    LL_GPIO_SetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f7ff ffdc 	bl	80004c8 <LL_GPIO_SetOutputPin>
    LL_mDelay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f005 fab5 	bl	8005a80 <LL_mDelay>
    LL_GPIO_ResetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051e:	f7ff ffe1 	bl	80004e4 <LL_GPIO_ResetOutputPin>
     //LL_mDelay(1);
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <lcd_reset>:

void lcd_reset(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 800052c:	2104      	movs	r1, #4
 800052e:	4817      	ldr	r0, [pc, #92]	; (800058c <lcd_reset+0x64>)
 8000530:	f7ff ffd8 	bl	80004e4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT7,  LCD_7);
 8000534:	2110      	movs	r1, #16
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f7ff ffd3 	bl	80004e4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT4,  LCD_4);
 800053e:	2108      	movs	r1, #8
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f7ff ffce 	bl	80004e4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT56,  LCD_5 | LCD_6);
 8000548:	2112      	movs	r1, #18
 800054a:	4810      	ldr	r0, [pc, #64]	; (800058c <lcd_reset+0x64>)
 800054c:	f7ff ffca 	bl	80004e4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(CLOCK_PORT,  LCD_CLOCK );
 8000550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f7ff ffc4 	bl	80004e4 <LL_GPIO_ResetOutputPin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
    LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4 );
 800055c:	2108      	movs	r1, #8
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f7ff ffb1 	bl	80004c8 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5 );
 8000566:	2110      	movs	r1, #16
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <lcd_reset+0x64>)
 800056a:	f7ff ffad 	bl	80004c8 <LL_GPIO_SetOutputPin>
    lcd_clock();
 800056e:	f7ff ffc7 	bl	8000500 <lcd_clock>
    lcd_clock();
 8000572:	f7ff ffc5 	bl	8000500 <lcd_clock>
    lcd_clock();
 8000576:	f7ff ffc3 	bl	8000500 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800057a:	2108      	movs	r1, #8
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f7ff ffb0 	bl	80004e4 <LL_GPIO_ResetOutputPin>
    lcd_clock();
 8000584:	f7ff ffbc 	bl	8000500 <lcd_clock>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	48000400 	.word	0x48000400

08000590 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	091b      	lsrs	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d005      	beq.n	80005ba <lcd_write+0x2a>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 80005ae:	2108      	movs	r1, #8
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f7ff ff88 	bl	80004c8 <LL_GPIO_SetOutputPin>
 80005b8:	e004      	b.n	80005c4 <lcd_write+0x34>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 80005ba:	2108      	movs	r1, #8
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f7ff ff90 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    if((byte >> 5 ) & 1)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	095b      	lsrs	r3, r3, #5
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d004      	beq.n	80005dc <lcd_write+0x4c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 80005d2:	2110      	movs	r1, #16
 80005d4:	483f      	ldr	r0, [pc, #252]	; (80006d4 <lcd_write+0x144>)
 80005d6:	f7ff ff77 	bl	80004c8 <LL_GPIO_SetOutputPin>
 80005da:	e003      	b.n	80005e4 <lcd_write+0x54>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 80005dc:	2110      	movs	r1, #16
 80005de:	483d      	ldr	r0, [pc, #244]	; (80006d4 <lcd_write+0x144>)
 80005e0:	f7ff ff80 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    if((byte >> 6 ) & 1)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	099b      	lsrs	r3, r3, #6
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d004      	beq.n	80005fc <lcd_write+0x6c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 80005f2:	2102      	movs	r1, #2
 80005f4:	4837      	ldr	r0, [pc, #220]	; (80006d4 <lcd_write+0x144>)
 80005f6:	f7ff ff67 	bl	80004c8 <LL_GPIO_SetOutputPin>
 80005fa:	e003      	b.n	8000604 <lcd_write+0x74>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 80005fc:	2102      	movs	r1, #2
 80005fe:	4835      	ldr	r0, [pc, #212]	; (80006d4 <lcd_write+0x144>)
 8000600:	f7ff ff70 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    if((byte >> 7 ) & 1)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	09db      	lsrs	r3, r3, #7
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <lcd_write+0x8e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 8000612:	2110      	movs	r1, #16
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f7ff ff56 	bl	80004c8 <LL_GPIO_SetOutputPin>
 800061c:	e004      	b.n	8000628 <lcd_write+0x98>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 800061e:	2110      	movs	r1, #16
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f7ff ff5e 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    if(rs)
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <lcd_write+0xa8>
        LL_GPIO_SetOutputPin(RS_PORT, LCD_RS);
 800062e:	2104      	movs	r1, #4
 8000630:	4828      	ldr	r0, [pc, #160]	; (80006d4 <lcd_write+0x144>)
 8000632:	f7ff ff49 	bl	80004c8 <LL_GPIO_SetOutputPin>
 8000636:	e003      	b.n	8000640 <lcd_write+0xb0>
    else
        LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000638:	2104      	movs	r1, #4
 800063a:	4826      	ldr	r0, [pc, #152]	; (80006d4 <lcd_write+0x144>)
 800063c:	f7ff ff52 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 8000640:	f7ff ff5e 	bl	8000500 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <lcd_write+0xca>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800064e:	2108      	movs	r1, #8
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f7ff ff38 	bl	80004c8 <LL_GPIO_SetOutputPin>
 8000658:	e004      	b.n	8000664 <lcd_write+0xd4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800065a:	2108      	movs	r1, #8
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f7ff ff40 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    if((byte >> 1 ) & 1)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	085b      	lsrs	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d004      	beq.n	800067c <lcd_write+0xec>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 8000672:	2110      	movs	r1, #16
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <lcd_write+0x144>)
 8000676:	f7ff ff27 	bl	80004c8 <LL_GPIO_SetOutputPin>
 800067a:	e003      	b.n	8000684 <lcd_write+0xf4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 800067c:	2110      	movs	r1, #16
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <lcd_write+0x144>)
 8000680:	f7ff ff30 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    if((byte >> 2 ) & 1)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	2b00      	cmp	r3, #0
 8000690:	d004      	beq.n	800069c <lcd_write+0x10c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 8000692:	2102      	movs	r1, #2
 8000694:	480f      	ldr	r0, [pc, #60]	; (80006d4 <lcd_write+0x144>)
 8000696:	f7ff ff17 	bl	80004c8 <LL_GPIO_SetOutputPin>
 800069a:	e003      	b.n	80006a4 <lcd_write+0x114>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 800069c:	2102      	movs	r1, #2
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <lcd_write+0x144>)
 80006a0:	f7ff ff20 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    if((byte >> 3 ) & 1)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d005      	beq.n	80006be <lcd_write+0x12e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 80006b2:	2110      	movs	r1, #16
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f7ff ff06 	bl	80004c8 <LL_GPIO_SetOutputPin>
 80006bc:	e004      	b.n	80006c8 <lcd_write+0x138>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 80006be:	2110      	movs	r1, #16
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f7ff ff0e 	bl	80004e4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 80006c8:	f7ff ff1a 	bl	8000500 <lcd_clock>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	48000400 	.word	0x48000400

080006d8 <lcd_clear>:

void lcd_clear(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006dc:	2100      	movs	r1, #0
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff56 	bl	8000590 <lcd_write>
    _lcd_char = 0;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <lcd_clear+0x1c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006ea:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <lcd_clear+0x20>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000030 	.word	0x20000030
 80006f8:	20000031 	.word	0x20000031

080006fc <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	460b      	mov	r3, r1
 8000708:	71bb      	strb	r3, [r7, #6]
 800070a:	4613      	mov	r3, r2
 800070c:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	b25a      	sxtb	r2, r3
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	b25b      	sxtb	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b25a      	sxtb	r2, r3
 8000724:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff2d 	bl	8000590 <lcd_write>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff1c 	bl	8000590 <lcd_write>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff0b 	bl	8000590 <lcd_write>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <lcd_print>:

void lcd_print(char string[])
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e055      	b.n	800083e <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <lcd_print+0xd0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01c      	beq.n	80007d4 <lcd_print+0x50>
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d116      	bne.n	80007d4 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 80007a6:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <lcd_print+0xd4>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <lcd_print+0xd0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d242      	bcs.n	8000838 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <lcd_print+0xd8>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <lcd_print+0xd4>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	1c59      	adds	r1, r3, #1
 80007bc:	b2c8      	uxtb	r0, r1
 80007be:	4926      	ldr	r1, [pc, #152]	; (8000858 <lcd_print+0xd4>)
 80007c0:	7008      	strb	r0, [r1, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffb9 	bl	800073e <lcd_display_address>
                _lcd_char = 0;
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <lcd_print+0xdc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80007d2:	e031      	b.n	8000838 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <lcd_print+0xe0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d01b      	beq.n	8000814 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <lcd_print+0xdc>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <lcd_print+0xe0>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d115      	bne.n	8000814 <lcd_print+0x90>
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <lcd_print+0xd4>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <lcd_print+0xd0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d20f      	bcs.n	8000814 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <lcd_print+0xd8>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <lcd_print+0xd4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	1c59      	adds	r1, r3, #1
 80007fe:	b2c8      	uxtb	r0, r1
 8000800:	4915      	ldr	r1, [pc, #84]	; (8000858 <lcd_print+0xd4>)
 8000802:	7008      	strb	r0, [r1, #0]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff98 	bl	800073e <lcd_display_address>
                    _lcd_char = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <lcd_print+0xdc>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff feb6 	bl	8000590 <lcd_write>
            if(lcd_chars) _lcd_char++;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <lcd_print+0xe0>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <lcd_print+0xb4>
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <lcd_print+0xdc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <lcd_print+0xdc>)
 8000836:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	3301      	adds	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1a3      	bne.n	8000792 <lcd_print+0xe>
        }
    }
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000029 	.word	0x20000029
 8000858:	20000031 	.word	0x20000031
 800085c:	2000002c 	.word	0x2000002c
 8000860:	20000030 	.word	0x20000030
 8000864:	20000028 	.word	0x20000028

08000868 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	011a      	lsls	r2, r3, #4
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	dc0a      	bgt.n	800089e <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000890:	b25b      	sxtb	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe7a 	bl	8000590 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 800089c:	e059      	b.n	8000952 <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	dd17      	ble.n	80008d4 <moveToXY+0x6c>
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b1f      	cmp	r3, #31
 80008a8:	dc14      	bgt.n	80008d4 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	425a      	negs	r2, r3
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	f002 020f 	and.w	r2, r2, #15
 80008b6:	bf58      	it	pl
 80008b8:	4253      	negpl	r3, r2
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3340      	adds	r3, #64	; 0x40
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe5f 	bl	8000590 <lcd_write>
 80008d2:	e03e      	b.n	8000952 <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b28      	cmp	r3, #40	; 0x28
 80008d8:	dd1b      	ble.n	8000912 <moveToXY+0xaa>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b3b      	cmp	r3, #59	; 0x3b
 80008de:	dc18      	bgt.n	8000912 <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <moveToXY+0xf4>)
 80008e4:	fb83 1302 	smull	r1, r3, r3, r2
 80008e8:	1119      	asrs	r1, r3, #4
 80008ea:	17d3      	asrs	r3, r2, #31
 80008ec:	1ac9      	subs	r1, r1, r3
 80008ee:	460b      	mov	r3, r1
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	1ad1      	subs	r1, r2, r3
 80008f8:	b2cb      	uxtb	r3, r1
 80008fa:	3314      	adds	r3, #20
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000904:	b25b      	sxtb	r3, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe40 	bl	8000590 <lcd_write>
 8000910:	e01f      	b.n	8000952 <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b13      	cmp	r3, #19
 8000916:	dd1c      	ble.n	8000952 <moveToXY+0xea>
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b27      	cmp	r3, #39	; 0x27
 800091c:	dc19      	bgt.n	8000952 <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <moveToXY+0xf8>)
 8000922:	fb83 1302 	smull	r1, r3, r3, r2
 8000926:	4413      	add	r3, r2
 8000928:	1159      	asrs	r1, r3, #5
 800092a:	17d3      	asrs	r3, r2, #31
 800092c:	1ac9      	subs	r1, r1, r3
 800092e:	460b      	mov	r3, r1
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	1ad1      	subs	r1, r2, r3
 8000938:	b2cb      	uxtb	r3, r1
 800093a:	3354      	adds	r3, #84	; 0x54
 800093c:	b2db      	uxtb	r3, r3
 800093e:	b25b      	sxtb	r3, r3
 8000940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000944:	b25b      	sxtb	r3, r3
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe20 	bl	8000590 <lcd_write>
}
 8000950:	e7ff      	b.n	8000952 <moveToXY+0xea>
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	66666667 	.word	0x66666667
 8000960:	88888889 	.word	0x88888889

08000964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <__NVIC_GetPriorityGrouping+0x18>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	f003 0307 	and.w	r3, r3, #7
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db0b      	blt.n	80009aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 021f 	and.w	r2, r3, #31
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <__NVIC_EnableIRQ+0x38>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	095b      	lsrs	r3, r3, #5
 80009a0:	2001      	movs	r0, #1
 80009a2:	fa00 f202 	lsl.w	r2, r0, r2
 80009a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <LL_SYSCFG_SetEXTISource+0x58>)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	3302      	adds	r3, #2
 8000a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	0c1b      	lsrs	r3, r3, #16
 8000a92:	43db      	mvns	r3, r3
 8000a94:	ea02 0103 	and.w	r1, r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	fa93 f3a3 	rbit	r3, r3
 8000aa4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	fab3 f383 	clz	r3, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <LL_SYSCFG_SetEXTISource+0x58>)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	430a      	orrs	r2, r1
 8000abe:	3302      	adds	r3, #2
 8000ac0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <LL_GPIO_SetPinMode>:
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa93 f3a3 	rbit	r3, r3
 8000aee:	613b      	str	r3, [r7, #16]
  return result;
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	fab3 f383 	clz	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2103      	movs	r1, #3
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	401a      	ands	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	fa93 f3a3 	rbit	r3, r3
 8000b0e:	61bb      	str	r3, [r7, #24]
  return result;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fab3 f383 	clz	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	431a      	orrs	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_GPIO_SetPinPull>:
{
 8000b32:	b480      	push	{r7}
 8000b34:	b089      	sub	sp, #36	; 0x24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa93 f3a3 	rbit	r3, r3
 8000b4c:	613b      	str	r3, [r7, #16]
  return result;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	fab3 f383 	clz	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2103      	movs	r1, #3
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	401a      	ands	r2, r3
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa93 f3a3 	rbit	r3, r3
 8000b6c:	61bb      	str	r3, [r7, #24]
  return result;
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	fab3 f383 	clz	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	60da      	str	r2, [r3, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3724      	adds	r7, #36	; 0x24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_GPIO_EnablePinAnalogControl>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <LL_GPIO_SetOutputPin>:
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_GPIO_ResetOutputPin>:
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4013      	ands	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f001 f8d9 	bl	8001dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f896 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 faa0 	bl	800116c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000c2c:	f000 f936 	bl	8000e9c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000c30:	f000 f96c 	bl	8000f0c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000c34:	f000 f9a8 	bl	8000f88 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000c38:	f000 f9cc 	bl	8000fd4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000c3c:	f000 fa08 	bl	8001050 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c40:	f000 fa36 	bl	80010b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c44:	f000 fa64 	bl	8001110 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_SetOutputPin(GPIOA, Led_LCD_Pin);
 8000c48:	2104      	movs	r1, #4
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f7ff ffb0 	bl	8000bb2 <LL_GPIO_SetOutputPin>
  lcd_reset();
 8000c52:	f7ff fc69 	bl	8000528 <lcd_reset>
  lcd_display_settings(1,0,0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f7ff fd4e 	bl	80006fc <lcd_display_settings>
  lcd_clear();
 8000c60:	f7ff fd3a 	bl	80006d8 <lcd_clear>
  lcd_print("Hola mundo");
 8000c64:	483a      	ldr	r0, [pc, #232]	; (8000d50 <main+0x134>)
 8000c66:	f7ff fd8d 	bl	8000784 <lcd_print>

  lcd_cgram_address(0); // se selecciona la dirección 0 de la CGRAM, patrón con código 0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fd78 	bl	8000760 <lcd_cgram_address>
  lcd_write(0x15, 1); //se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000c70:	2101      	movs	r1, #1
 8000c72:	2015      	movs	r0, #21
 8000c74:	f7ff fc8c 	bl	8000590 <lcd_write>
  lcd_write(0x15, 1);
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2015      	movs	r0, #21
 8000c7c:	f7ff fc88 	bl	8000590 <lcd_write>
  lcd_write(0xe, 1);
 8000c80:	2101      	movs	r1, #1
 8000c82:	200e      	movs	r0, #14
 8000c84:	f7ff fc84 	bl	8000590 <lcd_write>
  lcd_write(0x4, 1);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	f7ff fc80 	bl	8000590 <lcd_write>
  lcd_write(0x4, 1);
 8000c90:	2101      	movs	r1, #1
 8000c92:	2004      	movs	r0, #4
 8000c94:	f7ff fc7c 	bl	8000590 <lcd_write>
  lcd_write(0xa, 1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	200a      	movs	r0, #10
 8000c9c:	f7ff fc78 	bl	8000590 <lcd_write>
  lcd_write(0x11, 1);
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	2011      	movs	r0, #17
 8000ca4:	f7ff fc74 	bl	8000590 <lcd_write>
  lcd_write(0x00, 1);
 8000ca8:	2101      	movs	r1, #1
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fc70 	bl	8000590 <lcd_write>
  lcd_cgram_address(8); //se selecciona la dirección 8 de la CGRAM, patrón con código 1
 8000cb0:	2008      	movs	r0, #8
 8000cb2:	f7ff fd55 	bl	8000760 <lcd_cgram_address>
  lcd_write(0x4, 1); // se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f7ff fc69 	bl	8000590 <lcd_write>
  lcd_write(0x4, 1);
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	f7ff fc65 	bl	8000590 <lcd_write>
  lcd_write(0xe, 1);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	200e      	movs	r0, #14
 8000cca:	f7ff fc61 	bl	8000590 <lcd_write>
  lcd_write(0x15, 1);
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2015      	movs	r0, #21
 8000cd2:	f7ff fc5d 	bl	8000590 <lcd_write>
  lcd_write(0x15, 1);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	2015      	movs	r0, #21
 8000cda:	f7ff fc59 	bl	8000590 <lcd_write>
  lcd_write(0xa, 1);
 8000cde:	2101      	movs	r1, #1
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f7ff fc55 	bl	8000590 <lcd_write>
  lcd_write(0xa, 1);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f7ff fc51 	bl	8000590 <lcd_write>
  lcd_write(0x00, 1);
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff fc4d 	bl	8000590 <lcd_write>
  lcd_display_address(0); //Vuelve a direccionar la DDRAM para visualizar datos en pantalla
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fd21 	bl	800073e <lcd_display_address>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff fdb2 	bl	8000868 <moveToXY>
	    lcd_write(0,1); //escribe el nuevo patrón 0 en la DDRAM
 8000d04:	2101      	movs	r1, #1
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fc42 	bl	8000590 <lcd_write>
	    moveToXY(1,8); //sitúa el cursor en la posición fila 1 columna 7, segundo muñeco
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff fdaa 	bl	8000868 <moveToXY>
	    lcd_write(0,1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fc3a 	bl	8000590 <lcd_write>
	    HAL_Delay(1000); //retraso de 1 segundo para dejar ver la figura en pantalla
 8000d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d20:	f001 f8ca 	bl	8001eb8 <HAL_Delay>

	    moveToXY(1,7);
 8000d24:	2107      	movs	r1, #7
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff fd9e 	bl	8000868 <moveToXY>
	    lcd_write(1,1); //escribe el nuevo patrón 0 en la DDRAM
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fc2e 	bl	8000590 <lcd_write>
	    moveToXY(1,8);
 8000d34:	2108      	movs	r1, #8
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fd96 	bl	8000868 <moveToXY>
	    lcd_write(1,1);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fc26 	bl	8000590 <lcd_write>
	    HAL_Delay(1000);
 8000d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d48:	f001 f8b6 	bl	8001eb8 <HAL_Delay>
	  moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000d4c:	e7d6      	b.n	8000cfc <main+0xe0>
 8000d4e:	bf00      	nop
 8000d50:	08005b3c 	.word	0x08005b3c

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b8      	sub	sp, #224	; 0xe0
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d5e:	2244      	movs	r2, #68	; 0x44
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 fed6 	bl	8005b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2288      	movs	r2, #136	; 0x88
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fec8 	bl	8005b14 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000d84:	f001 fec2 	bl	8002b0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d88:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <SystemClock_Config+0x140>)
 8000d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d8e:	4a41      	ldr	r2, [pc, #260]	; (8000e94 <SystemClock_Config+0x140>)
 8000d90:	f023 0318 	bic.w	r3, r3, #24
 8000d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d98:	2314      	movs	r3, #20
 8000d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000db0:	2360      	movs	r3, #96	; 0x60
 8000db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000dc8:	2328      	movs	r3, #40	; 0x28
 8000dca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 ffdd 	bl	8002da4 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000df0:	f000 fcba 	bl	8001768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e16:	2104      	movs	r1, #4
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fba9 	bl	8003570 <HAL_RCC_ClockConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e24:	f000 fca0 	bl	8001768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <SystemClock_Config+0x144>)
 8000e2a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e44:	2301      	movs	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000e4c:	2318      	movs	r3, #24
 8000e4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e50:	2307      	movs	r3, #7
 8000e52:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000e5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e60:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fd87 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000e70:	f000 fc7a 	bl	8001768 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e78:	f001 fe66 	bl	8002b48 <HAL_PWREx_ControlVoltageScaling>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000e82:	f000 fc71 	bl	8001768 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e86:	f003 f85d 	bl	8003f44 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e8a:	bf00      	nop
 8000e8c:	37e0      	adds	r7, #224	; 0xe0
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	00012085 	.word	0x00012085

08000e9c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <MX_DFSDM1_Init+0x6c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_DFSDM1_Init+0x68>)
 8000ef2:	f001 f8e9 	bl	80020c8 <HAL_DFSDM_ChannelInit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000efc:	f000 fc34 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000005c 	.word	0x2000005c
 8000f08:	40016020 	.word	0x40016020

08000f0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <MX_I2C2_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f18:	f640 6214 	movw	r2, #3604	; 0xe14
 8000f1c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f4a:	f001 fb71 	bl	8002630 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 fc08 	bl	8001768 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f5c:	f001 fbf7 	bl	800274e <HAL_I2CEx_ConfigAnalogFilter>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f66:	f000 fbff 	bl	8001768 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f6e:	f001 fc39 	bl	80027e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f78:	f000 fbf6 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000051c 	.word	0x2000051c
 8000f84:	40005800 	.word	0x40005800

08000f88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <MX_QUADSPI_Init+0x48>)
 8000f90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000f94:	22ff      	movs	r2, #255	; 0xff
 8000f96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fb8:	f001 fe2c 	bl	8002c14 <HAL_QSPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000fc2:	f000 fbd1 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000064c 	.word	0x2000064c
 8000fd0:	a0001000 	.word	0xa0001000

08000fd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_SPI3_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ff2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_SPI3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_SPI3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_SPI3_Init+0x74>)
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_SPI3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_SPI3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_SPI3_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_SPI3_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_SPI3_Init+0x74>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_SPI3_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_SPI3_Init+0x74>)
 800102e:	2208      	movs	r2, #8
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_SPI3_Init+0x74>)
 8001034:	f003 f960 	bl	80042f8 <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 fb93 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000568 	.word	0x20000568
 800104c:	40003c00 	.word	0x40003c00

08001050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_USART1_UART_Init+0x5c>)
 8001058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001094:	f003 f9ba 	bl	800440c <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800109e:	f000 fb63 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200005cc 	.word	0x200005cc
 80010ac:	40013800 	.word	0x40013800

080010b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <MX_USART3_UART_Init+0x5c>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010f4:	f003 f98a 	bl	800440c <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010fe:	f000 fb33 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000094 	.word	0x20000094
 800110c:	40004800 	.word	0x40004800

08001110 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800111a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2206      	movs	r2, #6
 8001120:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	2202      	movs	r2, #2
 8001126:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112a:	2202      	movs	r2, #2
 800112c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001154:	f001 fb92 	bl	800287c <HAL_PCD_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 fb03 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000114 	.word	0x20000114

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800118e:	2010      	movs	r0, #16
 8001190:	f7ff fd2c 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001194:	2004      	movs	r0, #4
 8001196:	f7ff fd29 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fd26 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fd23 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80011a6:	2008      	movs	r0, #8
 80011a8:	f7ff fd20 	bl	8000bec <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 80011ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 80011b0:	48cd      	ldr	r0, [pc, #820]	; (80014e8 <MX_GPIO_Init+0x37c>)
 80011b2:	f7ff fd0c 	bl	8000bce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin 
 80011b6:	f248 111c 	movw	r1, #33052	; 0x811c
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f7ff fd06 	bl	8000bce <LL_GPIO_ResetOutputPin>
                          |E_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin 
 80011c2:	f24f 0116 	movw	r1, #61462	; 0xf016
 80011c6:	48c9      	ldr	r0, [pc, #804]	; (80014ec <MX_GPIO_Init+0x380>)
 80011c8:	f7ff fd01 	bl	8000bce <LL_GPIO_ResetOutputPin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 80011cc:	f241 0181 	movw	r1, #4225	; 0x1081
 80011d0:	48c7      	ldr	r0, [pc, #796]	; (80014f0 <MX_GPIO_Init+0x384>)
 80011d2:	f7ff fcfc 	bl	8000bce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 80011d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80011da:	48c6      	ldr	r0, [pc, #792]	; (80014f4 <MX_GPIO_Init+0x388>)
 80011dc:	f7ff fcf7 	bl	8000bce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 80011e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e4:	48c2      	ldr	r0, [pc, #776]	; (80014f0 <MX_GPIO_Init+0x384>)
 80011e6:	f7ff fce4 	bl	8000bb2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 80011ea:	2120      	movs	r1, #32
 80011ec:	48bf      	ldr	r0, [pc, #764]	; (80014ec <MX_GPIO_Init+0x380>)
 80011ee:	f7ff fce0 	bl	8000bb2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 80011f2:	2101      	movs	r1, #1
 80011f4:	48bc      	ldr	r0, [pc, #752]	; (80014e8 <MX_GPIO_Init+0x37c>)
 80011f6:	f7ff fcdc 	bl	8000bb2 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80011fa:	f240 1315 	movw	r3, #277	; 0x115
 80011fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001200:	2301      	movs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	48b4      	ldr	r0, [pc, #720]	; (80014e8 <MX_GPIO_Init+0x37c>)
 8001216:	f004 f93c 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	48b2      	ldr	r0, [pc, #712]	; (80014f4 <MX_GPIO_Init+0x388>)
 800122c:	f004 f931 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001230:	2303      	movs	r3, #3
 8001232:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001244:	2308      	movs	r3, #8
 8001246:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f004 f91f 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin 
 8001254:	f248 131c 	movw	r3, #33052	; 0x811c
 8001258:	607b      	str	r3, [r7, #4]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800125a:	2301      	movs	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f004 f90e 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001276:	23e0      	movs	r3, #224	; 0xe0
 8001278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800127a:	2302      	movs	r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800128a:	2305      	movs	r3, #5
 800128c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f004 f8fc 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin 
 800129a:	f24f 0336 	movw	r3, #61494	; 0xf036
 800129e:	607b      	str	r3, [r7, #4]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012a0:	2301      	movs	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	488d      	ldr	r0, [pc, #564]	; (80014ec <MX_GPIO_Init+0x380>)
 80012b6:	f004 f8ec 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80012ba:	f243 0381 	movw	r3, #12417	; 0x3081
 80012be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4886      	ldr	r0, [pc, #536]	; (80014f0 <MX_GPIO_Init+0x384>)
 80012d6:	f004 f8dc 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80012da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	487f      	ldr	r0, [pc, #508]	; (80014f4 <MX_GPIO_Init+0x388>)
 80012f6:	f004 f8cc 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80012fa:	2302      	movs	r3, #2
 80012fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012fe:	2302      	movs	r3, #2
 8001300:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800130e:	2305      	movs	r3, #5
 8001310:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4876      	ldr	r0, [pc, #472]	; (80014f0 <MX_GPIO_Init+0x384>)
 8001318:	f004 f8bb 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800131c:	2378      	movs	r3, #120	; 0x78
 800131e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001330:	2307      	movs	r3, #7
 8001332:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	486d      	ldr	r0, [pc, #436]	; (80014f0 <MX_GPIO_Init+0x384>)
 800133a:	f004 f8aa 	bl	8005492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001344:	2302      	movs	r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001350:	2301      	movs	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001354:	2304      	movs	r3, #4
 8001356:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4619      	mov	r1, r3
 800135c:	4863      	ldr	r0, [pc, #396]	; (80014ec <MX_GPIO_Init+0x380>)
 800135e:	f004 f898 	bl	8005492 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 8001362:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001366:	2004      	movs	r0, #4
 8001368:	f7ff fb86 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 800136c:	4962      	ldr	r1, [pc, #392]	; (80014f8 <MX_GPIO_Init+0x38c>)
 800136e:	2004      	movs	r0, #4
 8001370:	f7ff fb82 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 8001374:	4961      	ldr	r1, [pc, #388]	; (80014fc <MX_GPIO_Init+0x390>)
 8001376:	2004      	movs	r0, #4
 8001378:	f7ff fb7e 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800137c:	4960      	ldr	r1, [pc, #384]	; (8001500 <MX_GPIO_Init+0x394>)
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff fb7a 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8001384:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fb75 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 800138e:	495d      	ldr	r1, [pc, #372]	; (8001504 <MX_GPIO_Init+0x398>)
 8001390:	2003      	movs	r0, #3
 8001392:	f7ff fb71 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8001396:	495c      	ldr	r1, [pc, #368]	; (8001508 <MX_GPIO_Init+0x39c>)
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff fb6d 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 800139e:	495b      	ldr	r1, [pc, #364]	; (800150c <MX_GPIO_Init+0x3a0>)
 80013a0:	2003      	movs	r0, #3
 80013a2:	f7ff fb69 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 80013a6:	495a      	ldr	r1, [pc, #360]	; (8001510 <MX_GPIO_Init+0x3a4>)
 80013a8:	2003      	movs	r0, #3
 80013aa:	f7ff fb65 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 80013ae:	4959      	ldr	r1, [pc, #356]	; (8001514 <MX_GPIO_Init+0x3a8>)
 80013b0:	2002      	movs	r0, #2
 80013b2:	f7ff fb61 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 80013b6:	4958      	ldr	r1, [pc, #352]	; (8001518 <MX_GPIO_Init+0x3ac>)
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff fb5d 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 80013be:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80013c2:	2003      	movs	r0, #3
 80013c4:	f7ff fb58 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 80013c8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80013cc:	2004      	movs	r0, #4
 80013ce:	f7ff fb53 	bl	8000a78 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80013d2:	2308      	movs	r3, #8
 80013d4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fe5d 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80013f6:	2320      	movs	r3, #32
 80013f8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4618      	mov	r0, r3
 8001416:	f003 fe4b 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fe39 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001448:	2301      	movs	r3, #1
 800144a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001454:	2302      	movs	r3, #2
 8001456:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fe26 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001464:	2301      	movs	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800146c:	2301      	movs	r3, #1
 800146e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001478:	2301      	movs	r3, #1
 800147a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fe14 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8001488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fe01 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 80014ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014b2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014c4:	2301      	movs	r3, #1
 80014c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fdee 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80014d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80014e4:	e01a      	b.n	800151c <MX_GPIO_Init+0x3b0>
 80014e6:	bf00      	nop
 80014e8:	48001000 	.word	0x48001000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48000800 	.word	0x48000800
 80014f8:	00f00001 	.word	0x00f00001
 80014fc:	0f000001 	.word	0x0f000001
 8001500:	00f00003 	.word	0x00f00003
 8001504:	0f000002 	.word	0x0f000002
 8001508:	f0000002 	.word	0xf0000002
 800150c:	0f000003 	.word	0x0f000003
 8001510:	f0000003 	.word	0xf0000003
 8001514:	f0000001 	.word	0xf0000001
 8001518:	000f0002 	.word	0x000f0002
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001522:	2301      	movs	r3, #1
 8001524:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fdbf 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001536:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fdac 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800156c:	2301      	movs	r3, #1
 800156e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fd9a 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 800157c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001580:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001592:	2301      	movs	r3, #1
 8001594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4618      	mov	r0, r3
 800159e:	f003 fd87 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80015a2:	2304      	movs	r3, #4
 80015a4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fd75 	bl	80050b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fd63 	bl	80050b0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2108      	movs	r1, #8
 80015ee:	485a      	ldr	r0, [pc, #360]	; (8001758 <MX_GPIO_Init+0x5ec>)
 80015f0:	f7ff fa9f 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2120      	movs	r1, #32
 80015f8:	4857      	ldr	r0, [pc, #348]	; (8001758 <MX_GPIO_Init+0x5ec>)
 80015fa:	f7ff fa9a 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 80015fe:	2200      	movs	r2, #0
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	4855      	ldr	r0, [pc, #340]	; (8001758 <MX_GPIO_Init+0x5ec>)
 8001604:	f7ff fa95 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160e:	4853      	ldr	r0, [pc, #332]	; (800175c <MX_GPIO_Init+0x5f0>)
 8001610:	f7ff fa8f 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	4851      	ldr	r0, [pc, #324]	; (8001760 <MX_GPIO_Init+0x5f4>)
 800161a:	f7ff fa8a 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001624:	484f      	ldr	r0, [pc, #316]	; (8001764 <MX_GPIO_Init+0x5f8>)
 8001626:	f7ff fa84 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001630:	484c      	ldr	r0, [pc, #304]	; (8001764 <MX_GPIO_Init+0x5f8>)
 8001632:	f7ff fa7e 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163c:	4849      	ldr	r0, [pc, #292]	; (8001764 <MX_GPIO_Init+0x5f8>)
 800163e:	f7ff fa78 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001648:	4846      	ldr	r0, [pc, #280]	; (8001764 <MX_GPIO_Init+0x5f8>)
 800164a:	f7ff fa72 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 800164e:	2200      	movs	r2, #0
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4842      	ldr	r0, [pc, #264]	; (800175c <MX_GPIO_Init+0x5f0>)
 8001654:	f7ff fa6d 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165e:	483f      	ldr	r0, [pc, #252]	; (800175c <MX_GPIO_Init+0x5f0>)
 8001660:	f7ff fa67 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 8001664:	2200      	movs	r2, #0
 8001666:	2104      	movs	r1, #4
 8001668:	483e      	ldr	r0, [pc, #248]	; (8001764 <MX_GPIO_Init+0x5f8>)
 800166a:	f7ff fa62 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	4839      	ldr	r0, [pc, #228]	; (8001758 <MX_GPIO_Init+0x5ec>)
 8001674:	f7ff fa5d 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 8001678:	2200      	movs	r2, #0
 800167a:	2108      	movs	r1, #8
 800167c:	4836      	ldr	r0, [pc, #216]	; (8001758 <MX_GPIO_Init+0x5ec>)
 800167e:	f7ff fa29 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 8001682:	2200      	movs	r2, #0
 8001684:	2120      	movs	r1, #32
 8001686:	4834      	ldr	r0, [pc, #208]	; (8001758 <MX_GPIO_Init+0x5ec>)
 8001688:	f7ff fa24 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 800168c:	2200      	movs	r2, #0
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	4831      	ldr	r0, [pc, #196]	; (8001758 <MX_GPIO_Init+0x5ec>)
 8001692:	f7ff fa1f 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	482f      	ldr	r0, [pc, #188]	; (800175c <MX_GPIO_Init+0x5f0>)
 800169e:	f7ff fa19 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2101      	movs	r1, #1
 80016a6:	482e      	ldr	r0, [pc, #184]	; (8001760 <MX_GPIO_Init+0x5f4>)
 80016a8:	f7ff fa14 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b2:	482c      	ldr	r0, [pc, #176]	; (8001764 <MX_GPIO_Init+0x5f8>)
 80016b4:	f7ff fa0e 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016be:	4829      	ldr	r0, [pc, #164]	; (8001764 <MX_GPIO_Init+0x5f8>)
 80016c0:	f7ff fa08 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ca:	4826      	ldr	r0, [pc, #152]	; (8001764 <MX_GPIO_Init+0x5f8>)
 80016cc:	f7ff fa02 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d6:	4823      	ldr	r0, [pc, #140]	; (8001764 <MX_GPIO_Init+0x5f8>)
 80016d8:	f7ff f9fc 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 80016dc:	2200      	movs	r2, #0
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	481e      	ldr	r0, [pc, #120]	; (800175c <MX_GPIO_Init+0x5f0>)
 80016e2:	f7ff f9f7 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ec:	481b      	ldr	r0, [pc, #108]	; (800175c <MX_GPIO_Init+0x5f0>)
 80016ee:	f7ff f9f1 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2104      	movs	r1, #4
 80016f6:	481b      	ldr	r0, [pc, #108]	; (8001764 <MX_GPIO_Init+0x5f8>)
 80016f8:	f7ff f9ec 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2102      	movs	r1, #2
 8001700:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_GPIO_Init+0x5ec>)
 8001702:	f7ff f9e7 	bl	8000ad4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8001706:	213f      	movs	r1, #63	; 0x3f
 8001708:	4814      	ldr	r0, [pc, #80]	; (800175c <MX_GPIO_Init+0x5f0>)
 800170a:	f7ff fa41 	bl	8000b90 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800170e:	f7ff f929 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8001712:	4603      	mov	r3, r0
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f979 	bl	8000a10 <NVIC_EncodePriority>
 800171e:	4603      	mov	r3, r0
 8001720:	4619      	mov	r1, r3
 8001722:	2017      	movs	r0, #23
 8001724:	f7ff f94a 	bl	80009bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001728:	2017      	movs	r0, #23
 800172a:	f7ff f929 	bl	8000980 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800172e:	f7ff f919 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8001732:	4603      	mov	r3, r0
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f969 	bl	8000a10 <NVIC_EncodePriority>
 800173e:	4603      	mov	r3, r0
 8001740:	4619      	mov	r1, r3
 8001742:	2028      	movs	r0, #40	; 0x28
 8001744:	f7ff f93a 	bl	80009bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001748:	2028      	movs	r0, #40	; 0x28
 800174a:	f7ff f919 	bl	8000980 <__NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	48001000 	.word	0x48001000
 800175c:	48000800 	.word	0x48000800
 8001760:	48000400 	.word	0x48000400
 8001764:	48000c00 	.word	0x48000c00

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_MspInit+0x44>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6613      	str	r3, [r2, #96]	; 0x60
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6593      	str	r3, [r2, #88]	; 0x58
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_DFSDM_ChannelMspInit+0x7c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d128      	bne.n	8001832 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_DFSDM_ChannelMspInit+0x80>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	4a16      	ldr	r2, [pc, #88]	; (8001840 <HAL_DFSDM_ChannelMspInit+0x80>)
 80017e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ea:	6613      	str	r3, [r2, #96]	; 0x60
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_DFSDM_ChannelMspInit+0x80>)
 80017ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_DFSDM_ChannelMspInit+0x80>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_DFSDM_ChannelMspInit+0x80>)
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001810:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001822:	2306      	movs	r3, #6
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_DFSDM_ChannelMspInit+0x84>)
 800182e:	f000 fd57 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000034 	.word	0x20000034
 8001840:	40021000 	.word	0x40021000
 8001844:	48001000 	.word	0x48001000

08001848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_I2C_MspInit+0x7c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d128      	bne.n	80018bc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_I2C_MspInit+0x80>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_I2C_MspInit+0x80>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_I2C_MspInit+0x80>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001882:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001888:	2312      	movs	r3, #18
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188c:	2301      	movs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001894:	2304      	movs	r3, #4
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	480b      	ldr	r0, [pc, #44]	; (80018cc <HAL_I2C_MspInit+0x84>)
 80018a0:	f000 fd1e 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MspInit+0x80>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_I2C_MspInit+0x80>)
 80018aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_I2C_MspInit+0x80>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005800 	.word	0x40005800
 80018c8:	40021000 	.word	0x40021000
 80018cc:	48000400 	.word	0x48000400

080018d0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_QSPI_MspInit+0x7c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d128      	bne.n	8001944 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_QSPI_MspInit+0x80>)
 80018f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f6:	4a16      	ldr	r2, [pc, #88]	; (8001950 <HAL_QSPI_MspInit+0x80>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6513      	str	r3, [r2, #80]	; 0x50
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_QSPI_MspInit+0x80>)
 8001900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_QSPI_MspInit+0x80>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_QSPI_MspInit+0x80>)
 8001910:	f043 0310 	orr.w	r3, r3, #16
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_QSPI_MspInit+0x80>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001922:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001926:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001934:	230a      	movs	r3, #10
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_QSPI_MspInit+0x84>)
 8001940:	f000 fcce 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	a0001000 	.word	0xa0001000
 8001950:	40021000 	.word	0x40021000
 8001954:	48001000 	.word	0x48001000

08001958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_SPI_MspInit+0x7c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d128      	bne.n	80019cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019bc:	2306      	movs	r3, #6
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_SPI_MspInit+0x84>)
 80019c8:	f000 fc8a 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40003c00 	.word	0x40003c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000800 	.word	0x48000800

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <HAL_UART_MspInit+0xd8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d128      	bne.n	8001a54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	4a2d      	ldr	r2, [pc, #180]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a42:	2307      	movs	r3, #7
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481c      	ldr	r0, [pc, #112]	; (8001ac0 <HAL_UART_MspInit+0xe0>)
 8001a4e:	f000 fc47 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a52:	e02d      	b.n	8001ab0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1a      	ldr	r2, [pc, #104]	; (8001ac4 <HAL_UART_MspInit+0xe4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d128      	bne.n	8001ab0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_UART_MspInit+0xdc>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <HAL_UART_MspInit+0xe8>)
 8001aac:	f000 fc18 	bl	80022e0 <HAL_GPIO_Init>
}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	40004800 	.word	0x40004800
 8001ac8:	48000c00 	.word	0x48000c00

08001acc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aec:	d154      	bne.n	8001b98 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a2b      	ldr	r2, [pc, #172]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f000 fbdf 	bl	80022e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b34:	230a      	movs	r3, #10
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f000 fbcd 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d114      	bne.n	8001b94 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001b82:	f001 f837 	bl	8002bf4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <HAL_PCD_MspInit+0xd4>)
 8001b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b90:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b92:	e001      	b.n	8001b98 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001b94:	f001 f82e 	bl	8002bf4 <HAL_PWREx_EnableVddUSB>
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d101      	bne.n	8001bbe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6153      	str	r3, [r2, #20]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40010400 	.word	0x40010400

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c44:	f000 f91a 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001c50:	2020      	movs	r0, #32
 8001c52:	f7ff ffa7 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001c5c:	2020      	movs	r0, #32
 8001c5e:	f7ff ffb7 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */
    
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001c62:	2040      	movs	r0, #64	; 0x40
 8001c64:	f7ff ff9e 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001c6e:	2040      	movs	r0, #64	; 0x40
 8001c70:	f7ff ffae 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */
    
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001c74:	2080      	movs	r0, #128	; 0x80
 8001c76:	f7ff ff95 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001c80:	2080      	movs	r0, #128	; 0x80
 8001c82:	f7ff ffa5 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */
    
    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001c86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c8a:	f7ff ff8b 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001c94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c98:	f7ff ff9a 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001ca4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ca8:	f7ff ff7c 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001cb2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cb6:	f7ff ff8b 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */
    
    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001cba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cbe:	f7ff ff71 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001cc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ccc:	f7ff ff80 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */
    
    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001cd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cd4:	f7ff ff66 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001cde:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ce2:	f7ff ff75 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001ce6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cea:	f7ff ff5b 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001cf4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cf8:	f7ff ff6a 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001cfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d00:	f7ff ff50 	bl	8001ba4 <LL_EXTI_IsActiveFlag_0_31>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001d0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d0e:	f7ff ff5f 	bl	8001bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <SystemInit+0x64>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <SystemInit+0x64>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <SystemInit+0x68>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <SystemInit+0x68>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <SystemInit+0x68>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <SystemInit+0x68>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <SystemInit+0x68>)
 8001d44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <SystemInit+0x68>)
 8001d50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <SystemInit+0x68>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <SystemInit+0x68>)
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <SystemInit+0x68>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SystemInit+0x64>)
 8001d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00
 8001d80:	40021000 	.word	0x40021000

08001d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d8a:	e003      	b.n	8001d94 <LoopCopyDataInit>

08001d8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d92:	3104      	adds	r1, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d9c:	d3f6      	bcc.n	8001d8c <CopyDataInit>
	ldr	r2, =_sbss
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001da0:	e002      	b.n	8001da8 <LoopFillZerobss>

08001da2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001da2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001da4:	f842 3b04 	str.w	r3, [r2], #4

08001da8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <LoopForever+0x16>)
	cmp	r2, r3
 8001daa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001dac:	d3f9      	bcc.n	8001da2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dae:	f7ff ffb3 	bl	8001d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db2:	f003 fe8b 	bl	8005acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db6:	f7fe ff31 	bl	8000c1c <main>

08001dba <LoopForever>:

LoopForever:
    b LoopForever
 8001dba:	e7fe      	b.n	8001dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dbc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001dc0:	08005ba0 	.word	0x08005ba0
	ldr	r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dc8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001dcc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001dd0:	20000694 	.word	0x20000694

08001dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_2_IRQHandler>

08001dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f93d 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f80e 	bl	8001e08 <HAL_InitTick>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	e001      	b.n	8001dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df8:	f7ff fcbe 	bl	8001778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_InitTick+0x68>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d022      	beq.n	8001e62 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_InitTick+0x6c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_InitTick+0x68>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f93c 	bl	80020ae <HAL_SYSTICK_Config>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10f      	bne.n	8001e5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	d809      	bhi.n	8001e56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e42:	2200      	movs	r2, #0
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4a:	f000 f914 	bl	8002076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_InitTick+0x70>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e007      	b.n	8001e66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e004      	b.n	8001e66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_IncTick+0x1c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_IncTick+0x20>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_IncTick+0x1c>)
 8001e8c:	6013      	str	r3, [r2, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20000690 	.word	0x20000690
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000690 	.word	0x20000690

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d004      	beq.n	8001edc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_Delay+0x40>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4413      	add	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001edc:	bf00      	nop
 8001ede:	f7ff ffdf 	bl	8001ea0 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d8f7      	bhi.n	8001ede <HAL_Delay+0x26>
  {
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008

08001efc <__NVIC_SetPriorityGrouping>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_SetPriority>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff47 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff5c 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffb0 	bl	800201c <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0ac      	b.n	8002234 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f8b2 	bl	8002248 <DFSDM_GetChannelFromInstance>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_DFSDM_ChannelInit+0x174>)
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e09f      	b.n	8002234 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fb63 	bl	80017c0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_DFSDM_ChannelInit+0x178>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a4f      	ldr	r2, [pc, #316]	; (8002240 <HAL_DFSDM_ChannelInit+0x178>)
 8002102:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002104:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <HAL_DFSDM_ChannelInit+0x178>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d125      	bne.n	8002158 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 8002112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002116:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002118:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4948      	ldr	r1, [pc, #288]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a46      	ldr	r2, [pc, #280]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 800212c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002130:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800213a:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	493f      	ldr	r1, [pc, #252]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800214c:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3c      	ldr	r2, [pc, #240]	; (8002244 <HAL_DFSDM_ChannelInit+0x17c>)
 8002152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002156:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002166:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002176:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800217c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 020f 	bic.w	r2, r2, #15
 8002194:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80021bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002214:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f810 	bl	8002248 <DFSDM_GetChannelFromInstance>
 8002228:	4601      	mov	r1, r0
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_DFSDM_ChannelInit+0x174>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000003c 	.word	0x2000003c
 8002240:	20000038 	.word	0x20000038
 8002244:	40016000 	.word	0x40016000

08002248 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d102      	bne.n	800225e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e02b      	b.n	80022b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <DFSDM_GetChannelFromInstance+0x80>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d102      	bne.n	800226c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002266:	2301      	movs	r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e024      	b.n	80022b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <DFSDM_GetChannelFromInstance+0x84>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002274:	2302      	movs	r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e01d      	b.n	80022b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <DFSDM_GetChannelFromInstance+0x88>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d102      	bne.n	8002288 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002282:	2304      	movs	r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	e016      	b.n	80022b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <DFSDM_GetChannelFromInstance+0x8c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002290:	2305      	movs	r3, #5
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e00f      	b.n	80022b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <DFSDM_GetChannelFromInstance+0x90>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d102      	bne.n	80022a4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800229e:	2306      	movs	r3, #6
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e008      	b.n	80022b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <DFSDM_GetChannelFromInstance+0x94>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d102      	bne.n	80022b2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80022ac:	2307      	movs	r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e001      	b.n	80022b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80022b2:	2303      	movs	r3, #3
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40016000 	.word	0x40016000
 80022c8:	40016020 	.word	0x40016020
 80022cc:	40016040 	.word	0x40016040
 80022d0:	40016080 	.word	0x40016080
 80022d4:	400160a0 	.word	0x400160a0
 80022d8:	400160c0 	.word	0x400160c0
 80022dc:	400160e0 	.word	0x400160e0

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	e17f      	b.n	80025f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8171 	beq.w	80025ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d00b      	beq.n	8002328 <HAL_GPIO_Init+0x48>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d007      	beq.n	8002328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231c:	2b11      	cmp	r3, #17
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b12      	cmp	r3, #18
 8002326:	d130      	bne.n	800238a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235e:	2201      	movs	r2, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0201 	and.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d118      	bne.n	80023c8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x128>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b12      	cmp	r3, #18
 8002406:	d123      	bne.n	8002450 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	220f      	movs	r2, #15
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	08da      	lsrs	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3208      	adds	r2, #8
 800244a:	6939      	ldr	r1, [r7, #16]
 800244c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0203 	and.w	r2, r3, #3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80ac 	beq.w	80025ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	4b5e      	ldr	r3, [pc, #376]	; (800260c <HAL_GPIO_Init+0x32c>)
 8002494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002496:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_GPIO_Init+0x32c>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6613      	str	r3, [r2, #96]	; 0x60
 800249e:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_GPIO_Init+0x32c>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024aa:	4a59      	ldr	r2, [pc, #356]	; (8002610 <HAL_GPIO_Init+0x330>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d4:	d025      	beq.n	8002522 <HAL_GPIO_Init+0x242>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4e      	ldr	r2, [pc, #312]	; (8002614 <HAL_GPIO_Init+0x334>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01f      	beq.n	800251e <HAL_GPIO_Init+0x23e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4d      	ldr	r2, [pc, #308]	; (8002618 <HAL_GPIO_Init+0x338>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0x23a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_GPIO_Init+0x33c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0x236>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <HAL_GPIO_Init+0x340>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x232>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4a      	ldr	r2, [pc, #296]	; (8002624 <HAL_GPIO_Init+0x344>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x22e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a49      	ldr	r2, [pc, #292]	; (8002628 <HAL_GPIO_Init+0x348>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x22a>
 8002506:	2306      	movs	r3, #6
 8002508:	e00c      	b.n	8002524 <HAL_GPIO_Init+0x244>
 800250a:	2307      	movs	r3, #7
 800250c:	e00a      	b.n	8002524 <HAL_GPIO_Init+0x244>
 800250e:	2305      	movs	r3, #5
 8002510:	e008      	b.n	8002524 <HAL_GPIO_Init+0x244>
 8002512:	2304      	movs	r3, #4
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x244>
 8002516:	2303      	movs	r3, #3
 8002518:	e004      	b.n	8002524 <HAL_GPIO_Init+0x244>
 800251a:	2302      	movs	r3, #2
 800251c:	e002      	b.n	8002524 <HAL_GPIO_Init+0x244>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x244>
 8002522:	2300      	movs	r3, #0
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	f002 0203 	and.w	r2, r2, #3
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4093      	lsls	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002534:	4936      	ldr	r1, [pc, #216]	; (8002610 <HAL_GPIO_Init+0x330>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002542:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_GPIO_Init+0x34c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002566:	4a31      	ldr	r2, [pc, #196]	; (800262c <HAL_GPIO_Init+0x34c>)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_GPIO_Init+0x34c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002590:	4a26      	ldr	r2, [pc, #152]	; (800262c <HAL_GPIO_Init+0x34c>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002596:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_GPIO_Init+0x34c>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_GPIO_Init+0x34c>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_GPIO_Init+0x34c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e4:	4a11      	ldr	r2, [pc, #68]	; (800262c <HAL_GPIO_Init+0x34c>)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f47f ae78 	bne.w	80022f0 <HAL_GPIO_Init+0x10>
  }
}
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	48001400 	.word	0x48001400
 8002628:	48001800 	.word	0x48001800
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e081      	b.n	8002746 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff f8f6 	bl	8001848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002680:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002690:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	e006      	b.n	80026b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d104      	bne.n	80026ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	ea42 0103 	orr.w	r1, r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	021a      	lsls	r2, r3, #8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69d9      	ldr	r1, [r3, #28]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b20      	cmp	r3, #32
 8002762:	d138      	bne.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800276e:	2302      	movs	r3, #2
 8002770:	e032      	b.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2224      	movs	r2, #36	; 0x24
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d139      	bne.n	800286e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002804:	2302      	movs	r3, #2
 8002806:	e033      	b.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2224      	movs	r2, #36	; 0x24
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002836:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287e:	b08f      	sub	sp, #60	; 0x3c
 8002880:	af0a      	add	r7, sp, #40	; 0x28
 8002882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e116      	b.n	8002abc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff f90f 	bl	8001acc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2203      	movs	r2, #3
 80028b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fea1 	bl	8005614 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	687e      	ldr	r6, [r7, #4]
 80028da:	466d      	mov	r5, sp
 80028dc:	f106 0410 	add.w	r4, r6, #16
 80028e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f0:	1d33      	adds	r3, r6, #4
 80028f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f002 fe3b 	bl	8005570 <USB_CoreInit>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0d7      	b.n	8002abc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fe8f 	bl	8005636 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e04a      	b.n	80029b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	333d      	adds	r3, #61	; 0x3d
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	333c      	adds	r3, #60	; 0x3c
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	b298      	uxth	r0, r3
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3342      	adds	r3, #66	; 0x42
 800295a:	4602      	mov	r2, r0
 800295c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	333f      	adds	r3, #63	; 0x3f
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3344      	adds	r3, #68	; 0x44
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3348      	adds	r3, #72	; 0x48
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3350      	adds	r3, #80	; 0x50
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	3301      	adds	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3af      	bcc.n	800291e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e044      	b.n	8002a4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d3b5      	bcc.n	80029c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	687e      	ldr	r6, [r7, #4]
 8002a60:	466d      	mov	r5, sp
 8002a62:	f106 0410 	add.w	r4, r6, #16
 8002a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a76:	1d33      	adds	r3, r6, #4
 8002a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f002 fe06 	bl	800568c <USB_DevInit>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e014      	b.n	8002abc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f80a 	bl	8002ac4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 ff96 	bl	80059e6 <USB_DevDisconnect>

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af6:	f043 0303 	orr.w	r3, r3, #3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40007000 	.word	0x40007000

08002b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b56:	d130      	bne.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b64:	d038      	beq.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2232      	movs	r2, #50	; 0x32
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	3301      	adds	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8c:	e002      	b.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba0:	d102      	bne.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f2      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d110      	bne.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e00f      	b.n	8002bda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d007      	beq.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd0:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40007000 	.word	0x40007000
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c02:	6053      	str	r3, [r2, #4]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40007000 	.word	0x40007000

08002c14 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c1c:	f7ff f940 	bl	8001ea0 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e06f      	b.n	8002d0c <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_QSPI_Init+0x28>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e067      	b.n	8002d0c <HAL_QSPI_Init+0xf8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe fe39 	bl	80018d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f858 	bl	8002d18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f850 	bl	8002d34 <QSPI_WaitFlagStateUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c98:	7afb      	ldrb	r3, [r7, #11]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d131      	bne.n	8002d02 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	f023 0310 	bic.w	r3, r3, #16
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6852      	ldr	r2, [r2, #4]
 8002cb0:	0611      	lsls	r1, r2, #24
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_QSPI_Init+0x100>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6912      	ldr	r2, [r2, #16]
 8002cce:	0411      	lsls	r1, r2, #16
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6952      	ldr	r2, [r2, #20]
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6992      	ldr	r2, [r2, #24]
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	ffe0f8fe 	.word	0xffe0f8fe

08002d18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d44:	e01a      	b.n	8002d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d016      	beq.n	8002d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7ff f8a7 	bl	8001ea0 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2204      	movs	r2, #4
 8002d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e00e      	b.n	8002d9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d1d6      	bne.n	8002d46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e3d4      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db6:	4ba1      	ldr	r3, [pc, #644]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc0:	4b9e      	ldr	r3, [pc, #632]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80e4 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_RCC_OscConfig+0x4a>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	f040 808b 	bne.w	8002efc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	f040 8087 	bne.w	8002efc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dee:	4b93      	ldr	r3, [pc, #588]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e3ac      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	4b8c      	ldr	r3, [pc, #560]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_RCC_OscConfig+0x7c>
 8002e16:	4b89      	ldr	r3, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1e:	e005      	b.n	8002e2c <HAL_RCC_OscConfig+0x88>
 8002e20:	4b86      	ldr	r3, [pc, #536]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d223      	bcs.n	8002e78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fd3f 	bl	80038b8 <RCC_SetFlashLatencyFromMSIRange>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e38d      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e44:	4b7d      	ldr	r3, [pc, #500]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a7c      	ldr	r2, [pc, #496]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e4a:	f043 0308 	orr.w	r3, r3, #8
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b7a      	ldr	r3, [pc, #488]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4977      	ldr	r1, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e62:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	4972      	ldr	r1, [pc, #456]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
 8002e76:	e025      	b.n	8002ec4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e78:	4b70      	ldr	r3, [pc, #448]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6f      	ldr	r2, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b6d      	ldr	r3, [pc, #436]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	496a      	ldr	r1, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e96:	4b69      	ldr	r3, [pc, #420]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	4965      	ldr	r1, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fcff 	bl	80038b8 <RCC_SetFlashLatencyFromMSIRange>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e34d      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec4:	f000 fc36 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	4b5c      	ldr	r3, [pc, #368]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	4a5a      	ldr	r2, [pc, #360]	; (8003040 <HAL_RCC_OscConfig+0x29c>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa21 f303 	lsr.w	r3, r1, r3
 8002ee0:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x2a0>)
 8002ee2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee4:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_RCC_OscConfig+0x2a4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe ff8d 	bl	8001e08 <HAL_InitTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d052      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	e331      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d032      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f04:	4b4d      	ldr	r3, [pc, #308]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a4c      	ldr	r2, [pc, #304]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f10:	f7fe ffc6 	bl	8001ea0 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f18:	f7fe ffc2 	bl	8001ea0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e31a      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2a:	4b44      	ldr	r3, [pc, #272]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a40      	ldr	r2, [pc, #256]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	493b      	ldr	r1, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f54:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	4936      	ldr	r1, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e01a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f76:	f7fe ff93 	bl	8001ea0 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7e:	f7fe ff8f 	bl	8001ea0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e2e7      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x1da>
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d074      	beq.n	8003096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x21a>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d064      	beq.n	8003094 <HAL_RCC_OscConfig+0x2f0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d160      	bne.n	8003094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e2c4      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x24a>
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e01d      	b.n	800302a <HAL_RCC_OscConfig+0x286>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x26e>
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0f      	ldr	r2, [pc, #60]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8002ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x298>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x286>
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a06      	ldr	r2, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x298>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01c      	beq.n	800306c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe ff35 	bl	8001ea0 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003038:	e011      	b.n	800305e <HAL_RCC_OscConfig+0x2ba>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	08005b48 	.word	0x08005b48
 8003044:	20000000 	.word	0x20000000
 8003048:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe ff28 	bl	8001ea0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e280      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305e:	4baf      	ldr	r3, [pc, #700]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2a8>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe ff18 	bl	8001ea0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe ff14 	bl	8001ea0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e26c      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003086:	4ba5      	ldr	r3, [pc, #660]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x2d0>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d060      	beq.n	8003164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x310>
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d119      	bne.n	80030e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d116      	bne.n	80030e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b4:	4b99      	ldr	r3, [pc, #612]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_OscConfig+0x328>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e249      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b93      	ldr	r3, [pc, #588]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	4990      	ldr	r1, [pc, #576]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e0:	e040      	b.n	8003164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d023      	beq.n	8003132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ea:	4b8c      	ldr	r3, [pc, #560]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a8b      	ldr	r2, [pc, #556]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fed3 	bl	8001ea0 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fecf 	bl	8001ea0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e227      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003110:	4b82      	ldr	r3, [pc, #520]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b7f      	ldr	r3, [pc, #508]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	497c      	ldr	r1, [pc, #496]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
 8003130:	e018      	b.n	8003164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003132:	4b7a      	ldr	r3, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a79      	ldr	r2, [pc, #484]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe feaf 	bl	8001ea0 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe feab 	bl	8001ea0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e203      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003158:	4b70      	ldr	r3, [pc, #448]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03c      	beq.n	80031ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003178:	4b68      	ldr	r3, [pc, #416]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	4a67      	ldr	r2, [pc, #412]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fe8a 	bl	8001ea0 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe fe86 	bl	8001ea0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1de      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a2:	4b5e      	ldr	r3, [pc, #376]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <HAL_RCC_OscConfig+0x3ec>
 80031b0:	e01b      	b.n	80031ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe fe6d 	bl	8001ea0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe fe69 	bl	8001ea0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1c1      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031dc:	4b4f      	ldr	r3, [pc, #316]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ef      	bne.n	80031ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80a6 	beq.w	8003344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031fc:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10d      	bne.n	8003224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b44      	ldr	r3, [pc, #272]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	4a43      	ldr	r2, [pc, #268]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
 8003214:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003224:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <HAL_RCC_OscConfig+0x57c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d118      	bne.n	8003262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x57c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <HAL_RCC_OscConfig+0x57c>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323c:	f7fe fe30 	bl	8001ea0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe fe2c 	bl	8001ea0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e184      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003256:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_RCC_OscConfig+0x57c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <HAL_RCC_OscConfig+0x4d8>
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a2a      	ldr	r2, [pc, #168]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327a:	e024      	b.n	80032c6 <HAL_RCC_OscConfig+0x522>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d110      	bne.n	80032a6 <HAL_RCC_OscConfig+0x502>
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a24      	ldr	r2, [pc, #144]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCC_OscConfig+0x578>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <HAL_RCC_OscConfig+0x578>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a4:	e00f      	b.n	80032c6 <HAL_RCC_OscConfig+0x522>
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	4a17      	ldr	r2, [pc, #92]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80032be:	f023 0304 	bic.w	r3, r3, #4
 80032c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fe fde7 	bl	8001ea0 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fde3 	bl	8001ea0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e139      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x578>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ed      	beq.n	80032d6 <HAL_RCC_OscConfig+0x532>
 80032fa:	e01a      	b.n	8003332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fdd0 	bl	8001ea0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003302:	e00f      	b.n	8003324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fe fdcc 	bl	8001ea0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d906      	bls.n	8003324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e122      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003324:	4b90      	ldr	r3, [pc, #576]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e8      	bne.n	8003304 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	4a8a      	ldr	r2, [pc, #552]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800333e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003342:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8108 	beq.w	800355e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	2b02      	cmp	r3, #2
 8003354:	f040 80d0 	bne.w	80034f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003358:	4b83      	ldr	r3, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	429a      	cmp	r2, r3
 800336a:	d130      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	3b01      	subs	r3, #1
 8003378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d127      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d11f      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003398:	2a07      	cmp	r2, #7
 800339a:	bf14      	ite	ne
 800339c:	2201      	movne	r2, #1
 800339e:	2200      	moveq	r2, #0
 80033a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d109      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	3b01      	subs	r3, #1
 80033c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d06e      	beq.n	80034ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d069      	beq.n	80034a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d4:	4b64      	ldr	r3, [pc, #400]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033e0:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b7      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033f0:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a5c      	ldr	r2, [pc, #368]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033fc:	f7fe fd50 	bl	8001ea0 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fd4c 	bl	8001ea0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0a4      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCC_OscConfig+0x7c8>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003432:	3a01      	subs	r2, #1
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800343c:	0212      	lsls	r2, r2, #8
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0552      	lsls	r2, r2, #21
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0652      	lsls	r2, r2, #25
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800345c:	0912      	lsrs	r2, r2, #4
 800345e:	0452      	lsls	r2, r2, #17
 8003460:	430a      	orrs	r2, r1
 8003462:	4941      	ldr	r1, [pc, #260]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3e      	ldr	r2, [pc, #248]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003474:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003480:	f7fe fd0e 	bl	8001ea0 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fe fd0a 	bl	8001ea0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e062      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a6:	e05a      	b.n	800355e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e059      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ac:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d152      	bne.n	800355e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c4:	4b28      	ldr	r3, [pc, #160]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a27      	ldr	r2, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d0:	f7fe fce6 	bl	8001ea0 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe fce2 	bl	8001ea0 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e03a      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x734>
 80034f6:	e032      	b.n	800355e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d02d      	beq.n	800355a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a19      	ldr	r2, [pc, #100]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003508:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800350a:	4b17      	ldr	r3, [pc, #92]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800351c:	f023 0303 	bic.w	r3, r3, #3
 8003520:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 8003528:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800352c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003530:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe fcb5 	bl	8001ea0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353a:	f7fe fcb1 	bl	8001ea0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e009      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x7c4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x796>
 8003558:	e001      	b.n	800355e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	f99d808c 	.word	0xf99d808c

08003570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0c8      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b66      	ldr	r3, [pc, #408]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d910      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b63      	ldr	r3, [pc, #396]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4961      	ldr	r1, [pc, #388]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b0      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d04c      	beq.n	800365a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c8:	4b56      	ldr	r3, [pc, #344]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d121      	bne.n	8003618 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e09e      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e0:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d115      	bne.n	8003618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e092      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f8:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e086      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003608:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e07e      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 0203 	bic.w	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	493f      	ldr	r1, [pc, #252]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362a:	f7fe fc39 	bl	8001ea0 <HAL_GetTick>
 800362e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003630:	e00a      	b.n	8003648 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003632:	f7fe fc35 	bl	8001ea0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e066      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 020c 	and.w	r2, r3, #12
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	429a      	cmp	r2, r3
 8003658:	d1eb      	bne.n	8003632 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003666:	4b2f      	ldr	r3, [pc, #188]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	492c      	ldr	r1, [pc, #176]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d210      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	4924      	ldr	r1, [pc, #144]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_RCC_ClockConfig+0x1b0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e036      	b.n	8003716 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4918      	ldr	r1, [pc, #96]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4910      	ldr	r1, [pc, #64]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e6:	f000 f825 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036ea:	4601      	mov	r1, r0
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_RCC_ClockConfig+0x1b4>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	5cd3      	ldrb	r3, [r2, r3]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fb7c 	bl	8001e08 <HAL_InitTick>
 8003710:	4603      	mov	r3, r0
 8003712:	72fb      	strb	r3, [r7, #11]

  return status;
 8003714:	7afb      	ldrb	r3, [r7, #11]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40022000 	.word	0x40022000
 8003724:	40021000 	.word	0x40021000
 8003728:	08005b48 	.word	0x08005b48
 800372c:	20000000 	.word	0x20000000
 8003730:	20000004 	.word	0x20000004

08003734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x34>
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d121      	bne.n	80037a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d11e      	bne.n	80037a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003768:	4b33      	ldr	r3, [pc, #204]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d107      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003774:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e005      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003790:	4a2a      	ldr	r2, [pc, #168]	; (800383c <HAL_RCC_GetSysClockFreq+0x108>)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10d      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d102      	bne.n	80037b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	e004      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d133      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0xa4>
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0xaa>
 80037d6:	e005      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037da:	617b      	str	r3, [r7, #20]
      break;
 80037dc:	e005      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_GetSysClockFreq+0x110>)
 80037e0:	617b      	str	r3, [r7, #20]
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	617b      	str	r3, [r7, #20]
      break;
 80037e8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	3301      	adds	r3, #1
 80037f6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	fb02 f203 	mul.w	r2, r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_GetSysClockFreq+0x104>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0e5b      	lsrs	r3, r3, #25
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800382a:	69bb      	ldr	r3, [r7, #24]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3724      	adds	r7, #36	; 0x24
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40021000 	.word	0x40021000
 800383c:	08005b60 	.word	0x08005b60
 8003840:	00f42400 	.word	0x00f42400
 8003844:	007a1200 	.word	0x007a1200

08003848 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <HAL_RCC_GetHCLKFreq+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003864:	f7ff fff0 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003868:	4601      	mov	r1, r0
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	08005b58 	.word	0x08005b58

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003890:	f7ff ffda 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003894:	4601      	mov	r1, r0
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0adb      	lsrs	r3, r3, #11
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08005b58 	.word	0x08005b58

080038b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038c0:	2300      	movs	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038c4:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038d0:	f7ff f92c 	bl	8002b2c <HAL_PWREx_GetVoltageRange>
 80038d4:	6178      	str	r0, [r7, #20]
 80038d6:	e014      	b.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	4a24      	ldr	r2, [pc, #144]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6593      	str	r3, [r2, #88]	; 0x58
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038f0:	f7ff f91c 	bl	8002b2c <HAL_PWREx_GetVoltageRange>
 80038f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003900:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d10b      	bne.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d919      	bls.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2ba0      	cmp	r3, #160	; 0xa0
 8003914:	d902      	bls.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003916:	2302      	movs	r3, #2
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e013      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800391c:	2301      	movs	r3, #1
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e010      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d902      	bls.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003928:	2303      	movs	r3, #3
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e00a      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d102      	bne.n	800393a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003934:	2302      	movs	r3, #2
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	e004      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b70      	cmp	r3, #112	; 0x70
 800393e:	d101      	bne.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003940:	2301      	movs	r3, #1
 8003942:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	4909      	ldr	r1, [pc, #36]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	40022000 	.word	0x40022000

08003978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003980:	2300      	movs	r3, #0
 8003982:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003984:	2300      	movs	r3, #0
 8003986:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03f      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399c:	d01c      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a2:	d802      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80039a8:	e01f      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80039aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ae:	d003      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80039b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039b4:	d01c      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80039b6:	e018      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b8:	4b85      	ldr	r3, [pc, #532]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a84      	ldr	r2, [pc, #528]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fac9 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d6:	e00c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3320      	adds	r3, #32
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fbb0 	bl	8004144 <RCCEx_PLLSAI2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	74fb      	strb	r3, [r7, #19]
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80039f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f8:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a06:	4972      	ldr	r1, [pc, #456]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a0e:	e001      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d03f      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a28:	d01c      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a2e:	d802      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00e      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003a34:	e01f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a3a:	d003      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003a3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a40:	d01c      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003a42:	e018      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a44:	4b62      	ldr	r3, [pc, #392]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a61      	ldr	r2, [pc, #388]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a50:	e015      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fa83 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a62:	e00c      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3320      	adds	r3, #32
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fb6a 	bl	8004144 <RCCEx_PLLSAI2_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	74fb      	strb	r3, [r7, #19]
      break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a84:	4b52      	ldr	r3, [pc, #328]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a92:	494f      	ldr	r1, [pc, #316]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a0 	beq.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3a      	ldr	r2, [pc, #232]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af0:	f7fe f9d6 	bl	8001ea0 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af6:	e009      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fe f9d2 	bl	8001ea0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	74fb      	strb	r3, [r7, #19]
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b0c:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d15c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b1e:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01f      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d019      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b3c:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe f991 	bl	8001ea0 <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b80:	e00b      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe f98d 	bl	8001ea0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d902      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	74fb      	strb	r3, [r7, #19]
            break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ec      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbe:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bc6:	e009      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bdc:	7c7b      	ldrb	r3, [r7, #17]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b9e      	ldr	r3, [pc, #632]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	4a9d      	ldr	r2, [pc, #628]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bfa:	4b98      	ldr	r3, [pc, #608]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f023 0203 	bic.w	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	4994      	ldr	r1, [pc, #592]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f023 020c 	bic.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	498c      	ldr	r1, [pc, #560]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3e:	4b87      	ldr	r3, [pc, #540]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	4983      	ldr	r1, [pc, #524]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c60:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	497b      	ldr	r1, [pc, #492]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	4972      	ldr	r1, [pc, #456]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca4:	4b6d      	ldr	r3, [pc, #436]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	496a      	ldr	r1, [pc, #424]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	4961      	ldr	r1, [pc, #388]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce8:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	4959      	ldr	r1, [pc, #356]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0a:	4b54      	ldr	r3, [pc, #336]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	4950      	ldr	r1, [pc, #320]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	4948      	ldr	r1, [pc, #288]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	493f      	ldr	r1, [pc, #252]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d028      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d70:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7e:	4937      	ldr	r1, [pc, #220]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b32      	ldr	r3, [pc, #200]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]
 8003d9c:	e011      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f8d8 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d028      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	491f      	ldr	r1, [pc, #124]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dec:	d106      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df8:	60d3      	str	r3, [r2, #12]
 8003dfa:	e011      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f8a9 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a02      	ldr	r2, [pc, #8]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e56:	60d3      	str	r3, [r2, #12]
 8003e58:	e014      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f877 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02f      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e90:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9e:	4928      	ldr	r1, [pc, #160]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eae:	d10d      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f854 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	74bb      	strb	r3, [r7, #18]
 8003eca:	e011      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3320      	adds	r3, #32
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f931 	bl	8004144 <RCCEx_PLLSAI2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f0a:	490d      	ldr	r1, [pc, #52]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2e:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000

08003f44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f72:	4b73      	ldr	r3, [pc, #460]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d018      	beq.n	8003fb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f7e:	4b70      	ldr	r3, [pc, #448]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0203 	and.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d10d      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
       ||
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f96:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d044      	beq.n	8004034 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	e041      	b.n	8004034 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d00c      	beq.n	8003fd2 <RCCEx_PLLSAI1_Config+0x6e>
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d013      	beq.n	8003fe4 <RCCEx_PLLSAI1_Config+0x80>
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d120      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fc0:	4b5f      	ldr	r3, [pc, #380]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11d      	bne.n	8004008 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd0:	e01a      	b.n	8004008 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fd2:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe2:	e013      	b.n	800400c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fe4:	4b56      	ldr	r3, [pc, #344]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10f      	bne.n	8004010 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004000:	e006      	b.n	8004010 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
      break;
 8004006:	e004      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004008:	bf00      	nop
 800400a:	e002      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004010:	bf00      	nop
    }

    if(status == HAL_OK)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10d      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004018:	4b49      	ldr	r3, [pc, #292]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6819      	ldr	r1, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	3b01      	subs	r3, #1
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	430b      	orrs	r3, r1
 800402e:	4944      	ldr	r1, [pc, #272]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d17d      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a40      	ldr	r2, [pc, #256]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004040:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004046:	f7fd ff2b 	bl	8001ea0 <HAL_GetTick>
 800404a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800404c:	e009      	b.n	8004062 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800404e:	f7fd ff27 	bl	8001ea0 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d902      	bls.n	8004062 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	73fb      	strb	r3, [r7, #15]
        break;
 8004060:	e005      	b.n	800406e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004062:	4b37      	ldr	r3, [pc, #220]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ef      	bne.n	800404e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d160      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d111      	bne.n	800409e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	0211      	lsls	r1, r2, #8
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68d2      	ldr	r2, [r2, #12]
 8004090:	0912      	lsrs	r2, r2, #4
 8004092:	0452      	lsls	r2, r2, #17
 8004094:	430a      	orrs	r2, r1
 8004096:	492a      	ldr	r1, [pc, #168]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]
 800409c:	e027      	b.n	80040ee <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d112      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a4:	4b26      	ldr	r3, [pc, #152]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	0211      	lsls	r1, r2, #8
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6912      	ldr	r2, [r2, #16]
 80040ba:	0852      	lsrs	r2, r2, #1
 80040bc:	3a01      	subs	r2, #1
 80040be:	0552      	lsls	r2, r2, #21
 80040c0:	430a      	orrs	r2, r1
 80040c2:	491f      	ldr	r1, [pc, #124]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	610b      	str	r3, [r1, #16]
 80040c8:	e011      	b.n	80040ee <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ca:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6892      	ldr	r2, [r2, #8]
 80040da:	0211      	lsls	r1, r2, #8
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6952      	ldr	r2, [r2, #20]
 80040e0:	0852      	lsrs	r2, r2, #1
 80040e2:	3a01      	subs	r2, #1
 80040e4:	0652      	lsls	r2, r2, #25
 80040e6:	430a      	orrs	r2, r1
 80040e8:	4915      	ldr	r1, [pc, #84]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a13      	ldr	r2, [pc, #76]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fd fed1 	bl	8001ea0 <HAL_GetTick>
 80040fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004100:	e009      	b.n	8004116 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004102:	f7fd fecd 	bl	8001ea0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d902      	bls.n	8004116 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	73fb      	strb	r3, [r7, #15]
          break;
 8004114:	e005      	b.n	8004122 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0ef      	beq.n	8004102 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4903      	ldr	r1, [pc, #12]	; (8004140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004136:	7bfb      	ldrb	r3, [r7, #15]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000

08004144 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004152:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d018      	beq.n	8004190 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800415e:	4b65      	ldr	r3, [pc, #404]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0203 	and.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d10d      	bne.n	800418a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
       ||
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004176:	4b5f      	ldr	r3, [pc, #380]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
       ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d044      	beq.n	8004214 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	e041      	b.n	8004214 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d00c      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0x6e>
 8004198:	2b03      	cmp	r3, #3
 800419a:	d013      	beq.n	80041c4 <RCCEx_PLLSAI2_Config+0x80>
 800419c:	2b01      	cmp	r3, #1
 800419e:	d120      	bne.n	80041e2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041a0:	4b54      	ldr	r3, [pc, #336]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d11d      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e01a      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b2:	4b50      	ldr	r3, [pc, #320]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c2:	e013      	b.n	80041ec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10f      	bne.n	80041f0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041d0:	4b48      	ldr	r3, [pc, #288]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041e0:	e006      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
      break;
 80041e6:	e004      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041e8:	bf00      	nop
 80041ea:	e002      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041ec:	bf00      	nop
 80041ee:	e000      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10d      	bne.n	8004214 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f8:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	3b01      	subs	r3, #1
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	430b      	orrs	r3, r1
 800420e:	4939      	ldr	r1, [pc, #228]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d167      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a35      	ldr	r2, [pc, #212]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004226:	f7fd fe3b 	bl	8001ea0 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800422c:	e009      	b.n	8004242 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800422e:	f7fd fe37 	bl	8001ea0 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d902      	bls.n	8004242 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	73fb      	strb	r3, [r7, #15]
        break;
 8004240:	e005      	b.n	800424e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004242:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1ef      	bne.n	800422e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d14a      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d111      	bne.n	800427e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6892      	ldr	r2, [r2, #8]
 800426a:	0211      	lsls	r1, r2, #8
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68d2      	ldr	r2, [r2, #12]
 8004270:	0912      	lsrs	r2, r2, #4
 8004272:	0452      	lsls	r2, r2, #17
 8004274:	430a      	orrs	r2, r1
 8004276:	491f      	ldr	r1, [pc, #124]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	614b      	str	r3, [r1, #20]
 800427c:	e011      	b.n	80042a2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800427e:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004286:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	0211      	lsls	r1, r2, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6912      	ldr	r2, [r2, #16]
 8004294:	0852      	lsrs	r2, r2, #1
 8004296:	3a01      	subs	r2, #1
 8004298:	0652      	lsls	r2, r2, #25
 800429a:	430a      	orrs	r2, r1
 800429c:	4915      	ldr	r1, [pc, #84]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fd fdf7 	bl	8001ea0 <HAL_GetTick>
 80042b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b4:	e009      	b.n	80042ca <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042b6:	f7fd fdf3 	bl	8001ea0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d902      	bls.n	80042ca <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	73fb      	strb	r3, [r7, #15]
          break;
 80042c8:	e005      	b.n	80042d6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ef      	beq.n	80042b6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	4903      	ldr	r1, [pc, #12]	; (80042f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000

080042f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e07c      	b.n	8004404 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fd fb17 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004340:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800434a:	d902      	bls.n	8004352 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e002      	b.n	8004358 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004360:	d007      	beq.n	8004372 <HAL_SPI_Init+0x7a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800436a:	d002      	beq.n	8004372 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004382:	d903      	bls.n	800438c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
 800438a:	e002      	b.n	8004392 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	ea42 0103 	orr.w	r1, r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0204 	and.w	r2, r3, #4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	ea42 0103 	orr.w	r1, r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e040      	b.n	80044a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd fad6 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f82c 	bl	80044a8 <UART_SetConfig>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e022      	b.n	80044a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fb92 	bl	8004b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fc19 	bl	8004cd0 <UART_CheckIdleState>
 800449e:	4603      	mov	r3, r0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80044ac:	b08a      	sub	sp, #40	; 0x28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4bb8      	ldr	r3, [pc, #736]	; (80047c0 <UART_SetConfig+0x318>)
 80044de:	4013      	ands	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e6:	430b      	orrs	r3, r1
 80044e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4aae      	ldr	r2, [pc, #696]	; (80047c4 <UART_SetConfig+0x31c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	4313      	orrs	r3, r2
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4aa5      	ldr	r2, [pc, #660]	; (80047c8 <UART_SetConfig+0x320>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d126      	bne.n	8004586 <UART_SetConfig+0xde>
 8004538:	4ba4      	ldr	r3, [pc, #656]	; (80047cc <UART_SetConfig+0x324>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b03      	cmp	r3, #3
 8004544:	d81a      	bhi.n	800457c <UART_SetConfig+0xd4>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0xa4>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	0800455d 	.word	0x0800455d
 8004550:	0800456d 	.word	0x0800456d
 8004554:	08004565 	.word	0x08004565
 8004558:	08004575 	.word	0x08004575
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e105      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004564:	2302      	movs	r3, #2
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e101      	b.n	8004770 <UART_SetConfig+0x2c8>
 800456c:	2304      	movs	r3, #4
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e0fd      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004574:	2308      	movs	r3, #8
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e0f9      	b.n	8004770 <UART_SetConfig+0x2c8>
 800457c:	2310      	movs	r3, #16
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004582:	bf00      	nop
 8004584:	e0f4      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a91      	ldr	r2, [pc, #580]	; (80047d0 <UART_SetConfig+0x328>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d138      	bne.n	8004602 <UART_SetConfig+0x15a>
 8004590:	4b8e      	ldr	r3, [pc, #568]	; (80047cc <UART_SetConfig+0x324>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d82c      	bhi.n	80045f8 <UART_SetConfig+0x150>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0xfc>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045f9 	.word	0x080045f9
 80045ac:	080045f9 	.word	0x080045f9
 80045b0:	080045f9 	.word	0x080045f9
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	080045f9 	.word	0x080045f9
 80045bc:	080045f9 	.word	0x080045f9
 80045c0:	080045f9 	.word	0x080045f9
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045f9 	.word	0x080045f9
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	080045f1 	.word	0x080045f1
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045de:	e0c7      	b.n	8004770 <UART_SetConfig+0x2c8>
 80045e0:	2302      	movs	r3, #2
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e0c3      	b.n	8004770 <UART_SetConfig+0x2c8>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e0bf      	b.n	8004770 <UART_SetConfig+0x2c8>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f6:	e0bb      	b.n	8004770 <UART_SetConfig+0x2c8>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fe:	bf00      	nop
 8004600:	e0b6      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a73      	ldr	r2, [pc, #460]	; (80047d4 <UART_SetConfig+0x32c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d125      	bne.n	8004658 <UART_SetConfig+0x1b0>
 800460c:	4b6f      	ldr	r3, [pc, #444]	; (80047cc <UART_SetConfig+0x324>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004616:	2b10      	cmp	r3, #16
 8004618:	d011      	beq.n	800463e <UART_SetConfig+0x196>
 800461a:	2b10      	cmp	r3, #16
 800461c:	d802      	bhi.n	8004624 <UART_SetConfig+0x17c>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <UART_SetConfig+0x186>
 8004622:	e014      	b.n	800464e <UART_SetConfig+0x1a6>
 8004624:	2b20      	cmp	r3, #32
 8004626:	d006      	beq.n	8004636 <UART_SetConfig+0x18e>
 8004628:	2b30      	cmp	r3, #48	; 0x30
 800462a:	d00c      	beq.n	8004646 <UART_SetConfig+0x19e>
 800462c:	e00f      	b.n	800464e <UART_SetConfig+0x1a6>
 800462e:	2300      	movs	r3, #0
 8004630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004634:	e09c      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004636:	2302      	movs	r3, #2
 8004638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463c:	e098      	b.n	8004770 <UART_SetConfig+0x2c8>
 800463e:	2304      	movs	r3, #4
 8004640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004644:	e094      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004646:	2308      	movs	r3, #8
 8004648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464c:	e090      	b.n	8004770 <UART_SetConfig+0x2c8>
 800464e:	2310      	movs	r3, #16
 8004650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004654:	bf00      	nop
 8004656:	e08b      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a5e      	ldr	r2, [pc, #376]	; (80047d8 <UART_SetConfig+0x330>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d125      	bne.n	80046ae <UART_SetConfig+0x206>
 8004662:	4b5a      	ldr	r3, [pc, #360]	; (80047cc <UART_SetConfig+0x324>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d011      	beq.n	8004694 <UART_SetConfig+0x1ec>
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d802      	bhi.n	800467a <UART_SetConfig+0x1d2>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <UART_SetConfig+0x1dc>
 8004678:	e014      	b.n	80046a4 <UART_SetConfig+0x1fc>
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d006      	beq.n	800468c <UART_SetConfig+0x1e4>
 800467e:	2bc0      	cmp	r3, #192	; 0xc0
 8004680:	d00c      	beq.n	800469c <UART_SetConfig+0x1f4>
 8004682:	e00f      	b.n	80046a4 <UART_SetConfig+0x1fc>
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e071      	b.n	8004770 <UART_SetConfig+0x2c8>
 800468c:	2302      	movs	r3, #2
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e06d      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e069      	b.n	8004770 <UART_SetConfig+0x2c8>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e065      	b.n	8004770 <UART_SetConfig+0x2c8>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	bf00      	nop
 80046ac:	e060      	b.n	8004770 <UART_SetConfig+0x2c8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4a      	ldr	r2, [pc, #296]	; (80047dc <UART_SetConfig+0x334>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d129      	bne.n	800470c <UART_SetConfig+0x264>
 80046b8:	4b44      	ldr	r3, [pc, #272]	; (80047cc <UART_SetConfig+0x324>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c6:	d014      	beq.n	80046f2 <UART_SetConfig+0x24a>
 80046c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046cc:	d802      	bhi.n	80046d4 <UART_SetConfig+0x22c>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <UART_SetConfig+0x23a>
 80046d2:	e016      	b.n	8004702 <UART_SetConfig+0x25a>
 80046d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d8:	d007      	beq.n	80046ea <UART_SetConfig+0x242>
 80046da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046de:	d00c      	beq.n	80046fa <UART_SetConfig+0x252>
 80046e0:	e00f      	b.n	8004702 <UART_SetConfig+0x25a>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e8:	e042      	b.n	8004770 <UART_SetConfig+0x2c8>
 80046ea:	2302      	movs	r3, #2
 80046ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f0:	e03e      	b.n	8004770 <UART_SetConfig+0x2c8>
 80046f2:	2304      	movs	r3, #4
 80046f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f8:	e03a      	b.n	8004770 <UART_SetConfig+0x2c8>
 80046fa:	2308      	movs	r3, #8
 80046fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004700:	e036      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004702:	2310      	movs	r3, #16
 8004704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004708:	bf00      	nop
 800470a:	e031      	b.n	8004770 <UART_SetConfig+0x2c8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <UART_SetConfig+0x31c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d129      	bne.n	800476a <UART_SetConfig+0x2c2>
 8004716:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <UART_SetConfig+0x324>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d014      	beq.n	8004750 <UART_SetConfig+0x2a8>
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472a:	d802      	bhi.n	8004732 <UART_SetConfig+0x28a>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <UART_SetConfig+0x298>
 8004730:	e016      	b.n	8004760 <UART_SetConfig+0x2b8>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004736:	d007      	beq.n	8004748 <UART_SetConfig+0x2a0>
 8004738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800473c:	d00c      	beq.n	8004758 <UART_SetConfig+0x2b0>
 800473e:	e00f      	b.n	8004760 <UART_SetConfig+0x2b8>
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e013      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004748:	2302      	movs	r3, #2
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e00f      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004750:	2304      	movs	r3, #4
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e00b      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004758:	2308      	movs	r3, #8
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e007      	b.n	8004770 <UART_SetConfig+0x2c8>
 8004760:	2310      	movs	r3, #16
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <UART_SetConfig+0x2c8>
 800476a:	2310      	movs	r3, #16
 800476c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <UART_SetConfig+0x31c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	f040 80fe 	bne.w	8004978 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800477c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004780:	2b08      	cmp	r3, #8
 8004782:	d837      	bhi.n	80047f4 <UART_SetConfig+0x34c>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x2e4>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047f5 	.word	0x080047f5
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047f5 	.word	0x080047f5
 800479c:	080047e5 	.word	0x080047e5
 80047a0:	080047f5 	.word	0x080047f5
 80047a4:	080047f5 	.word	0x080047f5
 80047a8:	080047f5 	.word	0x080047f5
 80047ac:	080047ed 	.word	0x080047ed
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7ff f856 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 80047b4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047b6:	e020      	b.n	80047fa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <UART_SetConfig+0x338>)
 80047ba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047bc:	e01d      	b.n	80047fa <UART_SetConfig+0x352>
 80047be:	bf00      	nop
 80047c0:	efff69f3 	.word	0xefff69f3
 80047c4:	40008000 	.word	0x40008000
 80047c8:	40013800 	.word	0x40013800
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40004400 	.word	0x40004400
 80047d4:	40004800 	.word	0x40004800
 80047d8:	40004c00 	.word	0x40004c00
 80047dc:	40005000 	.word	0x40005000
 80047e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80047e4:	f7fe ffa6 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80047e8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047ea:	e006      	b.n	80047fa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80047ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047f2:	e002      	b.n	80047fa <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	76fb      	strb	r3, [r7, #27]
        break;
 80047f8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 81b9 	beq.w	8004b74 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	429a      	cmp	r2, r3
 8004810:	d305      	bcc.n	800481e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	429a      	cmp	r2, r3
 800481c:	d902      	bls.n	8004824 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	76fb      	strb	r3, [r7, #27]
 8004822:	e1a7      	b.n	8004b74 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004828:	2b08      	cmp	r3, #8
 800482a:	f200 8092 	bhi.w	8004952 <UART_SetConfig+0x4aa>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x38c>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004859 	.word	0x08004859
 8004838:	08004953 	.word	0x08004953
 800483c:	080048a7 	.word	0x080048a7
 8004840:	08004953 	.word	0x08004953
 8004844:	080048db 	.word	0x080048db
 8004848:	08004953 	.word	0x08004953
 800484c:	08004953 	.word	0x08004953
 8004850:	08004953 	.word	0x08004953
 8004854:	08004929 	.word	0x08004929
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7ff f802 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 800485c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f04f 0400 	mov.w	r4, #0
 800486e:	0214      	lsls	r4, r2, #8
 8004870:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004874:	020b      	lsls	r3, r1, #8
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6852      	ldr	r2, [r2, #4]
 800487a:	0852      	lsrs	r2, r2, #1
 800487c:	4611      	mov	r1, r2
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	eb13 0b01 	adds.w	fp, r3, r1
 8004886:	eb44 0c02 	adc.w	ip, r4, r2
 800488a:	4658      	mov	r0, fp
 800488c:	4661      	mov	r1, ip
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f04f 0400 	mov.w	r4, #0
 8004896:	461a      	mov	r2, r3
 8004898:	4623      	mov	r3, r4
 800489a:	f7fb fc95 	bl	80001c8 <__aeabi_uldivmod>
 800489e:	4603      	mov	r3, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80048a4:	e058      	b.n	8004958 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	49ae      	ldr	r1, [pc, #696]	; (8004b6c <UART_SetConfig+0x6c4>)
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	eb13 0b01 	adds.w	fp, r3, r1
 80048ba:	eb44 0c02 	adc.w	ip, r4, r2
 80048be:	4658      	mov	r0, fp
 80048c0:	4661      	mov	r1, ip
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f04f 0400 	mov.w	r4, #0
 80048ca:	461a      	mov	r2, r3
 80048cc:	4623      	mov	r3, r4
 80048ce:	f7fb fc7b 	bl	80001c8 <__aeabi_uldivmod>
 80048d2:	4603      	mov	r3, r0
 80048d4:	460c      	mov	r4, r1
 80048d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80048d8:	e03e      	b.n	8004958 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80048da:	f7fe ff2b 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80048de:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4619      	mov	r1, r3
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	f04f 0400 	mov.w	r4, #0
 80048f0:	0214      	lsls	r4, r2, #8
 80048f2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048f6:	020b      	lsls	r3, r1, #8
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6852      	ldr	r2, [r2, #4]
 80048fc:	0852      	lsrs	r2, r2, #1
 80048fe:	4611      	mov	r1, r2
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	eb13 0b01 	adds.w	fp, r3, r1
 8004908:	eb44 0c02 	adc.w	ip, r4, r2
 800490c:	4658      	mov	r0, fp
 800490e:	4661      	mov	r1, ip
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f04f 0400 	mov.w	r4, #0
 8004918:	461a      	mov	r2, r3
 800491a:	4623      	mov	r3, r4
 800491c:	f7fb fc54 	bl	80001c8 <__aeabi_uldivmod>
 8004920:	4603      	mov	r3, r0
 8004922:	460c      	mov	r4, r1
 8004924:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004926:	e017      	b.n	8004958 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	f04f 0400 	mov.w	r4, #0
 8004932:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004936:	f144 0100 	adc.w	r1, r4, #0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	f7fb fc3f 	bl	80001c8 <__aeabi_uldivmod>
 800494a:	4603      	mov	r3, r0
 800494c:	460c      	mov	r4, r1
 800494e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004950:	e002      	b.n	8004958 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	76fb      	strb	r3, [r7, #27]
            break;
 8004956:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495e:	d308      	bcc.n	8004972 <UART_SetConfig+0x4ca>
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004966:	d204      	bcs.n	8004972 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	e100      	b.n	8004b74 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	76fb      	strb	r3, [r7, #27]
 8004976:	e0fd      	b.n	8004b74 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004980:	f040 8084 	bne.w	8004a8c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004988:	2b08      	cmp	r3, #8
 800498a:	d85f      	bhi.n	8004a4c <UART_SetConfig+0x5a4>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <UART_SetConfig+0x4ec>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049d9 	.word	0x080049d9
 800499c:	080049f9 	.word	0x080049f9
 80049a0:	08004a4d 	.word	0x08004a4d
 80049a4:	08004a15 	.word	0x08004a15
 80049a8:	08004a4d 	.word	0x08004a4d
 80049ac:	08004a4d 	.word	0x08004a4d
 80049b0:	08004a4d 	.word	0x08004a4d
 80049b4:	08004a35 	.word	0x08004a35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7fe ff52 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 80049bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	005a      	lsls	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	441a      	add	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049d6:	e03c      	b.n	8004a52 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fe ff58 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 80049dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	005a      	lsls	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049f6:	e02c      	b.n	8004a52 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004a02:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6852      	ldr	r2, [r2, #4]
 8004a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a12:	e01e      	b.n	8004a52 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a14:	f7fe fe8e 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8004a18:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	005a      	lsls	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	441a      	add	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a32:	e00e      	b.n	8004a52 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a4a:	e002      	b.n	8004a52 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	76fb      	strb	r3, [r7, #27]
        break;
 8004a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b0f      	cmp	r3, #15
 8004a56:	d916      	bls.n	8004a86 <UART_SetConfig+0x5de>
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5e:	d212      	bcs.n	8004a86 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f023 030f 	bic.w	r3, r3, #15
 8004a68:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	89fa      	ldrh	r2, [r7, #14]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	e076      	b.n	8004b74 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	76fb      	strb	r3, [r7, #27]
 8004a8a:	e073      	b.n	8004b74 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d85c      	bhi.n	8004b4e <UART_SetConfig+0x6a6>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <UART_SetConfig+0x5f4>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004adf 	.word	0x08004adf
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004b4f 	.word	0x08004b4f
 8004aac:	08004b19 	.word	0x08004b19
 8004ab0:	08004b4f 	.word	0x08004b4f
 8004ab4:	08004b4f 	.word	0x08004b4f
 8004ab8:	08004b4f 	.word	0x08004b4f
 8004abc:	08004b37 	.word	0x08004b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f7fe fece 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	085a      	lsrs	r2, r3, #1
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	441a      	add	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004adc:	e03a      	b.n	8004b54 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ade:	f7fe fed5 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8004ae2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	085a      	lsrs	r2, r3, #1
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004afa:	e02b      	b.n	8004b54 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6852      	ldr	r2, [r2, #4]
 8004b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b16:	e01d      	b.n	8004b54 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b18:	f7fe fe0c 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8004b1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	085a      	lsrs	r2, r3, #1
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	441a      	add	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b34:	e00e      	b.n	8004b54 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b4c:	e002      	b.n	8004b54 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	76fb      	strb	r3, [r7, #27]
        break;
 8004b52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	d90a      	bls.n	8004b70 <UART_SetConfig+0x6c8>
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d206      	bcs.n	8004b70 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e003      	b.n	8004b74 <UART_SetConfig+0x6cc>
 8004b6c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004b80:	7efb      	ldrb	r3, [r7, #27]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3728      	adds	r7, #40	; 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d10a      	bne.n	8004ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004cde:	f7fd f8df 	bl	8001ea0 <HAL_GetTick>
 8004ce2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d10e      	bne.n	8004d10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f82a 	bl	8004d5a <UART_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e020      	b.n	8004d52 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d10e      	bne.n	8004d3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f814 	bl	8004d5a <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e00a      	b.n	8004d52 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6a:	e05d      	b.n	8004e28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d059      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d74:	f7fd f894 	bl	8001ea0 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d302      	bcc.n	8004d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d11b      	bne.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0201 	bic.w	r2, r2, #1
 8004da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e042      	b.n	8004e48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02b      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dde:	d123      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004de8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004df8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e00f      	b.n	8004e48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d092      	beq.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <LL_EXTI_EnableIT_0_31>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <LL_EXTI_EnableIT_0_31+0x20>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4904      	ldr	r1, [pc, #16]	; (8004e70 <LL_EXTI_EnableIT_0_31+0x20>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40010400 	.word	0x40010400

08004e74 <LL_EXTI_EnableIT_32_63>:
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <LL_EXTI_EnableIT_32_63+0x20>)
 8004e7e:	6a1a      	ldr	r2, [r3, #32]
 8004e80:	4904      	ldr	r1, [pc, #16]	; (8004e94 <LL_EXTI_EnableIT_32_63+0x20>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	620b      	str	r3, [r1, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40010400 	.word	0x40010400

08004e98 <LL_EXTI_DisableIT_0_31>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <LL_EXTI_DisableIT_0_31+0x24>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	4904      	ldr	r1, [pc, #16]	; (8004ebc <LL_EXTI_DisableIT_0_31+0x24>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <LL_EXTI_DisableIT_32_63>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <LL_EXTI_DisableIT_32_63+0x24>)
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	4904      	ldr	r1, [pc, #16]	; (8004ee4 <LL_EXTI_DisableIT_32_63+0x24>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	620b      	str	r3, [r1, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <LL_EXTI_EnableEvent_0_31>:
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4904      	ldr	r1, [pc, #16]	; (8004f08 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40010400 	.word	0x40010400

08004f0c <LL_EXTI_EnableEvent_32_63>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <LL_EXTI_EnableEvent_32_63+0x20>)
 8004f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f18:	4904      	ldr	r1, [pc, #16]	; (8004f2c <LL_EXTI_EnableEvent_32_63+0x20>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40010400 	.word	0x40010400

08004f30 <LL_EXTI_DisableEvent_0_31>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	4904      	ldr	r1, [pc, #16]	; (8004f54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010400 	.word	0x40010400

08004f58 <LL_EXTI_DisableEvent_32_63>:
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <LL_EXTI_DisableEvent_32_63+0x24>)
 8004f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <LL_EXTI_DisableEvent_32_63+0x24>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010400 	.word	0x40010400

08004f80 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	4904      	ldr	r1, [pc, #16]	; (8004fa0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40010400 	.word	0x40010400

08004fa4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004fae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb0:	4904      	ldr	r1, [pc, #16]	; (8004fc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40010400 	.word	0x40010400

08004fc8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	4904      	ldr	r1, [pc, #16]	; (8004fec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010400 	.word	0x40010400

08004ff0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	4904      	ldr	r1, [pc, #16]	; (8005014 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005002:	4013      	ands	r3, r2
 8005004:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40010400 	.word	0x40010400

08005018 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	4904      	ldr	r1, [pc, #16]	; (8005038 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4313      	orrs	r3, r2
 800502a:	60cb      	str	r3, [r1, #12]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40010400 	.word	0x40010400

0800503c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4904      	ldr	r1, [pc, #16]	; (800505c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4313      	orrs	r3, r2
 800504e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40010400 	.word	0x40010400

08005060 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	43db      	mvns	r3, r3
 8005070:	4904      	ldr	r1, [pc, #16]	; (8005084 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005072:	4013      	ands	r3, r2
 8005074:	60cb      	str	r3, [r1, #12]
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010400 	.word	0x40010400

08005088 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	43db      	mvns	r3, r3
 8005098:	4904      	ldr	r1, [pc, #16]	; (80050ac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800509a:	4013      	ands	r3, r2
 800509c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010400 	.word	0x40010400

080050b0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7a1b      	ldrb	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80c6 	beq.w	8005252 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d05d      	beq.n	800518a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	7a5b      	ldrb	r3, [r3, #9]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d00e      	beq.n	80050f4 <LL_EXTI_Init+0x44>
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d017      	beq.n	800510a <LL_EXTI_Init+0x5a>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d120      	bne.n	8005120 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ff24 	bl	8004f30 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff feaf 	bl	8004e50 <LL_EXTI_EnableIT_0_31>
          break;
 80050f2:	e018      	b.n	8005126 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fecd 	bl	8004e98 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fef0 	bl	8004ee8 <LL_EXTI_EnableEvent_0_31>
          break;
 8005108:	e00d      	b.n	8005126 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fe9e 	bl	8004e50 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fee5 	bl	8004ee8 <LL_EXTI_EnableEvent_0_31>
          break;
 800511e:	e002      	b.n	8005126 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8005120:	2301      	movs	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
          break;
 8005124:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	7a9b      	ldrb	r3, [r3, #10]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d02d      	beq.n	800518a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7a9b      	ldrb	r3, [r3, #10]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d00e      	beq.n	8005154 <LL_EXTI_Init+0xa4>
 8005136:	2b03      	cmp	r3, #3
 8005138:	d017      	beq.n	800516a <LL_EXTI_Init+0xba>
 800513a:	2b01      	cmp	r3, #1
 800513c:	d120      	bne.n	8005180 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ff8c 	bl	8005060 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ff17 	bl	8004f80 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005152:	e01b      	b.n	800518c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff ff35 	bl	8004fc8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff58 	bl	8005018 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005168:	e010      	b.n	800518c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff ff06 	bl	8004f80 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff ff4d 	bl	8005018 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800517e:	e005      	b.n	800518c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	60fb      	str	r3, [r7, #12]
            break;
 8005188:	e000      	b.n	800518c <LL_EXTI_Init+0xdc>
        }
      }
 800518a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d073      	beq.n	800527c <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7a5b      	ldrb	r3, [r3, #9]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d00e      	beq.n	80051ba <LL_EXTI_Init+0x10a>
 800519c:	2b02      	cmp	r3, #2
 800519e:	d017      	beq.n	80051d0 <LL_EXTI_Init+0x120>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d120      	bne.n	80051e6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fed5 	bl	8004f58 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff fe5e 	bl	8004e74 <LL_EXTI_EnableIT_32_63>
          break;
 80051b8:	e01a      	b.n	80051f0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fe7e 	bl	8004ec0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fe9f 	bl	8004f0c <LL_EXTI_EnableEvent_32_63>
          break;
 80051ce:	e00f      	b.n	80051f0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fe4d 	bl	8004e74 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fe94 	bl	8004f0c <LL_EXTI_EnableEvent_32_63>
          break;
 80051e4:	e004      	b.n	80051f0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f043 0304 	orr.w	r3, r3, #4
 80051ec:	60fb      	str	r3, [r7, #12]
          break;
 80051ee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	7a9b      	ldrb	r3, [r3, #10]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d041      	beq.n	800527c <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	7a9b      	ldrb	r3, [r3, #10]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d00e      	beq.n	800521e <LL_EXTI_Init+0x16e>
 8005200:	2b03      	cmp	r3, #3
 8005202:	d017      	beq.n	8005234 <LL_EXTI_Init+0x184>
 8005204:	2b01      	cmp	r3, #1
 8005206:	d120      	bne.n	800524a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff ff3b 	bl	8005088 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fec4 	bl	8004fa4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800521c:	e02f      	b.n	800527e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fee4 	bl	8004ff0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff ff05 	bl	800503c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005232:	e024      	b.n	800527e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff feb3 	bl	8004fa4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fefa 	bl	800503c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005248:	e019      	b.n	800527e <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]
            break;
 800524e:	bf00      	nop
 8005250:	e015      	b.n	800527e <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff fe1e 	bl	8004e98 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fe65 	bl	8004f30 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fe28 	bl	8004ec0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fe6f 	bl	8004f58 <LL_EXTI_DisableEvent_32_63>
 800527a:	e000      	b.n	800527e <LL_EXTI_Init+0x1ce>
      }
 800527c:	bf00      	nop
  }

  return status;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <LL_GPIO_SetPinMode>:
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	613b      	str	r3, [r7, #16]
  return result;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	2103      	movs	r1, #3
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	401a      	ands	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	fa93 f3a3 	rbit	r3, r3
 80052c2:	61bb      	str	r3, [r7, #24]
  return result;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	fab3 f383 	clz	r3, r3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	601a      	str	r2, [r3, #0]
}
 80052da:	bf00      	nop
 80052dc:	3724      	adds	r7, #36	; 0x24
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <LL_GPIO_SetPinOutputType>:
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	401a      	ands	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	605a      	str	r2, [r3, #4]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <LL_GPIO_SetPinSpeed>:
{
 8005316:	b480      	push	{r7}
 8005318:	b089      	sub	sp, #36	; 0x24
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	fa93 f3a3 	rbit	r3, r3
 8005330:	613b      	str	r3, [r7, #16]
  return result;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	2103      	movs	r1, #3
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	401a      	ands	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	fa93 f3a3 	rbit	r3, r3
 8005350:	61bb      	str	r3, [r7, #24]
  return result;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	431a      	orrs	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	3724      	adds	r7, #36	; 0x24
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <LL_GPIO_SetPinPull>:
{
 8005374:	b480      	push	{r7}
 8005376:	b089      	sub	sp, #36	; 0x24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	fa93 f3a3 	rbit	r3, r3
 800538e:	613b      	str	r3, [r7, #16]
  return result;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	2103      	movs	r1, #3
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	fa93 f3a3 	rbit	r3, r3
 80053ae:	61bb      	str	r3, [r7, #24]
  return result;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	fab3 f383 	clz	r3, r3
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	fa01 f303 	lsl.w	r3, r1, r3
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	60da      	str	r2, [r3, #12]
}
 80053c6:	bf00      	nop
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <LL_GPIO_SetAFPin_0_7>:
{
 80053d2:	b480      	push	{r7}
 80053d4:	b089      	sub	sp, #36	; 0x24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	fa93 f3a3 	rbit	r3, r3
 80053ec:	613b      	str	r3, [r7, #16]
  return result;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	fab3 f383 	clz	r3, r3
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	210f      	movs	r1, #15
 80053fa:	fa01 f303 	lsl.w	r3, r1, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	401a      	ands	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	fa93 f3a3 	rbit	r3, r3
 800540c:	61bb      	str	r3, [r7, #24]
  return result;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	431a      	orrs	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	3724      	adds	r7, #36	; 0x24
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <LL_GPIO_SetAFPin_8_15>:
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fa93 f3a3 	rbit	r3, r3
 800544c:	613b      	str	r3, [r7, #16]
  return result;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	fab3 f383 	clz	r3, r3
 8005454:	b2db      	uxtb	r3, r3
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	210f      	movs	r1, #15
 800545a:	fa01 f303 	lsl.w	r3, r1, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	401a      	ands	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	61bb      	str	r3, [r7, #24]
  return result;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	fab3 f383 	clz	r3, r3
 8005476:	b2db      	uxtb	r3, r3
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005486:	bf00      	nop
 8005488:	3724      	adds	r7, #36	; 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	60bb      	str	r3, [r7, #8]
  return result;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	fab3 f383 	clz	r3, r3
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80054b4:	e040      	b.n	8005538 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	2101      	movs	r1, #1
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d032      	beq.n	8005532 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	461a      	mov	r2, r3
 80054d2:	6939      	ldr	r1, [r7, #16]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fed7 	bl	8005288 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d003      	beq.n	80054ea <LL_GPIO_Init+0x58>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d106      	bne.n	80054f8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6939      	ldr	r1, [r7, #16]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff ff0f 	bl	8005316 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff ff37 	bl	8005374 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d111      	bne.n	8005532 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2bff      	cmp	r3, #255	; 0xff
 8005512:	d807      	bhi.n	8005524 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	461a      	mov	r2, r3
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff58 	bl	80053d2 <LL_GPIO_SetAFPin_0_7>
 8005522:	e006      	b.n	8005532 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	461a      	mov	r2, r3
 800552a:	6939      	ldr	r1, [r7, #16]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff7f 	bl	8005430 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3301      	adds	r3, #1
 8005536:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	fa22 f303 	lsr.w	r3, r2, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1b7      	bne.n	80054b6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d003      	beq.n	8005556 <LL_GPIO_Init+0xc4>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d107      	bne.n	8005566 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6819      	ldr	r1, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	461a      	mov	r2, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fec0 	bl	80052e6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005570:	b084      	sub	sp, #16
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	f107 001c 	add.w	r0, r7, #28
 800557e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2b01      	cmp	r3, #1
 8005586:	d122      	bne.n	80055ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800559c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa28 	bl	8005a18 <USB_CoreReset>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]
 80055cc:	e01a      	b.n	8005604 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa1c 	bl	8005a18 <USB_CoreReset>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
 80055f6:	e005      	b.n	8005604 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005610:	b004      	add	sp, #16
 8005612:	4770      	bx	lr

08005614 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f023 0201 	bic.w	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e00b      	b.n	800567a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e001      	b.n	800567a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e003      	b.n	8005682 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800567a:	2032      	movs	r0, #50	; 0x32
 800567c:	f7fc fc1c 	bl	8001eb8 <HAL_Delay>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800568c:	b084      	sub	sp, #16
 800568e:	b580      	push	{r7, lr}
 8005690:	b086      	sub	sp, #24
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800569a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e009      	b.n	80056c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3340      	adds	r3, #64	; 0x40
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b0e      	cmp	r3, #14
 80056c4:	d9f2      	bls.n	80056ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d11c      	bne.n	8005706 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e005      	b.n	8005712 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005718:	461a      	mov	r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005724:	4619      	mov	r1, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572c:	461a      	mov	r2, r3
 800572e:	680b      	ldr	r3, [r1, #0]
 8005730:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005732:	2103      	movs	r1, #3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f93d 	bl	80059b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800573a:	2110      	movs	r1, #16
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8f1 	bl	8005924 <USB_FlushTxFifo>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f90f 	bl	8005970 <USB_FlushRxFifo>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	461a      	mov	r2, r3
 8005764:	2300      	movs	r3, #0
 8005766:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577a:	461a      	mov	r2, r3
 800577c:	2300      	movs	r3, #0
 800577e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	e043      	b.n	800580e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579c:	d118      	bne.n	80057d0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e013      	b.n	80057e2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	461a      	mov	r2, r3
 80057c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e008      	b.n	80057e2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	461a      	mov	r2, r3
 80057de:	2300      	movs	r3, #0
 80057e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	461a      	mov	r2, r3
 8005802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3301      	adds	r3, #1
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d3b7      	bcc.n	8005786 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	e043      	b.n	80058a4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800582e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005832:	d118      	bne.n	8005866 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e013      	b.n	8005878 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	461a      	mov	r2, r3
 800585e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	e008      	b.n	8005878 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	461a      	mov	r2, r3
 8005874:	2300      	movs	r3, #0
 8005876:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	2300      	movs	r3, #0
 8005888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	461a      	mov	r2, r3
 8005898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800589c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3301      	adds	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3b7      	bcc.n	800581c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f043 0210 	orr.w	r2, r3, #16
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <USB_DevInit+0x294>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f043 0208 	orr.w	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800591a:	b004      	add	sp, #16
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	803c3800 	.word	0x803c3800

08005924 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	f043 0220 	orr.w	r2, r3, #32
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <USB_FlushTxFifo+0x48>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e006      	b.n	800595e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b20      	cmp	r3, #32
 800595a:	d0f0      	beq.n	800593e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	00030d40 	.word	0x00030d40

08005970 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2210      	movs	r2, #16
 8005980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <USB_FlushRxFifo+0x40>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e006      	b.n	80059a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b10      	cmp	r3, #16
 800599e:	d0f0      	beq.n	8005982 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	00030d40 	.word	0x00030d40

080059b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d4:	4313      	orrs	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a00:	f043 0302 	orr.w	r3, r3, #2
 8005a04:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005a06:	2003      	movs	r0, #3
 8005a08:	f7fc fa56 	bl	8001eb8 <HAL_Delay>

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a13      	ldr	r2, [pc, #76]	; (8005a7c <USB_CoreReset+0x64>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e01b      	b.n	8005a6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	daf2      	bge.n	8005a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <USB_CoreReset+0x64>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e006      	b.n	8005a6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d0f0      	beq.n	8005a4e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	00030d40 	.word	0x00030d40

08005a80 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <LL_mDelay+0x48>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005a92:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d00c      	beq.n	8005ab6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005aa2:	e008      	b.n	8005ab6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <LL_mDelay+0x48>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f3      	bne.n	8005aa4 <LL_mDelay+0x24>
    }
  }
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000e010 	.word	0xe000e010

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4e0d      	ldr	r6, [pc, #52]	; (8005b04 <__libc_init_array+0x38>)
 8005ad0:	4c0d      	ldr	r4, [pc, #52]	; (8005b08 <__libc_init_array+0x3c>)
 8005ad2:	1ba4      	subs	r4, r4, r6
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	42a5      	cmp	r5, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	4e0b      	ldr	r6, [pc, #44]	; (8005b0c <__libc_init_array+0x40>)
 8005ade:	4c0c      	ldr	r4, [pc, #48]	; (8005b10 <__libc_init_array+0x44>)
 8005ae0:	f000 f820 	bl	8005b24 <_init>
 8005ae4:	1ba4      	subs	r4, r4, r6
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	2500      	movs	r5, #0
 8005aea:	42a5      	cmp	r5, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005af4:	4798      	blx	r3
 8005af6:	3501      	adds	r5, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005afe:	4798      	blx	r3
 8005b00:	3501      	adds	r5, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	08005b98 	.word	0x08005b98
 8005b08:	08005b98 	.word	0x08005b98
 8005b0c:	08005b98 	.word	0x08005b98
 8005b10:	08005b9c 	.word	0x08005b9c

08005b14 <memset>:
 8005b14:	4402      	add	r2, r0
 8005b16:	4603      	mov	r3, r0
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d100      	bne.n	8005b1e <memset+0xa>
 8005b1c:	4770      	bx	lr
 8005b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b22:	e7f9      	b.n	8005b18 <memset+0x4>

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
