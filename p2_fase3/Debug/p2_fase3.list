
p2_fase3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e80  08004e80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e88  08004e88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  2000000c  08004e9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  08004e9c  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162db  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029f8  00000000  00000000  00036317  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  00038d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  0003a288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000273a2  00000000  00000000  0003b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010245  00000000  00000000  00062a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eece7  00000000  00000000  00072c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba0  00000000  00000000  001619f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e14 	.word	0x08004e14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e14 	.word	0x08004e14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
    // Pulse clock
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK,GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f001 fd9d 	bl	8002014 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80004da:	2001      	movs	r0, #1
 80004dc:	f001 f9b2 	bl	8001844 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK,GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ea:	f001 fd93 	bl	8002014 <HAL_GPIO_WritePin>
     //LL_mDelay(1);
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <lcd_reset>:

void lcd_reset(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    HAL_GPIO_WritePin(RS_PORT, LCD_RS,GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	481a      	ldr	r0, [pc, #104]	; (8000568 <lcd_reset+0x74>)
 80004fe:	f001 fd89 	bl	8002014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT7,  LCD_7,GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2110      	movs	r1, #16
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f001 fd83 	bl	8002014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT4,  LCD_4,GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fd7d 	bl	8002014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT56,  LCD_5 | LCD_6,GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2112      	movs	r1, #18
 800051e:	4812      	ldr	r0, [pc, #72]	; (8000568 <lcd_reset+0x74>)
 8000520:	f001 fd78 	bl	8002014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CLOCK_PORT,  LCD_CLOCK,GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052e:	f001 fd71 	bl	8002014 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4,GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	2108      	movs	r1, #8
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f001 fd6b 	bl	8002014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT56, LCD_5,GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2110      	movs	r1, #16
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <lcd_reset+0x74>)
 8000544:	f001 fd66 	bl	8002014 <HAL_GPIO_WritePin>
    lcd_clock();
 8000548:	f7ff ffbe 	bl	80004c8 <lcd_clock>
    lcd_clock();
 800054c:	f7ff ffbc 	bl	80004c8 <lcd_clock>
    lcd_clock();
 8000550:	f7ff ffba 	bl	80004c8 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4,GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2108      	movs	r1, #8
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f001 fd5a 	bl	8002014 <HAL_GPIO_WritePin>
    lcd_clock();
 8000560:	f7ff ffb2 	bl	80004c8 <lcd_clock>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	48000400 	.word	0x48000400

0800056c <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	091b      	lsrs	r3, r3, #4
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <lcd_write+0x2c>
        HAL_GPIO_WritePin(LCD_PORT4, LCD_4, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2108      	movs	r1, #8
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f001 fd3f 	bl	8002014 <HAL_GPIO_WritePin>
 8000596:	e005      	b.n	80005a4 <lcd_write+0x38>
    else
        HAL_GPIO_WritePin(LCD_PORT4, LCD_4,GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2108      	movs	r1, #8
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f001 fd38 	bl	8002014 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	095b      	lsrs	r3, r3, #5
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d005      	beq.n	80005be <lcd_write+0x52>
        HAL_GPIO_WritePin(LCD_PORT56, LCD_5,GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2110      	movs	r1, #16
 80005b6:	4847      	ldr	r0, [pc, #284]	; (80006d4 <lcd_write+0x168>)
 80005b8:	f001 fd2c 	bl	8002014 <HAL_GPIO_WritePin>
 80005bc:	e004      	b.n	80005c8 <lcd_write+0x5c>
    else
        HAL_GPIO_WritePin(LCD_PORT56, LCD_5,GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	4844      	ldr	r0, [pc, #272]	; (80006d4 <lcd_write+0x168>)
 80005c4:	f001 fd26 	bl	8002014 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	099b      	lsrs	r3, r3, #6
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d005      	beq.n	80005e2 <lcd_write+0x76>
        HAL_GPIO_WritePin(LCD_PORT56, LCD_6,GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2102      	movs	r1, #2
 80005da:	483e      	ldr	r0, [pc, #248]	; (80006d4 <lcd_write+0x168>)
 80005dc:	f001 fd1a 	bl	8002014 <HAL_GPIO_WritePin>
 80005e0:	e004      	b.n	80005ec <lcd_write+0x80>
    else
        HAL_GPIO_WritePin(LCD_PORT56, LCD_6,GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2102      	movs	r1, #2
 80005e6:	483b      	ldr	r0, [pc, #236]	; (80006d4 <lcd_write+0x168>)
 80005e8:	f001 fd14 	bl	8002014 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	09db      	lsrs	r3, r3, #7
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d006      	beq.n	8000608 <lcd_write+0x9c>
        HAL_GPIO_WritePin(LCD_PORT7, LCD_7,GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2110      	movs	r1, #16
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f001 fd07 	bl	8002014 <HAL_GPIO_WritePin>
 8000606:	e005      	b.n	8000614 <lcd_write+0xa8>
    else
        HAL_GPIO_WritePin(LCD_PORT7, LCD_7,GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2110      	movs	r1, #16
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f001 fd00 	bl	8002014 <HAL_GPIO_WritePin>

    if(rs)
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <lcd_write+0xba>
        HAL_GPIO_WritePin(RS_PORT, LCD_RS,GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2104      	movs	r1, #4
 800061e:	482d      	ldr	r0, [pc, #180]	; (80006d4 <lcd_write+0x168>)
 8000620:	f001 fcf8 	bl	8002014 <HAL_GPIO_WritePin>
 8000624:	e004      	b.n	8000630 <lcd_write+0xc4>
    else
        HAL_GPIO_WritePin(RS_PORT, LCD_RS,GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	482a      	ldr	r0, [pc, #168]	; (80006d4 <lcd_write+0x168>)
 800062c:	f001 fcf2 	bl	8002014 <HAL_GPIO_WritePin>

    lcd_clock();
 8000630:	f7ff ff4a 	bl	80004c8 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <lcd_write+0xe0>
        HAL_GPIO_WritePin(LCD_PORT4, LCD_4,GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2108      	movs	r1, #8
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f001 fce5 	bl	8002014 <HAL_GPIO_WritePin>
 800064a:	e005      	b.n	8000658 <lcd_write+0xec>
    else
        HAL_GPIO_WritePin(LCD_PORT4, LCD_4,GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2108      	movs	r1, #8
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 fcde 	bl	8002014 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	085b      	lsrs	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d005      	beq.n	8000672 <lcd_write+0x106>
        HAL_GPIO_WritePin(LCD_PORT56, LCD_5,GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2110      	movs	r1, #16
 800066a:	481a      	ldr	r0, [pc, #104]	; (80006d4 <lcd_write+0x168>)
 800066c:	f001 fcd2 	bl	8002014 <HAL_GPIO_WritePin>
 8000670:	e004      	b.n	800067c <lcd_write+0x110>
    else
        HAL_GPIO_WritePin(LCD_PORT56, LCD_5,GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	4817      	ldr	r0, [pc, #92]	; (80006d4 <lcd_write+0x168>)
 8000678:	f001 fccc 	bl	8002014 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <lcd_write+0x12a>
        HAL_GPIO_WritePin(LCD_PORT56, LCD_6,GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2102      	movs	r1, #2
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <lcd_write+0x168>)
 8000690:	f001 fcc0 	bl	8002014 <HAL_GPIO_WritePin>
 8000694:	e004      	b.n	80006a0 <lcd_write+0x134>
    else
        HAL_GPIO_WritePin(LCD_PORT56, LCD_6,GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <lcd_write+0x168>)
 800069c:	f001 fcba 	bl	8002014 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <lcd_write+0x150>
        HAL_GPIO_WritePin(LCD_PORT7, LCD_7,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f001 fcad 	bl	8002014 <HAL_GPIO_WritePin>
 80006ba:	e005      	b.n	80006c8 <lcd_write+0x15c>
    else
        HAL_GPIO_WritePin(LCD_PORT7, LCD_7,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f001 fca6 	bl	8002014 <HAL_GPIO_WritePin>

    lcd_clock();
 80006c8:	f7ff fefe 	bl	80004c8 <lcd_clock>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	48000400 	.word	0x48000400

080006d8 <lcd_clear>:

void lcd_clear(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006dc:	2100      	movs	r1, #0
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff44 	bl	800056c <lcd_write>
    _lcd_char = 0;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <lcd_clear+0x1c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006ea:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <lcd_clear+0x20>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000030 	.word	0x20000030
 80006f8:	20000031 	.word	0x20000031

080006fc <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	460b      	mov	r3, r1
 8000708:	71bb      	strb	r3, [r7, #6]
 800070a:	4613      	mov	r3, r2
 800070c:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	b25a      	sxtb	r2, r3
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	b25b      	sxtb	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b25a      	sxtb	r2, r3
 8000724:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff1b 	bl	800056c <lcd_write>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff0a 	bl	800056c <lcd_write>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fef9 	bl	800056c <lcd_write>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <lcd_print>:

void lcd_print(char string[])
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e055      	b.n	800083e <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <lcd_print+0xd0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01c      	beq.n	80007d4 <lcd_print+0x50>
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d116      	bne.n	80007d4 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 80007a6:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <lcd_print+0xd4>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <lcd_print+0xd0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d242      	bcs.n	8000838 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <lcd_print+0xd8>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <lcd_print+0xd4>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	1c59      	adds	r1, r3, #1
 80007bc:	b2c8      	uxtb	r0, r1
 80007be:	4926      	ldr	r1, [pc, #152]	; (8000858 <lcd_print+0xd4>)
 80007c0:	7008      	strb	r0, [r1, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffb9 	bl	800073e <lcd_display_address>
                _lcd_char = 0;
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <lcd_print+0xdc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80007d2:	e031      	b.n	8000838 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <lcd_print+0xe0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d01b      	beq.n	8000814 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <lcd_print+0xdc>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <lcd_print+0xe0>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d115      	bne.n	8000814 <lcd_print+0x90>
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <lcd_print+0xd4>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <lcd_print+0xd0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d20f      	bcs.n	8000814 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <lcd_print+0xd8>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <lcd_print+0xd4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	1c59      	adds	r1, r3, #1
 80007fe:	b2c8      	uxtb	r0, r1
 8000800:	4915      	ldr	r1, [pc, #84]	; (8000858 <lcd_print+0xd4>)
 8000802:	7008      	strb	r0, [r1, #0]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff98 	bl	800073e <lcd_display_address>
                    _lcd_char = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <lcd_print+0xdc>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fea4 	bl	800056c <lcd_write>
            if(lcd_chars) _lcd_char++;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <lcd_print+0xe0>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <lcd_print+0xb4>
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <lcd_print+0xdc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <lcd_print+0xdc>)
 8000836:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	3301      	adds	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1a3      	bne.n	8000792 <lcd_print+0xe>
        }
    }
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000029 	.word	0x20000029
 8000858:	20000031 	.word	0x20000031
 800085c:	2000002c 	.word	0x2000002c
 8000860:	20000030 	.word	0x20000030
 8000864:	20000028 	.word	0x20000028

08000868 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	011a      	lsls	r2, r3, #4
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	dc0a      	bgt.n	800089e <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000890:	b25b      	sxtb	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe68 	bl	800056c <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 800089c:	e059      	b.n	8000952 <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	dd17      	ble.n	80008d4 <moveToXY+0x6c>
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b1f      	cmp	r3, #31
 80008a8:	dc14      	bgt.n	80008d4 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	425a      	negs	r2, r3
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	f002 020f 	and.w	r2, r2, #15
 80008b6:	bf58      	it	pl
 80008b8:	4253      	negpl	r3, r2
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3340      	adds	r3, #64	; 0x40
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe4d 	bl	800056c <lcd_write>
 80008d2:	e03e      	b.n	8000952 <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b28      	cmp	r3, #40	; 0x28
 80008d8:	dd1b      	ble.n	8000912 <moveToXY+0xaa>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b3b      	cmp	r3, #59	; 0x3b
 80008de:	dc18      	bgt.n	8000912 <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <moveToXY+0xf4>)
 80008e4:	fb83 1302 	smull	r1, r3, r3, r2
 80008e8:	1119      	asrs	r1, r3, #4
 80008ea:	17d3      	asrs	r3, r2, #31
 80008ec:	1ac9      	subs	r1, r1, r3
 80008ee:	460b      	mov	r3, r1
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	1ad1      	subs	r1, r2, r3
 80008f8:	b2cb      	uxtb	r3, r1
 80008fa:	3314      	adds	r3, #20
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000904:	b25b      	sxtb	r3, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe2e 	bl	800056c <lcd_write>
 8000910:	e01f      	b.n	8000952 <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b13      	cmp	r3, #19
 8000916:	dd1c      	ble.n	8000952 <moveToXY+0xea>
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b27      	cmp	r3, #39	; 0x27
 800091c:	dc19      	bgt.n	8000952 <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <moveToXY+0xf8>)
 8000922:	fb83 1302 	smull	r1, r3, r3, r2
 8000926:	4413      	add	r3, r2
 8000928:	1159      	asrs	r1, r3, #5
 800092a:	17d3      	asrs	r3, r2, #31
 800092c:	1ac9      	subs	r1, r1, r3
 800092e:	460b      	mov	r3, r1
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	1ad1      	subs	r1, r2, r3
 8000938:	b2cb      	uxtb	r3, r1
 800093a:	3354      	adds	r3, #84	; 0x54
 800093c:	b2db      	uxtb	r3, r3
 800093e:	b25b      	sxtb	r3, r3
 8000940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000944:	b25b      	sxtb	r3, r3
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe0e 	bl	800056c <lcd_write>
}
 8000950:	e7ff      	b.n	8000952 <moveToXY+0xea>
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	66666667 	.word	0x66666667
 8000960:	88888889 	.word	0x88888889

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fefb 	bl	8001762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f896 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 faa0 	bl	8000eb4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000974:	f000 f936 	bl	8000be4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000978:	f000 f96c 	bl	8000c54 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800097c:	f000 f9a8 	bl	8000cd0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000980:	f000 f9cc 	bl	8000d1c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000984:	f000 fa08 	bl	8000d98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000988:	f000 fa36 	bl	8000df8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800098c:	f000 fa64 	bl	8000e58 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin, GPIO_PIN_SET); // pone a uno el pin Led_LCD
 8000990:	2201      	movs	r2, #1
 8000992:	2104      	movs	r1, #4
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f001 fb3c 	bl	8002014 <HAL_GPIO_WritePin>
  lcd_reset(); // reinicia el display LCD, colocándolo en un estado inicial conocido
 800099c:	f7ff fdaa 	bl	80004f4 <lcd_reset>
  lcd_display_settings(1,0,0); // activa el cursor
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fea9 	bl	80006fc <lcd_display_settings>
  lcd_clear(); // borra el contenido actual en el display LCD
 80009aa:	f7ff fe95 	bl	80006d8 <lcd_clear>
  lcd_print("Hola Dimas"); // muestra el mensaje "Hola mundo" en el display LCD
 80009ae:	483a      	ldr	r0, [pc, #232]	; (8000a98 <main+0x134>)
 80009b0:	f7ff fee8 	bl	8000784 <lcd_print>

  lcd_cgram_address(0); // se selecciona la dirección 0 de la CGRAM, patrón con código 0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fed3 	bl	8000760 <lcd_cgram_address>
  lcd_write(0x15, 1); //se va cargando con los bytes del patrón de cada fila de la CGRAM
 80009ba:	2101      	movs	r1, #1
 80009bc:	2015      	movs	r0, #21
 80009be:	f7ff fdd5 	bl	800056c <lcd_write>
  lcd_write(0x15, 1);
 80009c2:	2101      	movs	r1, #1
 80009c4:	2015      	movs	r0, #21
 80009c6:	f7ff fdd1 	bl	800056c <lcd_write>
  lcd_write(0xe, 1);
 80009ca:	2101      	movs	r1, #1
 80009cc:	200e      	movs	r0, #14
 80009ce:	f7ff fdcd 	bl	800056c <lcd_write>
  lcd_write(0x4, 1);
 80009d2:	2101      	movs	r1, #1
 80009d4:	2004      	movs	r0, #4
 80009d6:	f7ff fdc9 	bl	800056c <lcd_write>
  lcd_write(0x4, 1);
 80009da:	2101      	movs	r1, #1
 80009dc:	2004      	movs	r0, #4
 80009de:	f7ff fdc5 	bl	800056c <lcd_write>
  lcd_write(0xa, 1);
 80009e2:	2101      	movs	r1, #1
 80009e4:	200a      	movs	r0, #10
 80009e6:	f7ff fdc1 	bl	800056c <lcd_write>
  lcd_write(0x11, 1);
 80009ea:	2101      	movs	r1, #1
 80009ec:	2011      	movs	r0, #17
 80009ee:	f7ff fdbd 	bl	800056c <lcd_write>
  lcd_write(0x00, 1);
 80009f2:	2101      	movs	r1, #1
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fdb9 	bl	800056c <lcd_write>
  lcd_cgram_address(8); //se selecciona la dirección 8 de la CGRAM, patrón con código 1
 80009fa:	2008      	movs	r0, #8
 80009fc:	f7ff feb0 	bl	8000760 <lcd_cgram_address>
  lcd_write(0x4, 1); // se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000a00:	2101      	movs	r1, #1
 8000a02:	2004      	movs	r0, #4
 8000a04:	f7ff fdb2 	bl	800056c <lcd_write>
  lcd_write(0x4, 1);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f7ff fdae 	bl	800056c <lcd_write>
  lcd_write(0xe, 1);
 8000a10:	2101      	movs	r1, #1
 8000a12:	200e      	movs	r0, #14
 8000a14:	f7ff fdaa 	bl	800056c <lcd_write>
  lcd_write(0x15, 1);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2015      	movs	r0, #21
 8000a1c:	f7ff fda6 	bl	800056c <lcd_write>
  lcd_write(0x15, 1);
 8000a20:	2101      	movs	r1, #1
 8000a22:	2015      	movs	r0, #21
 8000a24:	f7ff fda2 	bl	800056c <lcd_write>
  lcd_write(0xa, 1);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f7ff fd9e 	bl	800056c <lcd_write>
  lcd_write(0xa, 1);
 8000a30:	2101      	movs	r1, #1
 8000a32:	200a      	movs	r0, #10
 8000a34:	f7ff fd9a 	bl	800056c <lcd_write>
  lcd_write(0x00, 1);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fd96 	bl	800056c <lcd_write>
  lcd_display_address(0); //Vuelve a direccionar la DDRAM para visualizar datos en pantalla
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fe7c 	bl	800073e <lcd_display_address>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000a46:	2107      	movs	r1, #7
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff0d 	bl	8000868 <moveToXY>
	  lcd_write(0,1); //escribe el nuevo patrón 0 en la DDRAM
 8000a4e:	2101      	movs	r1, #1
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fd8b 	bl	800056c <lcd_write>
	  moveToXY(1,8); //sitúa el cursor en la posición fila 1 columna 7, segundo muñeco
 8000a56:	2108      	movs	r1, #8
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff ff05 	bl	8000868 <moveToXY>
	  lcd_write(0,1);
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fd83 	bl	800056c <lcd_write>
	  HAL_Delay(1000); //retraso de 1 segundo para dejar ver la figura en pantalla
 8000a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6a:	f000 feeb 	bl	8001844 <HAL_Delay>

	  moveToXY(1,7);
 8000a6e:	2107      	movs	r1, #7
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fef9 	bl	8000868 <moveToXY>
	  lcd_write(1,1); //escribe el nuevo patrón 0 en la DDRAM
 8000a76:	2101      	movs	r1, #1
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fd77 	bl	800056c <lcd_write>
	  moveToXY(1,8);
 8000a7e:	2108      	movs	r1, #8
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fef1 	bl	8000868 <moveToXY>
	  lcd_write(1,1);
 8000a86:	2101      	movs	r1, #1
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fd6f 	bl	800056c <lcd_write>
	  HAL_Delay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f000 fed7 	bl	8001844 <HAL_Delay>
	  moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000a96:	e7d6      	b.n	8000a46 <main+0xe2>
 8000a98:	08004e2c 	.word	0x08004e2c

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0b8      	sub	sp, #224	; 0xe0
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa6:	2244      	movs	r2, #68	; 0x44
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 f9aa 	bl	8004e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2288      	movs	r2, #136	; 0x88
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 f99c 	bl	8004e04 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000acc:	f001 fd4c 	bl	8002568 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ad0:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <SystemClock_Config+0x140>)
 8000ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ad6:	4a41      	ldr	r2, [pc, #260]	; (8000bdc <SystemClock_Config+0x140>)
 8000ad8:	f023 0318 	bic.w	r3, r3, #24
 8000adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ae0:	2314      	movs	r3, #20
 8000ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b10:	2328      	movs	r3, #40	; 0x28
 8000b12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b16:	2307      	movs	r3, #7
 8000b18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fe67 	bl	8002800 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b38:	f000 fb3e 	bl	80011b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2303      	movs	r3, #3
 8000b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b5e:	2104      	movs	r1, #4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fa33 	bl	8002fcc <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b6c:	f000 fb24 	bl	80011b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <SystemClock_Config+0x144>)
 8000b72:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b94:	2318      	movs	r3, #24
 8000b96:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000ba4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ba8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fc11 	bl	80033d4 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000bb8:	f000 fafe 	bl	80011b8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bbc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bc0:	f001 fcf0 	bl	80025a4 <HAL_PWREx_ControlVoltageScaling>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000bca:	f000 faf5 	bl	80011b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bce:	f002 fee7 	bl	80039a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bd2:	bf00      	nop
 8000bd4:	37e0      	adds	r7, #224	; 0xe0
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	00012085 	.word	0x00012085

08000be4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <MX_DFSDM1_Init+0x6c>)
 8000bec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c12:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c3a:	f000 ff37 	bl	8001aac <HAL_DFSDM_ChannelInit>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c44:	f000 fab8 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000005c 	.word	0x2000005c
 8000c50:	40016020 	.word	0x40016020

08000c54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_I2C2_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c60:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c64:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c92:	f001 f9fa 	bl	800208a <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 fa8c 	bl	80011b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000ca4:	f001 fa80 	bl	80021a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000cae:	f000 fa83 	bl	80011b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000cb6:	f001 fac2 	bl	800223e <HAL_I2CEx_ConfigDigitalFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 fa7a 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000051c 	.word	0x2000051c
 8000ccc:	40005800 	.word	0x40005800

08000cd0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <MX_QUADSPI_Init+0x48>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000d00:	f001 fcb6 	bl	8002670 <HAL_QSPI_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000d0a:	f000 fa55 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000064c 	.word	0x2000064c
 8000d18:	a0001000 	.word	0xa0001000

08000d1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_SPI3_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d76:	2208      	movs	r2, #8
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d7c:	f002 ffea 	bl	8003d54 <HAL_SPI_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 fa17 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000568 	.word	0x20000568
 8000d94:	40003c00 	.word	0x40003c00

08000d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <MX_USART1_UART_Init+0x5c>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000ddc:	f003 f844 	bl	8003e68 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000de6:	f000 f9e7 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200005cc 	.word	0x200005cc
 8000df4:	40013800 	.word	0x40013800

08000df8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_USART3_UART_Init+0x5c>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e3c:	f003 f814 	bl	8003e68 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e46:	f000 f9b7 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000094 	.word	0x20000094
 8000e54:	40004800 	.word	0x40004800

08000e58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	2206      	movs	r2, #6
 8000e68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9c:	f001 fa1b 	bl	80022d6 <HAL_PCD_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f987 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000114 	.word	0x20000114

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	4bb4      	ldr	r3, [pc, #720]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4ab3      	ldr	r2, [pc, #716]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4bb1      	ldr	r3, [pc, #708]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4bae      	ldr	r3, [pc, #696]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4aad      	ldr	r2, [pc, #692]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4bab      	ldr	r3, [pc, #684]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4ba8      	ldr	r3, [pc, #672]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4aa7      	ldr	r2, [pc, #668]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4ba5      	ldr	r3, [pc, #660]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4ba2      	ldr	r3, [pc, #648]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4aa1      	ldr	r2, [pc, #644]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b9f      	ldr	r3, [pc, #636]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b9c      	ldr	r3, [pc, #624]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a9b      	ldr	r2, [pc, #620]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b99      	ldr	r3, [pc, #612]	; (800119c <MX_GPIO_Init+0x2e8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f48:	4895      	ldr	r0, [pc, #596]	; (80011a0 <MX_GPIO_Init+0x2ec>)
 8000f4a:	f001 f863 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin 
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f248 111c 	movw	r1, #33052	; 0x811c
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f001 f85c 	bl	8002014 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin 
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f24f 0116 	movw	r1, #61462	; 0xf016
 8000f62:	4890      	ldr	r0, [pc, #576]	; (80011a4 <MX_GPIO_Init+0x2f0>)
 8000f64:	f001 f856 	bl	8002014 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f6e:	488e      	ldr	r0, [pc, #568]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f70:	f001 f850 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	488b      	ldr	r0, [pc, #556]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f7c:	f001 f84a 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f86:	4889      	ldr	r0, [pc, #548]	; (80011ac <MX_GPIO_Init+0x2f8>)
 8000f88:	f001 f844 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4884      	ldr	r0, [pc, #528]	; (80011a4 <MX_GPIO_Init+0x2f0>)
 8000f92:	f001 f83f 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4881      	ldr	r0, [pc, #516]	; (80011a0 <MX_GPIO_Init+0x2ec>)
 8000f9c:	f001 f83a 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fa0:	f240 1315 	movw	r3, #277	; 0x115
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4879      	ldr	r0, [pc, #484]	; (80011a0 <MX_GPIO_Init+0x2ec>)
 8000fba:	f000 fe83 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fbe:	236a      	movs	r3, #106	; 0x6a
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	4b7b      	ldr	r3, [pc, #492]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4873      	ldr	r0, [pc, #460]	; (80011a0 <MX_GPIO_Init+0x2ec>)
 8000fd2:	f000 fe77 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fdc:	4b75      	ldr	r3, [pc, #468]	; (80011b4 <MX_GPIO_Init+0x300>)
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4870      	ldr	r0, [pc, #448]	; (80011ac <MX_GPIO_Init+0x2f8>)
 8000fec:	f000 fe6a 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000ff0:	233f      	movs	r3, #63	; 0x3f
 8000ff2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	486a      	ldr	r0, [pc, #424]	; (80011ac <MX_GPIO_Init+0x2f8>)
 8001004:	f000 fe5e 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001008:	2303      	movs	r3, #3
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001018:	2308      	movs	r3, #8
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f000 fe4d 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin 
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin 
 800102a:	f248 131c 	movw	r3, #33052	; 0x811c
 800102e:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f000 fe3d 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800104a:	23e0      	movs	r3, #224	; 0xe0
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f000 fe2c 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4849      	ldr	r0, [pc, #292]	; (80011a4 <MX_GPIO_Init+0x2f0>)
 8001080:	f000 fe20 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin 
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin 
 8001084:	f24f 0336 	movw	r3, #61494	; 0xf036
 8001088:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4841      	ldr	r0, [pc, #260]	; (80011a4 <MX_GPIO_Init+0x2f0>)
 800109e:	f000 fe11 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80010a2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010a6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a8:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	483c      	ldr	r0, [pc, #240]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 80010b8:	f000 fe04 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80010bc:	f243 0381 	movw	r3, #12417	; 0x3081
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4834      	ldr	r0, [pc, #208]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 80010d6:	f000 fdf5 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80010da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	482e      	ldr	r0, [pc, #184]	; (80011ac <MX_GPIO_Init+0x2f8>)
 80010f4:	f000 fde6 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80010f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4827      	ldr	r0, [pc, #156]	; (80011ac <MX_GPIO_Init+0x2f8>)
 800110e:	f000 fdd9 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	481e      	ldr	r0, [pc, #120]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 800112e:	f000 fdc9 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001132:	2378      	movs	r3, #120	; 0x78
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001142:	2307      	movs	r3, #7
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 800114e:	f000 fdb9 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001158:	2312      	movs	r3, #18
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001164:	2304      	movs	r3, #4
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_GPIO_Init+0x2f0>)
 8001170:	f000 fda8 	bl	8001cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2017      	movs	r0, #23
 800117a:	f000 fc60 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800117e:	2017      	movs	r0, #23
 8001180:	f000 fc79 	bl	8001a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2028      	movs	r0, #40	; 0x28
 800118a:	f000 fc58 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118e:	2028      	movs	r0, #40	; 0x28
 8001190:	f000 fc71 	bl	8001a76 <HAL_NVIC_EnableIRQ>

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	48001000 	.word	0x48001000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48000800 	.word	0x48000800
 80011b0:	10110000 	.word	0x10110000
 80011b4:	10210000 	.word	0x10210000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6613      	str	r3, [r2, #96]	; 0x60
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_DFSDM_ChannelMspInit+0x7c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d128      	bne.n	8001282 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123a:	6613      	str	r3, [r2, #96]	; 0x60
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_DFSDM_ChannelMspInit+0x80>)
 800123e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_DFSDM_ChannelMspInit+0x80>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_DFSDM_ChannelMspInit+0x80>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001260:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001272:	2306      	movs	r3, #6
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_DFSDM_ChannelMspInit+0x84>)
 800127e:	f000 fd21 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000034 	.word	0x20000034
 8001290:	40021000 	.word	0x40021000
 8001294:	48001000 	.word	0x48001000

08001298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_I2C_MspInit+0x7c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d128      	bne.n	800130c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_I2C_MspInit+0x80>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_I2C_MspInit+0x80>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_I2C_MspInit+0x80>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d8:	2312      	movs	r3, #18
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e4:	2304      	movs	r3, #4
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_I2C_MspInit+0x84>)
 80012f0:	f000 fce8 	bl	8001cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_I2C_MspInit+0x80>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_I2C_MspInit+0x80>)
 80012fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_I2C_MspInit+0x80>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005800 	.word	0x40005800
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400

08001320 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_QSPI_MspInit+0x7c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d128      	bne.n	8001394 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_QSPI_MspInit+0x80>)
 8001344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_QSPI_MspInit+0x80>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6513      	str	r3, [r2, #80]	; 0x50
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_QSPI_MspInit+0x80>)
 8001350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_QSPI_MspInit+0x80>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_QSPI_MspInit+0x80>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_QSPI_MspInit+0x80>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001372:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001376:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001384:	230a      	movs	r3, #10
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_QSPI_MspInit+0x84>)
 8001390:	f000 fc98 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	a0001000 	.word	0xa0001000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48001000 	.word	0x48001000

080013a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_SPI_MspInit+0x7c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d128      	bne.n	800141c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_SPI_MspInit+0x80>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_SPI_MspInit+0x80>)
 80013d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_SPI_MspInit+0x80>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_SPI_MspInit+0x80>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <HAL_SPI_MspInit+0x80>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_SPI_MspInit+0x80>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80013fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800140c:	2306      	movs	r3, #6
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_SPI_MspInit+0x84>)
 8001418:	f000 fc54 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40003c00 	.word	0x40003c00
 8001428:	40021000 	.word	0x40021000
 800142c:	48000800 	.word	0x48000800

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2e      	ldr	r2, [pc, #184]	; (8001508 <HAL_UART_MspInit+0xd8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d128      	bne.n	80014a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <HAL_UART_MspInit+0xdc>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	4a2d      	ldr	r2, [pc, #180]	; (800150c <HAL_UART_MspInit+0xdc>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6613      	str	r3, [r2, #96]	; 0x60
 800145e:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_UART_MspInit+0xdc>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_UART_MspInit+0xdc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_UART_MspInit+0xdc>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_UART_MspInit+0xdc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001482:	23c0      	movs	r3, #192	; 0xc0
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001492:	2307      	movs	r3, #7
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	481c      	ldr	r0, [pc, #112]	; (8001510 <HAL_UART_MspInit+0xe0>)
 800149e:	f000 fc11 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a2:	e02d      	b.n	8001500 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_UART_MspInit+0xe4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d128      	bne.n	8001500 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_UART_MspInit+0xdc>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_UART_MspInit+0xdc>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_UART_MspInit+0xdc>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_UART_MspInit+0xdc>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_UART_MspInit+0xdc>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_UART_MspInit+0xdc>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80014de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f0:	2307      	movs	r3, #7
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <HAL_UART_MspInit+0xe8>)
 80014fc:	f000 fbe2 	bl	8001cc4 <HAL_GPIO_Init>
}
 8001500:	bf00      	nop
 8001502:	3730      	adds	r7, #48	; 0x30
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40013800 	.word	0x40013800
 800150c:	40021000 	.word	0x40021000
 8001510:	48000400 	.word	0x48000400
 8001514:	40004800 	.word	0x40004800
 8001518:	48000c00 	.word	0x48000c00

0800151c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153c:	d154      	bne.n	80015e8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156e:	f000 fba9 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001572:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001584:	230a      	movs	r3, #10
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f000 fb97 	bl	8001cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 800159c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80015d2:	f001 f83d 	bl	8002650 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_PCD_MspInit+0xd4>)
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015e2:	e001      	b.n	80015e8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80015e4:	f001 f834 	bl	8002650 <HAL_PWREx_EnableVddUSB>
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 f8de 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001654:	2020      	movs	r0, #32
 8001656:	f000 fcf5 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800165a:	2040      	movs	r0, #64	; 0x40
 800165c:	f000 fcf2 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001660:	2080      	movs	r0, #128	; 0x80
 8001662:	f000 fcef 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001666:	f44f 7080 	mov.w	r0, #256	; 0x100
 800166a:	f000 fceb 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}

08001672 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001676:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800167a:	f000 fce3 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800167e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001682:	f000 fcdf 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001686:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800168a:	f000 fcdb 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001692:	f000 fcd7 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001696:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800169a:	f000 fcd3 	bl	8002044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <SystemInit+0x64>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <SystemInit+0x64>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <SystemInit+0x68>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <SystemInit+0x68>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <SystemInit+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <SystemInit+0x68>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <SystemInit+0x68>)
 80016d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <SystemInit+0x68>)
 80016dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <SystemInit+0x68>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <SystemInit+0x68>)
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <SystemInit+0x68>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SystemInit+0x64>)
 80016f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016fa:	609a      	str	r2, [r3, #8]
#endif
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	40021000 	.word	0x40021000

08001710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001716:	e003      	b.n	8001720 <LoopCopyDataInit>

08001718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800171a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800171c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800171e:	3104      	adds	r1, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001728:	d3f6      	bcc.n	8001718 <CopyDataInit>
	ldr	r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopForever+0x12>)
	b	LoopFillZerobss
 800172c:	e002      	b.n	8001734 <LoopFillZerobss>

0800172e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800172e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001730:	f842 3b04 	str.w	r3, [r2], #4

08001734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <LoopForever+0x16>)
	cmp	r2, r3
 8001736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001738:	d3f9      	bcc.n	800172e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800173a:	f7ff ffb3 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f003 fb3d 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001742:	f7ff f90f 	bl	8000964 <main>

08001746 <LoopForever>:

LoopForever:
    b LoopForever
 8001746:	e7fe      	b.n	8001746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001748:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800174c:	08004e90 	.word	0x08004e90
	ldr	r0, =_sdata
 8001750:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001754:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001758:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800175c:	20000694 	.word	0x20000694

08001760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>

08001762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f95b 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001772:	2000      	movs	r0, #0
 8001774:	f000 f80e 	bl	8001794 <HAL_InitTick>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	e001      	b.n	8001788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001784:	f7ff fd20 	bl	80011c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001788:	79fb      	ldrb	r3, [r7, #7]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_InitTick+0x68>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d022      	beq.n	80017ee <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_InitTick+0x6c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_InitTick+0x68>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f968 	bl	8001a92 <HAL_SYSTICK_Config>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10f      	bne.n	80017e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	d809      	bhi.n	80017e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ce:	2200      	movs	r2, #0
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	f04f 30ff 	mov.w	r0, #4294967295
 80017d6:	f000 f932 	bl	8001a3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_InitTick+0x70>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e007      	b.n	80017f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	e004      	b.n	80017f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x1c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_IncTick+0x20>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4413      	add	r3, r2
 8001816:	4a03      	ldr	r2, [pc, #12]	; (8001824 <HAL_IncTick+0x1c>)
 8001818:	6013      	str	r3, [r2, #0]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000690 	.word	0x20000690
 8001828:	20000008 	.word	0x20000008

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000690 	.word	0x20000690

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d004      	beq.n	8001868 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_Delay+0x40>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001868:	bf00      	nop
 800186a:	f7ff ffdf 	bl	800182c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	429a      	cmp	r2, r3
 8001878:	d8f7      	bhi.n	800186a <HAL_Delay+0x26>
  {
  }
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <__NVIC_EnableIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff29 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff3e 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff8e 	bl	800197c <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff31 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0ac      	b.n	8001c18 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f8b2 	bl	8001c2c <DFSDM_GetChannelFromInstance>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <HAL_DFSDM_ChannelInit+0x174>)
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e09f      	b.n	8001c18 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fb99 	bl	8001210 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001ade:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <HAL_DFSDM_ChannelInit+0x178>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_DFSDM_ChannelInit+0x178>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001ae8:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <HAL_DFSDM_ChannelInit+0x178>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d125      	bne.n	8001b3c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001af0:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001afa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001afc:	4b4a      	ldr	r3, [pc, #296]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4948      	ldr	r1, [pc, #288]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a46      	ldr	r2, [pc, #280]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b10:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001b14:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b1e:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	493f      	ldr	r1, [pc, #252]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b30:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a3c      	ldr	r2, [pc, #240]	; (8001c28 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b3a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b4a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b5a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b60:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 020f 	bic.w	r2, r2, #15
 8001b78:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ba0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6899      	ldr	r1, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f002 0207 	and.w	r2, r2, #7
 8001bcc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f810 	bl	8001c2c <DFSDM_GetChannelFromInstance>
 8001c0c:	4601      	mov	r1, r0
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_DFSDM_ChannelInit+0x174>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000003c 	.word	0x2000003c
 8001c24:	20000038 	.word	0x20000038
 8001c28:	40016000 	.word	0x40016000

08001c2c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <DFSDM_GetChannelFromInstance+0x7c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d102      	bne.n	8001c42 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e02b      	b.n	8001c9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <DFSDM_GetChannelFromInstance+0x80>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d102      	bne.n	8001c50 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	e024      	b.n	8001c9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <DFSDM_GetChannelFromInstance+0x84>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e01d      	b.n	8001c9a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <DFSDM_GetChannelFromInstance+0x88>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d102      	bne.n	8001c6c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001c66:	2304      	movs	r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e016      	b.n	8001c9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <DFSDM_GetChannelFromInstance+0x8c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d102      	bne.n	8001c7a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001c74:	2305      	movs	r3, #5
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e00f      	b.n	8001c9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <DFSDM_GetChannelFromInstance+0x90>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d102      	bne.n	8001c88 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001c82:	2306      	movs	r3, #6
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e008      	b.n	8001c9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <DFSDM_GetChannelFromInstance+0x94>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d102      	bne.n	8001c96 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c90:	2307      	movs	r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e001      	b.n	8001c9a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c96:	2303      	movs	r3, #3
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40016000 	.word	0x40016000
 8001cac:	40016020 	.word	0x40016020
 8001cb0:	40016040 	.word	0x40016040
 8001cb4:	40016080 	.word	0x40016080
 8001cb8:	400160a0 	.word	0x400160a0
 8001cbc:	400160c0 	.word	0x400160c0
 8001cc0:	400160e0 	.word	0x400160e0

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd2:	e17f      	b.n	8001fd4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8171 	beq.w	8001fce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d00b      	beq.n	8001d0c <HAL_GPIO_Init+0x48>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d007      	beq.n	8001d0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d00:	2b11      	cmp	r3, #17
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d130      	bne.n	8001d6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d42:	2201      	movs	r2, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	f003 0201 	and.w	r2, r3, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d118      	bne.n	8001dac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d80:	2201      	movs	r2, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f003 0201 	and.w	r2, r3, #1
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x128>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	6939      	ldr	r1, [r7, #16]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80ac 	beq.w	8001fce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b5e      	ldr	r3, [pc, #376]	; (8001ff0 <HAL_GPIO_Init+0x32c>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	4a5d      	ldr	r2, [pc, #372]	; (8001ff0 <HAL_GPIO_Init+0x32c>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6613      	str	r3, [r2, #96]	; 0x60
 8001e82:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <HAL_GPIO_Init+0x32c>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e8e:	4a59      	ldr	r2, [pc, #356]	; (8001ff4 <HAL_GPIO_Init+0x330>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eb8:	d025      	beq.n	8001f06 <HAL_GPIO_Init+0x242>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4e      	ldr	r2, [pc, #312]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01f      	beq.n	8001f02 <HAL_GPIO_Init+0x23e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x338>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d019      	beq.n	8001efe <HAL_GPIO_Init+0x23a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_GPIO_Init+0x33c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0x236>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_GPIO_Init+0x340>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_GPIO_Init+0x232>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_GPIO_Init+0x344>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <HAL_GPIO_Init+0x22e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a49      	ldr	r2, [pc, #292]	; (800200c <HAL_GPIO_Init+0x348>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_GPIO_Init+0x22a>
 8001eea:	2306      	movs	r3, #6
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x244>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x244>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x244>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x244>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x244>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x244>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x244>
 8001f06:	2300      	movs	r3, #0
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f18:	4936      	ldr	r1, [pc, #216]	; (8001ff4 <HAL_GPIO_Init+0x330>)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f26:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f4a:	4a31      	ldr	r2, [pc, #196]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f47f ae78 	bne.w	8001cd4 <HAL_GPIO_Init+0x10>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	48000400 	.word	0x48000400
 8001ffc:	48000800 	.word	0x48000800
 8002000:	48000c00 	.word	0x48000c00
 8002004:	48001000 	.word	0x48001000
 8002008:	48001400 	.word	0x48001400
 800200c:	48001800 	.word	0x48001800
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002024:	787b      	ldrb	r3, [r7, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002030:	e002      	b.n	8002038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f806 	bl	8002074 <HAL_GPIO_EXTI_Callback>
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40010400 	.word	0x40010400

08002074 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e081      	b.n	80021a0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff f8f1 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2224      	movs	r2, #36	; 0x24
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	e006      	b.n	8002112 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002110:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d104      	bne.n	8002124 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002122:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002136:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002146:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	ea42 0103 	orr.w	r1, r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	021a      	lsls	r2, r3, #8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69d9      	ldr	r1, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d138      	bne.n	8002230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e032      	b.n	8002232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6819      	ldr	r1, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e000      	b.n	8002232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002230:	2302      	movs	r3, #2
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	d139      	bne.n	80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800225e:	2302      	movs	r3, #2
 8002260:	e033      	b.n	80022ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2224      	movs	r2, #36	; 0x24
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d8:	b08f      	sub	sp, #60	; 0x3c
 80022da:	af0a      	add	r7, sp, #40	; 0x28
 80022dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e116      	b.n	8002516 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff f90a 	bl	800151c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2203      	movs	r2, #3
 800230c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fb12 	bl	8004950 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	687e      	ldr	r6, [r7, #4]
 8002334:	466d      	mov	r5, sp
 8002336:	f106 0410 	add.w	r4, r6, #16
 800233a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002342:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002346:	e885 0003 	stmia.w	r5, {r0, r1}
 800234a:	1d33      	adds	r3, r6, #4
 800234c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f002 faac 	bl	80048ac <USB_CoreInit>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0d7      	b.n	8002516 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f002 fb00 	bl	8004972 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e04a      	b.n	800240e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	333d      	adds	r3, #61	; 0x3d
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	333c      	adds	r3, #60	; 0x3c
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	b298      	uxth	r0, r3
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3342      	adds	r3, #66	; 0x42
 80023b4:	4602      	mov	r2, r0
 80023b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	333f      	adds	r3, #63	; 0x3f
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3344      	adds	r3, #68	; 0x44
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3348      	adds	r3, #72	; 0x48
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3350      	adds	r3, #80	; 0x50
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3301      	adds	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d3af      	bcc.n	8002378 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e044      	b.n	80024a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	3301      	adds	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d3b5      	bcc.n	800241e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	687e      	ldr	r6, [r7, #4]
 80024ba:	466d      	mov	r5, sp
 80024bc:	f106 0410 	add.w	r4, r6, #16
 80024c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80024d0:	1d33      	adds	r3, r6, #4
 80024d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d4:	6838      	ldr	r0, [r7, #0]
 80024d6:	f002 fa77 	bl	80049c8 <USB_DevInit>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e014      	b.n	8002516 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2b01      	cmp	r3, #1
 8002502:	d102      	bne.n	800250a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f80a 	bl	800251e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fc07 	bl	8004d22 <USB_DevDisconnect>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800251e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	f043 0303 	orr.w	r3, r3, #3
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40007000 	.word	0x40007000

08002588 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40007000 	.word	0x40007000

080025a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b2:	d130      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c0:	d038      	beq.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2232      	movs	r2, #50	; 0x32
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9b      	lsrs	r3, r3, #18
 80025e4:	3301      	adds	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e8:	e002      	b.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d102      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f2      	bne.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002610:	d110      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e00f      	b.n	8002636 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002622:	d007      	beq.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800262c:	4a05      	ldr	r2, [pc, #20]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002632:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40007000 	.word	0x40007000
 8002648:	20000000 	.word	0x20000000
 800264c:	431bde83 	.word	0x431bde83

08002650 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_PWREx_EnableVddUSB+0x1c>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6053      	str	r3, [r2, #4]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40007000 	.word	0x40007000

08002670 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff f8d8 	bl	800182c <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e06f      	b.n	8002768 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_QSPI_Init+0x28>
 8002694:	2302      	movs	r3, #2
 8002696:	e067      	b.n	8002768 <HAL_QSPI_Init+0xf8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7fe fe33 	bl	8001320 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80026ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f858 	bl	8002774 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	021a      	lsls	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2120      	movs	r1, #32
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f850 	bl	8002790 <QSPI_WaitFlagStateUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80026f4:	7afb      	ldrb	r3, [r7, #11]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d131      	bne.n	800275e <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002704:	f023 0310 	bic.w	r3, r3, #16
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6852      	ldr	r2, [r2, #4]
 800270c:	0611      	lsls	r1, r2, #24
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_QSPI_Init+0x100>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6912      	ldr	r2, [r2, #16]
 800272a:	0411      	lsls	r1, r2, #16
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6952      	ldr	r2, [r2, #20]
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6992      	ldr	r2, [r2, #24]
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002766:	7afb      	ldrb	r3, [r7, #11]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	ffe0f8fe 	.word	0xffe0f8fe

08002774 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80027a0:	e01a      	b.n	80027d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d016      	beq.n	80027d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7ff f83f 	bl	800182c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2204      	movs	r2, #4
 80027c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e00e      	b.n	80027f6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1d6      	bne.n	80027a2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e3d4      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002812:	4ba1      	ldr	r3, [pc, #644]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281c:	4b9e      	ldr	r3, [pc, #632]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80e4 	beq.w	80029fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <HAL_RCC_OscConfig+0x4a>
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	f040 808b 	bne.w	8002958 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 8087 	bne.w	8002958 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284a:	4b93      	ldr	r3, [pc, #588]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e3ac      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	4b8c      	ldr	r3, [pc, #560]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_RCC_OscConfig+0x7c>
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287a:	e005      	b.n	8002888 <HAL_RCC_OscConfig+0x88>
 800287c:	4b86      	ldr	r3, [pc, #536]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002888:	4293      	cmp	r3, r2
 800288a:	d223      	bcs.n	80028d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd3f 	bl	8003314 <RCC_SetFlashLatencyFromMSIRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e38d      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a0:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a7c      	ldr	r2, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028a6:	f043 0308 	orr.w	r3, r3, #8
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b7a      	ldr	r3, [pc, #488]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4977      	ldr	r1, [pc, #476]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	4972      	ldr	r1, [pc, #456]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e025      	b.n	8002920 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d4:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6f      	ldr	r2, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	496a      	ldr	r1, [pc, #424]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f2:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	4965      	ldr	r1, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fcff 	bl	8003314 <RCC_SetFlashLatencyFromMSIRange>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e34d      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002920:	f000 fc36 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8002924:	4601      	mov	r1, r0
 8002926:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4a5a      	ldr	r2, [pc, #360]	; (8002a9c <HAL_RCC_OscConfig+0x29c>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa21 f303 	lsr.w	r3, r1, r3
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_OscConfig+0x2a0>)
 800293e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_RCC_OscConfig+0x2a4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe ff25 	bl	8001794 <HAL_InitTick>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d052      	beq.n	80029fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	e331      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d032      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002960:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a4c      	ldr	r2, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800296c:	f7fe ff5e 	bl	800182c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002974:	f7fe ff5a 	bl	800182c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e31a      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002986:	4b44      	ldr	r3, [pc, #272]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	493b      	ldr	r1, [pc, #236]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
 80029c4:	e01a      	b.n	80029fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a33      	ldr	r2, [pc, #204]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d2:	f7fe ff2b 	bl	800182c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029da:	f7fe ff27 	bl	800182c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e2e7      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ec:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x1da>
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d074      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x21a>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d10e      	bne.n	8002a32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d064      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d160      	bne.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e2c4      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x24a>
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e01d      	b.n	8002a86 <HAL_RCC_OscConfig+0x286>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCC_OscConfig+0x26e>
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCC_OscConfig+0x286>
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <HAL_RCC_OscConfig+0x298>)
 8002a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01c      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fecd 	bl	800182c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a94:	e011      	b.n	8002aba <HAL_RCC_OscConfig+0x2ba>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08004e38 	.word	0x08004e38
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fec0 	bl	800182c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e280      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	4baf      	ldr	r3, [pc, #700]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2a8>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe feb0 	bl	800182c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe feac 	bl	800182c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e26c      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae2:	4ba5      	ldr	r3, [pc, #660]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2d0>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d060      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_OscConfig+0x310>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d116      	bne.n	8002b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b10:	4b99      	ldr	r3, [pc, #612]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_OscConfig+0x328>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e249      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b93      	ldr	r3, [pc, #588]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	4990      	ldr	r1, [pc, #576]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3c:	e040      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d023      	beq.n	8002b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b46:	4b8c      	ldr	r3, [pc, #560]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a8b      	ldr	r2, [pc, #556]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fe6b 	bl	800182c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fe67 	bl	800182c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e227      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6c:	4b82      	ldr	r3, [pc, #520]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	497c      	ldr	r1, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e018      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a79      	ldr	r2, [pc, #484]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fe47 	bl	800182c <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fe43 	bl	800182c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e203      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb4:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd4:	4b68      	ldr	r3, [pc, #416]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	4a67      	ldr	r2, [pc, #412]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe fe22 	bl	800182c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe fe1e 	bl	800182c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1de      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfe:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <HAL_RCC_OscConfig+0x3ec>
 8002c0c:	e01b      	b.n	8002c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0e:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fe05 	bl	800182c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c26:	f7fe fe01 	bl	800182c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1c1      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c38:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ef      	bne.n	8002c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80a6 	beq.w	8002da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c58:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10d      	bne.n	8002c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	4a43      	ldr	r2, [pc, #268]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c80:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <HAL_RCC_OscConfig+0x57c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d118      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_RCC_OscConfig+0x57c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3a      	ldr	r2, [pc, #232]	; (8002d7c <HAL_RCC_OscConfig+0x57c>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c98:	f7fe fdc8 	bl	800182c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7fe fdc4 	bl	800182c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e184      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_RCC_OscConfig+0x57c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4d8>
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd6:	e024      	b.n	8002d22 <HAL_RCC_OscConfig+0x522>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d110      	bne.n	8002d02 <HAL_RCC_OscConfig+0x502>
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d00:	e00f      	b.n	8002d22 <HAL_RCC_OscConfig+0x522>
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d08:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	f023 0304 	bic.w	r3, r3, #4
 8002d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fd7f 	bl	800182c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe fd7b 	bl	800182c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e139      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x578>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ed      	beq.n	8002d32 <HAL_RCC_OscConfig+0x532>
 8002d56:	e01a      	b.n	8002d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fd68 	bl	800182c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d5e:	e00f      	b.n	8002d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fd64 	bl	800182c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d906      	bls.n	8002d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e122      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d80:	4b90      	ldr	r3, [pc, #576]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e8      	bne.n	8002d60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b8b      	ldr	r3, [pc, #556]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	4a8a      	ldr	r2, [pc, #552]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8108 	beq.w	8002fba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	f040 80d0 	bne.w	8002f54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002db4:	4b83      	ldr	r3, [pc, #524]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d130      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d127      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df4:	2a07      	cmp	r2, #7
 8002df6:	bf14      	ite	ne
 8002df8:	2201      	movne	r2, #1
 8002dfa:	2200      	moveq	r2, #0
 8002dfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d113      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d06e      	beq.n	8002f08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d069      	beq.n	8002f04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e30:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e3c:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0b7      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5c      	ldr	r2, [pc, #368]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e58:	f7fe fce8 	bl	800182c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fce4 	bl	800182c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0a4      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e72:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCC_OscConfig+0x7c8>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e98:	0212      	lsls	r2, r2, #8
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0552      	lsls	r2, r2, #21
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eac:	0852      	lsrs	r2, r2, #1
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	0652      	lsls	r2, r2, #25
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb8:	0912      	lsrs	r2, r2, #4
 8002eba:	0452      	lsls	r2, r2, #17
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	4941      	ldr	r1, [pc, #260]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a3e      	ldr	r2, [pc, #248]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002edc:	f7fe fca6 	bl	800182c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe fca2 	bl	800182c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e062      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f02:	e05a      	b.n	8002fba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e059      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f08:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d152      	bne.n	8002fba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f2c:	f7fe fc7e 	bl	800182c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fc7a 	bl	800182c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e03a      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x734>
 8002f52:	e032      	b.n	8002fba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d02d      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f78:	f023 0303 	bic.w	r3, r3, #3
 8002f7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002f84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fc4d 	bl	800182c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fc49 	bl	800182c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e009      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x7c4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x796>
 8002fb4:	e001      	b.n	8002fba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	f99d808c 	.word	0xf99d808c

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0c8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b66      	ldr	r3, [pc, #408]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4961      	ldr	r1, [pc, #388]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b0      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d04c      	beq.n	80030b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d121      	bne.n	8003074 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e09e      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d107      	bne.n	800304c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d115      	bne.n	8003074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e092      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003054:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e086      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e07e      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003074:	4b42      	ldr	r3, [pc, #264]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 0203 	bic.w	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	493f      	ldr	r1, [pc, #252]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003086:	f7fe fbd1 	bl	800182c <HAL_GetTick>
 800308a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308e:	f7fe fbcd 	bl	800182c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e066      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a4:	4b36      	ldr	r3, [pc, #216]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 020c 	and.w	r2, r3, #12
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d1eb      	bne.n	800308e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	492c      	ldr	r1, [pc, #176]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d210      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4924      	ldr	r1, [pc, #144]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1b0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e036      	b.n	8003172 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4918      	ldr	r1, [pc, #96]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4910      	ldr	r1, [pc, #64]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003142:	f000 f825 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8003146:	4601      	mov	r1, r0
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	fa21 f303 	lsr.w	r3, r1, r3
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fb14 	bl	8001794 <HAL_InitTick>
 800316c:	4603      	mov	r3, r0
 800316e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003170:	7afb      	ldrb	r3, [r7, #11]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	08004e38 	.word	0x08004e38
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a8:	4b3a      	ldr	r3, [pc, #232]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d121      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d11e      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031c4:	4b33      	ldr	r3, [pc, #204]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031d0:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e005      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031e0:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10d      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d102      	bne.n	800320e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_RCC_GetSysClockFreq+0x10c>)
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e004      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d101      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d133      	bne.n	8003286 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d002      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0xa4>
 800322e:	2b03      	cmp	r3, #3
 8003230:	d003      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0xaa>
 8003232:	e005      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003236:	617b      	str	r3, [r7, #20]
      break;
 8003238:	e005      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800323c:	617b      	str	r3, [r7, #20]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	617b      	str	r3, [r7, #20]
      break;
 8003244:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	3301      	adds	r3, #1
 8003252:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	fb02 f203 	mul.w	r2, r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_GetSysClockFreq+0x104>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0e5b      	lsrs	r3, r3, #25
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	3301      	adds	r3, #1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003286:	69bb      	ldr	r3, [r7, #24]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3724      	adds	r7, #36	; 0x24
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40021000 	.word	0x40021000
 8003298:	08004e50 	.word	0x08004e50
 800329c:	00f42400 	.word	0x00f42400
 80032a0:	007a1200 	.word	0x007a1200

080032a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000000 	.word	0x20000000

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032c0:	f7ff fff0 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032c4:	4601      	mov	r1, r0
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08004e48 	.word	0x08004e48

080032e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032ec:	f7ff ffda 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032f0:	4601      	mov	r1, r0
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0adb      	lsrs	r3, r3, #11
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	08004e48 	.word	0x08004e48

08003314 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003320:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800332c:	f7ff f92c 	bl	8002588 <HAL_PWREx_GetVoltageRange>
 8003330:	6178      	str	r0, [r7, #20]
 8003332:	e014      	b.n	800335e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a24      	ldr	r2, [pc, #144]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
 8003340:	4b22      	ldr	r3, [pc, #136]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800334c:	f7ff f91c 	bl	8002588 <HAL_PWREx_GetVoltageRange>
 8003350:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003364:	d10b      	bne.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d919      	bls.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2ba0      	cmp	r3, #160	; 0xa0
 8003370:	d902      	bls.n	8003378 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003372:	2302      	movs	r3, #2
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e013      	b.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003378:	2301      	movs	r3, #1
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	e010      	b.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d902      	bls.n	800338a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003384:	2303      	movs	r3, #3
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	e00a      	b.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d102      	bne.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003390:	2302      	movs	r3, #2
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	e004      	b.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b70      	cmp	r3, #112	; 0x70
 800339a:	d101      	bne.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800339c:	2301      	movs	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 0207 	bic.w	r2, r3, #7
 80033a8:	4909      	ldr	r1, [pc, #36]	; (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d001      	beq.n	80033c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40022000 	.word	0x40022000

080033d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033dc:	2300      	movs	r3, #0
 80033de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033e0:	2300      	movs	r3, #0
 80033e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03f      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f8:	d01c      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80033fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fe:	d802      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003404:	e01f      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800340a:	d003      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800340c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003410:	d01c      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003412:	e018      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003414:	4b85      	ldr	r3, [pc, #532]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a84      	ldr	r2, [pc, #528]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003420:	e015      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fac9 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003432:	e00c      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3320      	adds	r3, #32
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fbb0 	bl	8003ba0 <RCCEx_PLLSAI2_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	74fb      	strb	r3, [r7, #19]
      break;
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800344c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003454:	4b75      	ldr	r3, [pc, #468]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	4972      	ldr	r1, [pc, #456]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800346a:	e001      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03f      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003484:	d01c      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003486:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348a:	d802      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003490:	e01f      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003496:	d003      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003498:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800349c:	d01c      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800349e:	e018      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034a0:	4b62      	ldr	r3, [pc, #392]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a61      	ldr	r2, [pc, #388]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ac:	e015      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa83 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034be:	e00c      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3320      	adds	r3, #32
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fb6a 	bl	8003ba0 <RCCEx_PLLSAI2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	74fb      	strb	r3, [r7, #19]
      break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034e0:	4b52      	ldr	r3, [pc, #328]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ee:	494f      	ldr	r1, [pc, #316]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034f6:	e001      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a0 	beq.w	800364a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	4a40      	ldr	r2, [pc, #256]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352e:	6593      	str	r3, [r2, #88]	; 0x58
 8003530:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353c:	2301      	movs	r3, #1
 800353e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003540:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354c:	f7fe f96e 	bl	800182c <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003552:	e009      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fe f96a 	bl	800182c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	74fb      	strb	r3, [r7, #19]
        break;
 8003566:	e005      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003568:	4b31      	ldr	r3, [pc, #196]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d15c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800357a:	4b2c      	ldr	r3, [pc, #176]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003584:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	d019      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003598:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a20      	ldr	r2, [pc, #128]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fe f929 	bl	800182c <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035dc:	e00b      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe f925 	bl	800182c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d902      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	74fb      	strb	r3, [r7, #19]
            break;
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ec      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361a:	4904      	ldr	r1, [pc, #16]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003622:	e009      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
 8003628:	e006      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003638:	7c7b      	ldrb	r3, [r7, #17]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b9e      	ldr	r3, [pc, #632]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	4a9d      	ldr	r2, [pc, #628]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003656:	4b98      	ldr	r3, [pc, #608]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f023 0203 	bic.w	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	4994      	ldr	r1, [pc, #592]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003678:	4b8f      	ldr	r3, [pc, #572]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 020c 	bic.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	498c      	ldr	r1, [pc, #560]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369a:	4b87      	ldr	r3, [pc, #540]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	4983      	ldr	r1, [pc, #524]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036bc:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	497b      	ldr	r1, [pc, #492]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036de:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ec:	4972      	ldr	r1, [pc, #456]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003700:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	496a      	ldr	r1, [pc, #424]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003722:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	4961      	ldr	r1, [pc, #388]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003744:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	4959      	ldr	r1, [pc, #356]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	4950      	ldr	r1, [pc, #320]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	4948      	ldr	r1, [pc, #288]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	493f      	ldr	r1, [pc, #252]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d028      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	4937      	ldr	r1, [pc, #220]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ea:	d106      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
 80037f8:	e011      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003802:	d10c      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f8d8 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d028      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	491f      	ldr	r1, [pc, #124]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003848:	d106      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003854:	60d3      	str	r3, [r2, #12]
 8003856:	e011      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003860:	d10c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f8a9 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003896:	4908      	ldr	r1, [pc, #32]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a02      	ldr	r2, [pc, #8]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	e014      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f877 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fa:	4928      	ldr	r1, [pc, #160]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390a:	d10d      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f854 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d014      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	74bb      	strb	r3, [r7, #18]
 8003926:	e011      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003930:	d10c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3320      	adds	r3, #32
 8003936:	2102      	movs	r1, #2
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f931 	bl	8003ba0 <RCCEx_PLLSAI2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003966:	490d      	ldr	r1, [pc, #52]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800398a:	4904      	ldr	r1, [pc, #16]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003992:	7cbb      	ldrb	r3, [r7, #18]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000

080039a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039aa:	f043 0304 	orr.w	r3, r3, #4
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000

080039c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ce:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039da:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0203 	and.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
       ||
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039f2:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
       ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d044      	beq.n	8003a90 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e041      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d00c      	beq.n	8003a2e <RCCEx_PLLSAI1_Config+0x6e>
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d013      	beq.n	8003a40 <RCCEx_PLLSAI1_Config+0x80>
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d120      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a1c:	4b5f      	ldr	r3, [pc, #380]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11d      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2c:	e01a      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3e:	e013      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a40:	4b56      	ldr	r3, [pc, #344]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a5c:	e006      	b.n	8003a6c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      break;
 8003a62:	e004      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a64:	bf00      	nop
 8003a66:	e002      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a6c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a74:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	4944      	ldr	r1, [pc, #272]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d17d      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a40      	ldr	r2, [pc, #256]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa2:	f7fd fec3 	bl	800182c <HAL_GetTick>
 8003aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa8:	e009      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aaa:	f7fd febf 	bl	800182c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	73fb      	strb	r3, [r7, #15]
        break;
 8003abc:	e005      	b.n	8003aca <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ef      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d160      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d111      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	0211      	lsls	r1, r2, #8
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68d2      	ldr	r2, [r2, #12]
 8003aec:	0912      	lsrs	r2, r2, #4
 8003aee:	0452      	lsls	r2, r2, #17
 8003af0:	430a      	orrs	r2, r1
 8003af2:	492a      	ldr	r1, [pc, #168]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	610b      	str	r3, [r1, #16]
 8003af8:	e027      	b.n	8003b4a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d112      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b00:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	0211      	lsls	r1, r2, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6912      	ldr	r2, [r2, #16]
 8003b16:	0852      	lsrs	r2, r2, #1
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0552      	lsls	r2, r2, #21
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	491f      	ldr	r1, [pc, #124]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	610b      	str	r3, [r1, #16]
 8003b24:	e011      	b.n	8003b4a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	0211      	lsls	r1, r2, #8
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6952      	ldr	r2, [r2, #20]
 8003b3c:	0852      	lsrs	r2, r2, #1
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	0652      	lsls	r2, r2, #25
 8003b42:	430a      	orrs	r2, r1
 8003b44:	4915      	ldr	r1, [pc, #84]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fd fe69 	bl	800182c <HAL_GetTick>
 8003b5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b5c:	e009      	b.n	8003b72 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b5e:	f7fd fe65 	bl	800182c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d902      	bls.n	8003b72 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b70:	e005      	b.n	8003b7e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ef      	beq.n	8003b5e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4903      	ldr	r1, [pc, #12]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bae:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d018      	beq.n	8003bec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0203 	and.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d10d      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
       ||
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bd2:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
       ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d044      	beq.n	8003c70 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	e041      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d00c      	beq.n	8003c0e <RCCEx_PLLSAI2_Config+0x6e>
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d013      	beq.n	8003c20 <RCCEx_PLLSAI2_Config+0x80>
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d120      	bne.n	8003c3e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bfc:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d11d      	bne.n	8003c44 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0c:	e01a      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c0e:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1e:	e013      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c20:	4b4b      	ldr	r3, [pc, #300]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10f      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c3c:	e006      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
      break;
 8003c42:	e004      	b.n	8003c4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c44:	bf00      	nop
 8003c46:	e002      	b.n	8003c4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c48:	bf00      	nop
 8003c4a:	e000      	b.n	8003c4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c4c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c54:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	4939      	ldr	r1, [pc, #228]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d167      	bne.n	8003d46 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c76:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c82:	f7fd fdd3 	bl	800182c <HAL_GetTick>
 8003c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c88:	e009      	b.n	8003c9e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c8a:	f7fd fdcf 	bl	800182c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d902      	bls.n	8003c9e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9c:	e005      	b.n	8003caa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ef      	bne.n	8003c8a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d14a      	bne.n	8003d46 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d111      	bne.n	8003cda <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6892      	ldr	r2, [r2, #8]
 8003cc6:	0211      	lsls	r1, r2, #8
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	68d2      	ldr	r2, [r2, #12]
 8003ccc:	0912      	lsrs	r2, r2, #4
 8003cce:	0452      	lsls	r2, r2, #17
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	491f      	ldr	r1, [pc, #124]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	614b      	str	r3, [r1, #20]
 8003cd8:	e011      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6892      	ldr	r2, [r2, #8]
 8003cea:	0211      	lsls	r1, r2, #8
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6912      	ldr	r2, [r2, #16]
 8003cf0:	0852      	lsrs	r2, r2, #1
 8003cf2:	3a01      	subs	r2, #1
 8003cf4:	0652      	lsls	r2, r2, #25
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	4915      	ldr	r1, [pc, #84]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fd8f 	bl	800182c <HAL_GetTick>
 8003d0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d10:	e009      	b.n	8003d26 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d12:	f7fd fd8b 	bl	800182c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d902      	bls.n	8003d26 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	73fb      	strb	r3, [r7, #15]
          break;
 8003d24:	e005      	b.n	8003d32 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ef      	beq.n	8003d12 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07c      	b.n	8003e60 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fd fb11 	bl	80013a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003da6:	d902      	bls.n	8003dae <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e002      	b.n	8003db4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003dbc:	d007      	beq.n	8003dce <HAL_SPI_Init+0x7a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10b      	bne.n	8003dee <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dde:	d903      	bls.n	8003de8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
 8003de6:	e002      	b.n	8003dee <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	ea42 0103 	orr.w	r1, r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0204 	and.w	r2, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	ea42 0103 	orr.w	r1, r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e040      	b.n	8003efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fad0 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f82c 	bl	8003f04 <UART_SetConfig>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e022      	b.n	8003efc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fb92 	bl	80045e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fc19 	bl	800472c <UART_CheckIdleState>
 8003efa:	4603      	mov	r3, r0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f04:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f08:	b08a      	sub	sp, #40	; 0x28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4bb8      	ldr	r3, [pc, #736]	; (800421c <UART_SetConfig+0x318>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4aae      	ldr	r2, [pc, #696]	; (8004220 <UART_SetConfig+0x31c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	4313      	orrs	r3, r2
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4aa5      	ldr	r2, [pc, #660]	; (8004224 <UART_SetConfig+0x320>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d126      	bne.n	8003fe2 <UART_SetConfig+0xde>
 8003f94:	4ba4      	ldr	r3, [pc, #656]	; (8004228 <UART_SetConfig+0x324>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d81a      	bhi.n	8003fd8 <UART_SetConfig+0xd4>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0xa4>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fc9 	.word	0x08003fc9
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fd1 	.word	0x08003fd1
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fbe:	e105      	b.n	80041cc <UART_SetConfig+0x2c8>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e101      	b.n	80041cc <UART_SetConfig+0x2c8>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e0fd      	b.n	80041cc <UART_SetConfig+0x2c8>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd6:	e0f9      	b.n	80041cc <UART_SetConfig+0x2c8>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fde:	bf00      	nop
 8003fe0:	e0f4      	b.n	80041cc <UART_SetConfig+0x2c8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a91      	ldr	r2, [pc, #580]	; (800422c <UART_SetConfig+0x328>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d138      	bne.n	800405e <UART_SetConfig+0x15a>
 8003fec:	4b8e      	ldr	r3, [pc, #568]	; (8004228 <UART_SetConfig+0x324>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d82c      	bhi.n	8004054 <UART_SetConfig+0x150>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0xfc>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004035 	.word	0x08004035
 8004004:	08004055 	.word	0x08004055
 8004008:	08004055 	.word	0x08004055
 800400c:	08004055 	.word	0x08004055
 8004010:	08004045 	.word	0x08004045
 8004014:	08004055 	.word	0x08004055
 8004018:	08004055 	.word	0x08004055
 800401c:	08004055 	.word	0x08004055
 8004020:	0800403d 	.word	0x0800403d
 8004024:	08004055 	.word	0x08004055
 8004028:	08004055 	.word	0x08004055
 800402c:	08004055 	.word	0x08004055
 8004030:	0800404d 	.word	0x0800404d
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403a:	e0c7      	b.n	80041cc <UART_SetConfig+0x2c8>
 800403c:	2302      	movs	r3, #2
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004042:	e0c3      	b.n	80041cc <UART_SetConfig+0x2c8>
 8004044:	2304      	movs	r3, #4
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404a:	e0bf      	b.n	80041cc <UART_SetConfig+0x2c8>
 800404c:	2308      	movs	r3, #8
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004052:	e0bb      	b.n	80041cc <UART_SetConfig+0x2c8>
 8004054:	2310      	movs	r3, #16
 8004056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405a:	bf00      	nop
 800405c:	e0b6      	b.n	80041cc <UART_SetConfig+0x2c8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a73      	ldr	r2, [pc, #460]	; (8004230 <UART_SetConfig+0x32c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d125      	bne.n	80040b4 <UART_SetConfig+0x1b0>
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <UART_SetConfig+0x324>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004072:	2b10      	cmp	r3, #16
 8004074:	d011      	beq.n	800409a <UART_SetConfig+0x196>
 8004076:	2b10      	cmp	r3, #16
 8004078:	d802      	bhi.n	8004080 <UART_SetConfig+0x17c>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <UART_SetConfig+0x186>
 800407e:	e014      	b.n	80040aa <UART_SetConfig+0x1a6>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d006      	beq.n	8004092 <UART_SetConfig+0x18e>
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d00c      	beq.n	80040a2 <UART_SetConfig+0x19e>
 8004088:	e00f      	b.n	80040aa <UART_SetConfig+0x1a6>
 800408a:	2300      	movs	r3, #0
 800408c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004090:	e09c      	b.n	80041cc <UART_SetConfig+0x2c8>
 8004092:	2302      	movs	r3, #2
 8004094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004098:	e098      	b.n	80041cc <UART_SetConfig+0x2c8>
 800409a:	2304      	movs	r3, #4
 800409c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a0:	e094      	b.n	80041cc <UART_SetConfig+0x2c8>
 80040a2:	2308      	movs	r3, #8
 80040a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a8:	e090      	b.n	80041cc <UART_SetConfig+0x2c8>
 80040aa:	2310      	movs	r3, #16
 80040ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b0:	bf00      	nop
 80040b2:	e08b      	b.n	80041cc <UART_SetConfig+0x2c8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a5e      	ldr	r2, [pc, #376]	; (8004234 <UART_SetConfig+0x330>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d125      	bne.n	800410a <UART_SetConfig+0x206>
 80040be:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <UART_SetConfig+0x324>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d011      	beq.n	80040f0 <UART_SetConfig+0x1ec>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d802      	bhi.n	80040d6 <UART_SetConfig+0x1d2>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <UART_SetConfig+0x1dc>
 80040d4:	e014      	b.n	8004100 <UART_SetConfig+0x1fc>
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d006      	beq.n	80040e8 <UART_SetConfig+0x1e4>
 80040da:	2bc0      	cmp	r3, #192	; 0xc0
 80040dc:	d00c      	beq.n	80040f8 <UART_SetConfig+0x1f4>
 80040de:	e00f      	b.n	8004100 <UART_SetConfig+0x1fc>
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e6:	e071      	b.n	80041cc <UART_SetConfig+0x2c8>
 80040e8:	2302      	movs	r3, #2
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ee:	e06d      	b.n	80041cc <UART_SetConfig+0x2c8>
 80040f0:	2304      	movs	r3, #4
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f6:	e069      	b.n	80041cc <UART_SetConfig+0x2c8>
 80040f8:	2308      	movs	r3, #8
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fe:	e065      	b.n	80041cc <UART_SetConfig+0x2c8>
 8004100:	2310      	movs	r3, #16
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	bf00      	nop
 8004108:	e060      	b.n	80041cc <UART_SetConfig+0x2c8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a4a      	ldr	r2, [pc, #296]	; (8004238 <UART_SetConfig+0x334>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d129      	bne.n	8004168 <UART_SetConfig+0x264>
 8004114:	4b44      	ldr	r3, [pc, #272]	; (8004228 <UART_SetConfig+0x324>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004122:	d014      	beq.n	800414e <UART_SetConfig+0x24a>
 8004124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004128:	d802      	bhi.n	8004130 <UART_SetConfig+0x22c>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <UART_SetConfig+0x23a>
 800412e:	e016      	b.n	800415e <UART_SetConfig+0x25a>
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d007      	beq.n	8004146 <UART_SetConfig+0x242>
 8004136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413a:	d00c      	beq.n	8004156 <UART_SetConfig+0x252>
 800413c:	e00f      	b.n	800415e <UART_SetConfig+0x25a>
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004144:	e042      	b.n	80041cc <UART_SetConfig+0x2c8>
 8004146:	2302      	movs	r3, #2
 8004148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414c:	e03e      	b.n	80041cc <UART_SetConfig+0x2c8>
 800414e:	2304      	movs	r3, #4
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004154:	e03a      	b.n	80041cc <UART_SetConfig+0x2c8>
 8004156:	2308      	movs	r3, #8
 8004158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415c:	e036      	b.n	80041cc <UART_SetConfig+0x2c8>
 800415e:	2310      	movs	r3, #16
 8004160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004164:	bf00      	nop
 8004166:	e031      	b.n	80041cc <UART_SetConfig+0x2c8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <UART_SetConfig+0x31c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d129      	bne.n	80041c6 <UART_SetConfig+0x2c2>
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <UART_SetConfig+0x324>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004180:	d014      	beq.n	80041ac <UART_SetConfig+0x2a8>
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004186:	d802      	bhi.n	800418e <UART_SetConfig+0x28a>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <UART_SetConfig+0x298>
 800418c:	e016      	b.n	80041bc <UART_SetConfig+0x2b8>
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d007      	beq.n	80041a4 <UART_SetConfig+0x2a0>
 8004194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004198:	d00c      	beq.n	80041b4 <UART_SetConfig+0x2b0>
 800419a:	e00f      	b.n	80041bc <UART_SetConfig+0x2b8>
 800419c:	2300      	movs	r3, #0
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x2c8>
 80041a4:	2302      	movs	r3, #2
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x2c8>
 80041ac:	2304      	movs	r3, #4
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b2:	e00b      	b.n	80041cc <UART_SetConfig+0x2c8>
 80041b4:	2308      	movs	r3, #8
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ba:	e007      	b.n	80041cc <UART_SetConfig+0x2c8>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <UART_SetConfig+0x2c8>
 80041c6:	2310      	movs	r3, #16
 80041c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <UART_SetConfig+0x31c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	f040 80fe 	bne.w	80043d4 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d837      	bhi.n	8004250 <UART_SetConfig+0x34c>
 80041e0:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0x2e4>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	08004251 	.word	0x08004251
 80041f0:	08004215 	.word	0x08004215
 80041f4:	08004251 	.word	0x08004251
 80041f8:	08004241 	.word	0x08004241
 80041fc:	08004251 	.word	0x08004251
 8004200:	08004251 	.word	0x08004251
 8004204:	08004251 	.word	0x08004251
 8004208:	08004249 	.word	0x08004249
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800420c:	f7ff f856 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8004210:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004212:	e020      	b.n	8004256 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <UART_SetConfig+0x338>)
 8004216:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004218:	e01d      	b.n	8004256 <UART_SetConfig+0x352>
 800421a:	bf00      	nop
 800421c:	efff69f3 	.word	0xefff69f3
 8004220:	40008000 	.word	0x40008000
 8004224:	40013800 	.word	0x40013800
 8004228:	40021000 	.word	0x40021000
 800422c:	40004400 	.word	0x40004400
 8004230:	40004800 	.word	0x40004800
 8004234:	40004c00 	.word	0x40004c00
 8004238:	40005000 	.word	0x40005000
 800423c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004240:	f7fe ffa6 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8004244:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004246:	e006      	b.n	8004256 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800424e:	e002      	b.n	8004256 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	76fb      	strb	r3, [r7, #27]
        break;
 8004254:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 81b9 	beq.w	80045d0 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	429a      	cmp	r2, r3
 800426c:	d305      	bcc.n	800427a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	429a      	cmp	r2, r3
 8004278:	d902      	bls.n	8004280 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	76fb      	strb	r3, [r7, #27]
 800427e:	e1a7      	b.n	80045d0 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004284:	2b08      	cmp	r3, #8
 8004286:	f200 8092 	bhi.w	80043ae <UART_SetConfig+0x4aa>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <UART_SetConfig+0x38c>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080043af 	.word	0x080043af
 8004298:	08004303 	.word	0x08004303
 800429c:	080043af 	.word	0x080043af
 80042a0:	08004337 	.word	0x08004337
 80042a4:	080043af 	.word	0x080043af
 80042a8:	080043af 	.word	0x080043af
 80042ac:	080043af 	.word	0x080043af
 80042b0:	08004385 	.word	0x08004385
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80042b4:	f7ff f802 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 80042b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4619      	mov	r1, r3
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	f04f 0400 	mov.w	r4, #0
 80042ca:	0214      	lsls	r4, r2, #8
 80042cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042d0:	020b      	lsls	r3, r1, #8
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6852      	ldr	r2, [r2, #4]
 80042d6:	0852      	lsrs	r2, r2, #1
 80042d8:	4611      	mov	r1, r2
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	eb13 0b01 	adds.w	fp, r3, r1
 80042e2:	eb44 0c02 	adc.w	ip, r4, r2
 80042e6:	4658      	mov	r0, fp
 80042e8:	4661      	mov	r1, ip
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f04f 0400 	mov.w	r4, #0
 80042f2:	461a      	mov	r2, r3
 80042f4:	4623      	mov	r3, r4
 80042f6:	f7fb ff67 	bl	80001c8 <__aeabi_uldivmod>
 80042fa:	4603      	mov	r3, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004300:	e058      	b.n	80043b4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	f04f 0400 	mov.w	r4, #0
 800430c:	49ae      	ldr	r1, [pc, #696]	; (80045c8 <UART_SetConfig+0x6c4>)
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	eb13 0b01 	adds.w	fp, r3, r1
 8004316:	eb44 0c02 	adc.w	ip, r4, r2
 800431a:	4658      	mov	r0, fp
 800431c:	4661      	mov	r1, ip
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f04f 0400 	mov.w	r4, #0
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	f7fb ff4d 	bl	80001c8 <__aeabi_uldivmod>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004334:	e03e      	b.n	80043b4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7fe ff2b 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800433a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4619      	mov	r1, r3
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	0214      	lsls	r4, r2, #8
 800434e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004352:	020b      	lsls	r3, r1, #8
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6852      	ldr	r2, [r2, #4]
 8004358:	0852      	lsrs	r2, r2, #1
 800435a:	4611      	mov	r1, r2
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	eb13 0b01 	adds.w	fp, r3, r1
 8004364:	eb44 0c02 	adc.w	ip, r4, r2
 8004368:	4658      	mov	r0, fp
 800436a:	4661      	mov	r1, ip
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f04f 0400 	mov.w	r4, #0
 8004374:	461a      	mov	r2, r3
 8004376:	4623      	mov	r3, r4
 8004378:	f7fb ff26 	bl	80001c8 <__aeabi_uldivmod>
 800437c:	4603      	mov	r3, r0
 800437e:	460c      	mov	r4, r1
 8004380:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004382:	e017      	b.n	80043b4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	f04f 0400 	mov.w	r4, #0
 800438e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004392:	f144 0100 	adc.w	r1, r4, #0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f04f 0400 	mov.w	r4, #0
 800439e:	461a      	mov	r2, r3
 80043a0:	4623      	mov	r3, r4
 80043a2:	f7fb ff11 	bl	80001c8 <__aeabi_uldivmod>
 80043a6:	4603      	mov	r3, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043ac:	e002      	b.n	80043b4 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	76fb      	strb	r3, [r7, #27]
            break;
 80043b2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ba:	d308      	bcc.n	80043ce <UART_SetConfig+0x4ca>
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c2:	d204      	bcs.n	80043ce <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	e100      	b.n	80045d0 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	76fb      	strb	r3, [r7, #27]
 80043d2:	e0fd      	b.n	80045d0 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043dc:	f040 8084 	bne.w	80044e8 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80043e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d85f      	bhi.n	80044a8 <UART_SetConfig+0x5a4>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0x4ec>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004435 	.word	0x08004435
 80043f8:	08004455 	.word	0x08004455
 80043fc:	080044a9 	.word	0x080044a9
 8004400:	08004471 	.word	0x08004471
 8004404:	080044a9 	.word	0x080044a9
 8004408:	080044a9 	.word	0x080044a9
 800440c:	080044a9 	.word	0x080044a9
 8004410:	08004491 	.word	0x08004491
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fe ff52 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8004418:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	005a      	lsls	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004432:	e03c      	b.n	80044ae <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7fe ff58 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 8004438:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	005a      	lsls	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004452:	e02c      	b.n	80044ae <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800445e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6852      	ldr	r2, [r2, #4]
 8004466:	fbb3 f3f2 	udiv	r3, r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800446e:	e01e      	b.n	80044ae <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004470:	f7fe fe8e 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8004474:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	005a      	lsls	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	b29b      	uxth	r3, r3
 800448c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800448e:	e00e      	b.n	80044ae <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044a6:	e002      	b.n	80044ae <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	76fb      	strb	r3, [r7, #27]
        break;
 80044ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d916      	bls.n	80044e2 <UART_SetConfig+0x5de>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d212      	bcs.n	80044e2 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f023 030f 	bic.w	r3, r3, #15
 80044c4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	89fb      	ldrh	r3, [r7, #14]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	89fa      	ldrh	r2, [r7, #14]
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	e076      	b.n	80045d0 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	76fb      	strb	r3, [r7, #27]
 80044e6:	e073      	b.n	80045d0 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80044e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d85c      	bhi.n	80045aa <UART_SetConfig+0x6a6>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0x5f4>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	0800453b 	.word	0x0800453b
 8004500:	08004559 	.word	0x08004559
 8004504:	080045ab 	.word	0x080045ab
 8004508:	08004575 	.word	0x08004575
 800450c:	080045ab 	.word	0x080045ab
 8004510:	080045ab 	.word	0x080045ab
 8004514:	080045ab 	.word	0x080045ab
 8004518:	08004593 	.word	0x08004593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe fece 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8004520:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	085a      	lsrs	r2, r3, #1
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	b29b      	uxth	r3, r3
 8004536:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004538:	e03a      	b.n	80045b0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800453a:	f7fe fed5 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 800453e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	085a      	lsrs	r2, r3, #1
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	441a      	add	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	b29b      	uxth	r3, r3
 8004554:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004556:	e02b      	b.n	80045b0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004562:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6852      	ldr	r2, [r2, #4]
 800456a:	fbb3 f3f2 	udiv	r3, r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004572:	e01d      	b.n	80045b0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004574:	f7fe fe0c 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8004578:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	085a      	lsrs	r2, r3, #1
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	441a      	add	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	b29b      	uxth	r3, r3
 800458e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004590:	e00e      	b.n	80045b0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045a8:	e002      	b.n	80045b0 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	76fb      	strb	r3, [r7, #27]
        break;
 80045ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d90a      	bls.n	80045cc <UART_SetConfig+0x6c8>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d206      	bcs.n	80045cc <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	e003      	b.n	80045d0 <UART_SetConfig+0x6cc>
 80045c8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045dc:	7efb      	ldrb	r3, [r7, #27]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080045e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01a      	beq.n	80046fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e6:	d10a      	bne.n	80046fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af02      	add	r7, sp, #8
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800473a:	f7fd f877 	bl	800182c <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d10e      	bne.n	800476c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f82a 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e020      	b.n	80047ae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b04      	cmp	r3, #4
 8004778:	d10e      	bne.n	8004798 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800477a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f814 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e00a      	b.n	80047ae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c6:	e05d      	b.n	8004884 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d059      	beq.n	8004884 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fd f82c 	bl	800182c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11b      	bne.n	800481e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e042      	b.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02b      	beq.n	8004884 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483a:	d123      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004844:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004854:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e00f      	b.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d092      	beq.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048ac:	b084      	sub	sp, #16
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	f107 001c 	add.w	r0, r7, #28
 80048ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d122      	bne.n	800490a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d105      	bne.n	80048fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa28 	bl	8004d54 <USB_CoreReset>
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e01a      	b.n	8004940 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa1c 	bl	8004d54 <USB_CoreReset>
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
 8004932:	e005      	b.n	8004940 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800494c:	b004      	add	sp, #16
 800494e:	4770      	bx	lr

08004950 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 0201 	bic.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	e00b      	b.n	80049b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e001      	b.n	80049b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e003      	b.n	80049be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80049b6:	2032      	movs	r0, #50	; 0x32
 80049b8:	f7fc ff44 	bl	8001844 <HAL_Delay>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c8:	b084      	sub	sp, #16
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	e009      	b.n	80049fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3340      	adds	r3, #64	; 0x40
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3301      	adds	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b0e      	cmp	r3, #14
 8004a00:	d9f2      	bls.n	80049e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d11c      	bne.n	8004a42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e005      	b.n	8004a4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	4619      	mov	r1, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	461a      	mov	r2, r3
 8004a6a:	680b      	ldr	r3, [r1, #0]
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a6e:	2103      	movs	r1, #3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f93d 	bl	8004cf0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a76:	2110      	movs	r1, #16
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8f1 	bl	8004c60 <USB_FlushTxFifo>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f90f 	bl	8004cac <USB_FlushRxFifo>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	e043      	b.n	8004b4a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad8:	d118      	bne.n	8004b0c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	461a      	mov	r2, r3
 8004aee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e013      	b.n	8004b1e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	461a      	mov	r2, r3
 8004b04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e008      	b.n	8004b1e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	3301      	adds	r3, #1
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3b7      	bcc.n	8004ac2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e043      	b.n	8004be0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6e:	d118      	bne.n	8004ba2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	461a      	mov	r2, r3
 8004b84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e013      	b.n	8004bb4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e008      	b.n	8004bb4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d3b7      	bcc.n	8004b58 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f043 0210 	orr.w	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <USB_DevInit+0x294>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f043 0208 	orr.w	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d107      	bne.n	8004c4a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c56:	b004      	add	sp, #16
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	803c3800 	.word	0x803c3800

08004c60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <USB_FlushTxFifo+0x48>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d0f0      	beq.n	8004c7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <USB_FlushRxFifo+0x40>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e006      	b.n	8004cde <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d0f0      	beq.n	8004cbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	00030d40 	.word	0x00030d40

08004cf0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d3c:	f043 0302 	orr.w	r3, r3, #2
 8004d40:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004d42:	2003      	movs	r0, #3
 8004d44:	f7fc fd7e 	bl	8001844 <HAL_Delay>

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <USB_CoreReset+0x64>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e01b      	b.n	8004daa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	daf2      	bge.n	8004d60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f043 0201 	orr.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <USB_CoreReset+0x64>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d0f0      	beq.n	8004d8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	00030d40 	.word	0x00030d40

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4e0d      	ldr	r6, [pc, #52]	; (8004df4 <__libc_init_array+0x38>)
 8004dc0:	4c0d      	ldr	r4, [pc, #52]	; (8004df8 <__libc_init_array+0x3c>)
 8004dc2:	1ba4      	subs	r4, r4, r6
 8004dc4:	10a4      	asrs	r4, r4, #2
 8004dc6:	2500      	movs	r5, #0
 8004dc8:	42a5      	cmp	r5, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	4e0b      	ldr	r6, [pc, #44]	; (8004dfc <__libc_init_array+0x40>)
 8004dce:	4c0c      	ldr	r4, [pc, #48]	; (8004e00 <__libc_init_array+0x44>)
 8004dd0:	f000 f820 	bl	8004e14 <_init>
 8004dd4:	1ba4      	subs	r4, r4, r6
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	2500      	movs	r5, #0
 8004dda:	42a5      	cmp	r5, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004de4:	4798      	blx	r3
 8004de6:	3501      	adds	r5, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dee:	4798      	blx	r3
 8004df0:	3501      	adds	r5, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08004e88 	.word	0x08004e88
 8004df8:	08004e88 	.word	0x08004e88
 8004dfc:	08004e88 	.word	0x08004e88
 8004e00:	08004e8c 	.word	0x08004e8c

08004e04 <memset>:
 8004e04:	4402      	add	r2, r0
 8004e06:	4603      	mov	r3, r0
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
